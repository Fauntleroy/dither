
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.head.appendChild(r) })(window.document);
(function () {
    'use strict';

    function noop() { }
    const identity = x => x;
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function get_store_value(store) {
        let value;
        subscribe(store, _ => value = _)();
        return value;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function prevent_default(fn) {
        return function (event) {
            event.preventDefault();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        if (value != null || input.value) {
            input.value = value;
        }
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    const active_docs = new Set();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash(rule)}_${uid}`;
        const doc = node.ownerDocument;
        active_docs.add(doc);
        const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);
        const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});
        if (!current_rules[name]) {
            current_rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            active_docs.forEach(doc => {
                const stylesheet = doc.__svelte_stylesheet;
                let i = stylesheet.cssRules.length;
                while (i--)
                    stylesheet.deleteRule(i);
                doc.__svelte_rules = {};
            });
            active_docs.clear();
        });
    }

    function create_animation(node, from, fn, params) {
        if (!from)
            return noop;
        const to = node.getBoundingClientRect();
        if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)
            return noop;
        const { delay = 0, duration = 300, easing = identity, 
        // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?
        start: start_time = now() + delay, 
        // @ts-ignore todo:
        end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);
        let running = true;
        let started = false;
        let name;
        function start() {
            if (css) {
                name = create_rule(node, 0, 1, duration, delay, easing, css);
            }
            if (!delay) {
                started = true;
            }
        }
        function stop() {
            if (css)
                delete_rule(node, name);
            running = false;
        }
        loop(now => {
            if (!started && now >= start_time) {
                started = true;
            }
            if (started && now >= end) {
                tick(1, 0);
                stop();
            }
            if (!running) {
                return false;
            }
            if (started) {
                const p = now - start_time;
                const t = 0 + 1 * easing(p / duration);
                tick(t, 1 - t);
            }
            return true;
        });
        start();
        tick(0, 1);
        return stop;
    }
    function fix_position(node) {
        const style = getComputedStyle(node);
        if (style.position !== 'absolute' && style.position !== 'fixed') {
            const { width, height } = style;
            const a = node.getBoundingClientRect();
            node.style.position = 'absolute';
            node.style.width = width;
            node.style.height = height;
            add_transform(node, a);
        }
    }
    function add_transform(node, a) {
        const b = node.getBoundingClientRect();
        if (a.left !== b.left || a.top !== b.top) {
            const style = getComputedStyle(node);
            const transform = style.transform === 'none' ? '' : style.transform;
            node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;
        }
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error(`Function called outside component initialization`);
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail);
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
            }
        };
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    const null_transition = { duration: 0 };
    function create_in_transition(node, fn, params) {
        let config = fn(node, params);
        let running = false;
        let animation_name;
        let task;
        let uid = 0;
        function cleanup() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
            tick(0, 1);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            if (task)
                task.abort();
            running = true;
            add_render_callback(() => dispatch(node, true, 'start'));
            task = loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(1, 0);
                        dispatch(node, true, 'end');
                        cleanup();
                        return running = false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(t, 1 - t);
                    }
                }
                return running;
            });
        }
        let started = false;
        return {
            start() {
                if (started)
                    return;
                delete_rule(node);
                if (is_function(config)) {
                    config = config();
                    wait().then(go);
                }
                else {
                    go();
                }
            },
            invalidate() {
                started = false;
            },
            end() {
                if (running) {
                    cleanup();
                    running = false;
                }
            }
        };
    }
    function create_out_transition(node, fn, params) {
        let config = fn(node, params);
        let running = true;
        let animation_name;
        const group = outros;
        group.r += 1;
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            add_render_callback(() => dispatch(node, false, 'start'));
            loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(0, 1);
                        dispatch(node, false, 'end');
                        if (!--group.r) {
                            // this will result in `end()` being called,
                            // so we don't need to clean up here
                            run_all(group.c);
                        }
                        return false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(1 - t, t);
                    }
                }
                return running;
            });
        }
        if (is_function(config)) {
            wait().then(() => {
                // @ts-ignore
                config = config();
                go();
            });
        }
        else {
            go();
        }
        return {
            end(reset) {
                if (reset && config.tick) {
                    config.tick(1, 0);
                }
                if (running) {
                    if (animation_name)
                        delete_rule(node, animation_name);
                    running = false;
                }
            }
        };
    }

    const globals = (typeof window !== 'undefined' ? window : global);
    function outro_and_destroy_block(block, lookup) {
        transition_out(block, 1, 1, () => {
            lookup.delete(block.key);
        });
    }
    function fix_and_outro_and_destroy_block(block, lookup) {
        block.f();
        outro_and_destroy_block(block, lookup);
    }
    function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
        let o = old_blocks.length;
        let n = list.length;
        let i = o;
        const old_indexes = {};
        while (i--)
            old_indexes[old_blocks[i].key] = i;
        const new_blocks = [];
        const new_lookup = new Map();
        const deltas = new Map();
        i = n;
        while (i--) {
            const child_ctx = get_context(ctx, list, i);
            const key = get_key(child_ctx);
            let block = lookup.get(key);
            if (!block) {
                block = create_each_block(key, child_ctx);
                block.c();
            }
            else if (dynamic) {
                block.p(child_ctx, dirty);
            }
            new_lookup.set(key, new_blocks[i] = block);
            if (key in old_indexes)
                deltas.set(key, Math.abs(i - old_indexes[key]));
        }
        const will_move = new Set();
        const did_move = new Set();
        function insert(block) {
            transition_in(block, 1);
            block.m(node, next, lookup.has(block.key));
            lookup.set(block.key, block);
            next = block.first;
            n--;
        }
        while (o && n) {
            const new_block = new_blocks[n - 1];
            const old_block = old_blocks[o - 1];
            const new_key = new_block.key;
            const old_key = old_block.key;
            if (new_block === old_block) {
                // do nothing
                next = new_block.first;
                o--;
                n--;
            }
            else if (!new_lookup.has(old_key)) {
                // remove old block
                destroy(old_block, lookup);
                o--;
            }
            else if (!lookup.has(new_key) || will_move.has(new_key)) {
                insert(new_block);
            }
            else if (did_move.has(old_key)) {
                o--;
            }
            else if (deltas.get(new_key) > deltas.get(old_key)) {
                did_move.add(new_key);
                insert(new_block);
            }
            else {
                will_move.add(old_key);
                o--;
            }
        }
        while (o--) {
            const old_block = old_blocks[o];
            if (!new_lookup.has(old_block.key))
                destroy(old_block, lookup);
        }
        while (n)
            insert(new_blocks[n - 1]);
        return new_blocks;
    }
    function validate_each_keys(ctx, list, get_context, get_key) {
        const keys = new Set();
        for (let i = 0; i < list.length; i++) {
            const key = get_key(get_context(ctx, list, i));
            if (keys.has(key)) {
                throw new Error(`Cannot have duplicate keys in a keyed each`);
            }
            keys.add(key);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const prop_values = options.props || {};
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : []),
            // everything else
            callbacks: blank_object(),
            dirty
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, prop_values, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if ($$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor);
            flush();
        }
        set_current_component(parent_component);
    }
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set() {
            // overridden by instance, if it has props
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.20.1' }, detail)));
    }
    function append_dev(target, node) {
        dispatch_dev("SvelteDOMInsert", { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev("SvelteDOMInsert", { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev("SvelteDOMRemove", { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ["capture"] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev("SvelteDOMAddEventListener", { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev("SvelteDOMRemoveEventListener", { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev("SvelteDOMRemoveAttribute", { node, attribute });
        else
            dispatch_dev("SvelteDOMSetAttribute", { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev("SvelteDOMSetProperty", { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.data === data)
            return;
        dispatch_dev("SvelteDOMSetData", { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error(`'target' is a required option`);
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn(`Component was already destroyed`); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier}start start and stop notifications for subscriptions
     */
    function readable(value, start) {
        return {
            subscribe: writable(value, start).subscribe,
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = [];
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (let i = 0; i < subscribers.length; i += 1) {
                        const s = subscribers[i];
                        s[1]();
                        subscriber_queue.push(s, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.push(subscriber);
            if (subscribers.length === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                const index = subscribers.indexOf(subscriber);
                if (index !== -1) {
                    subscribers.splice(index, 1);
                }
                if (subscribers.length === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }
    function derived(stores, fn, initial_value) {
        const single = !Array.isArray(stores);
        const stores_array = single
            ? [stores]
            : stores;
        const auto = fn.length < 2;
        return readable(initial_value, (set) => {
            let inited = false;
            const values = [];
            let pending = 0;
            let cleanup = noop;
            const sync = () => {
                if (pending) {
                    return;
                }
                cleanup();
                const result = fn(single ? values[0] : values, set);
                if (auto) {
                    set(result);
                }
                else {
                    cleanup = is_function(result) ? result : noop;
                }
            };
            const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
                values[i] = value;
                pending &= ~(1 << i);
                if (inited) {
                    sync();
                }
            }, () => {
                pending |= (1 << i);
            }));
            inited = true;
            sync();
            return function stop() {
                run_all(unsubscribers);
                cleanup();
            };
        });
    }

    var store = /*#__PURE__*/Object.freeze({
        __proto__: null,
        derived: derived,
        readable: readable,
        writable: writable,
        get: get_store_value
    });

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function unwrapExports (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    function getCjsExportFromNamespace (n) {
    	return n && n['default'] || n;
    }

    var require$$0 = getCjsExportFromNamespace(store);

    const writable$1 = require$$0.writable;

    const router = writable$1({});

    function set(route) {
      router.set(route);
    }

    function remove() {
      router.set({});
    }

    const activeRoute = {
      subscribe: router.subscribe,
      set,
      remove
    };

    var store$1 = { activeRoute };
    var store_1 = store$1.activeRoute;

    const UrlParser = (urlString, namedUrl = "") => {
      const urlBase = new URL(urlString);

      /**
       * Wrapper for URL.host
       *
       **/
      function host() {
        return urlBase.host;
      }

      /**
       * Wrapper for URL.hostname
       *
       **/
      function hostname() {
        return urlBase.hostname;
      }

      /**
       * Returns an object with all the named params and their values
       *
       **/
      function namedParams() {
        const allPathName = pathNames();
        const allNamedParamsKeys = namedParamsWithIndex();

        return allNamedParamsKeys.reduce((values, paramKey) => {
          values[paramKey.value] = allPathName[paramKey.index];
          return values;
        }, {});
      }

      /**
       * Returns an array with all the named param keys
       *
       **/
      function namedParamsKeys() {
        const allNamedParamsKeys = namedParamsWithIndex();

        return allNamedParamsKeys.reduce((values, paramKey) => {
          values.push(paramKey.value);
          return values;
        }, []);
      }

      /**
       * Returns an array with all the named param values
       *
       **/
      function namedParamsValues() {
        const allPathName = pathNames();
        const allNamedParamsKeys = namedParamsWithIndex();

        return allNamedParamsKeys.reduce((values, paramKey) => {
          values.push(allPathName[paramKey.index]);
          return values;
        }, []);
      }

      /**
       * Returns an array with all named param ids and their position in the path
       * Private
       **/
      function namedParamsWithIndex() {
        const namedUrlParams = getPathNames(namedUrl);

        return namedUrlParams.reduce((validParams, param, index) => {
          if (param[0] === ":") {
            validParams.push({ value: param.slice(1), index });
          }
          return validParams;
        }, []);
      }

      /**
       * Wrapper for URL.port
       *
       **/
      function port() {
        return urlBase.port;
      }

      /**
       * Wrapper for URL.pathname
       *
       **/
      function pathname() {
        return urlBase.pathname;
      }

      /**
       * Wrapper for URL.protocol
       *
       **/
      function protocol() {
        return urlBase.protocol;
      }

      /**
       * Wrapper for URL.search
       *
       **/
      function search() {
        return urlBase.search;
      }

      /**
       * Returns an object with all query params and their values
       *
       **/
      function queryParams() {
        const params = {};
        urlBase.searchParams.forEach((value, key) => {
          params[key] = value;
        });

        return params;
      }

      /**
       * Returns an array with all the query param keys
       *
       **/
      function queryParamsKeys() {
        const params = [];
        urlBase.searchParams.forEach((_value, key) => {
          params.push(key);
        });

        return params;
      }

      /**
       * Returns an array with all the query param values
       *
       **/
      function queryParamsValues() {
        const params = [];
        urlBase.searchParams.forEach(value => {
          params.push(value);
        });

        return params;
      }

      /**
       * Returns an array with all the elements of a pathname
       *
       **/
      function pathNames() {
        return getPathNames(urlBase.pathname);
      }

      /**
       * Returns an array with all the parts of a pathname
       * Private method
       **/
      function getPathNames(pathName) {
        if (pathName === "/" || pathName.trim().length === 0) return [pathName];
        if (pathName.slice(-1) === "/") {
          pathName = pathName.slice(0, -1);
        }
        if (pathName[0] === "/") {
          pathName = pathName.slice(1);
        }

        return pathName.split("/");
      }

      return Object.freeze({
        host: host(),
        hostname: hostname(),
        namedParams: namedParams(),
        namedParamsKeys: namedParamsKeys(),
        namedParamsValues: namedParamsValues(),
        pathNames: pathNames(),
        port: port(),
        pathname: pathname(),
        protocol: protocol(),
        search: search(),
        queryParams: queryParams(),
        queryParamsKeys: queryParamsKeys(),
        queryParamsValues: queryParamsValues()
      });
    };

    var url_parser = { UrlParser };

    const UrlParser$1 = url_parser.UrlParser;

    var urlParamsParser = {
      UrlParser: UrlParser$1
    };

    /**
     * Returns true if object has any nested routes empty
     * @param routeObject
     **/
    function anyEmptyNestedRoutes(routeObject) {
      let result = false;
      if (Object.keys(routeObject).length === 0) {
        return true
      }

      if (routeObject.childRoute && Object.keys(routeObject.childRoute).length === 0) {
        result = true;
      } else if (routeObject.childRoute) {
        result = anyEmptyNestedRoutes(routeObject.childRoute);
      }

      return result
    }

    /**
     * Compare two routes ignoring named params
     * @param pathName string
     * @param routeName string
     **/

    function compareRoutes(pathName, routeName) {
      routeName = removeSlash(routeName);

      if (routeName.includes(':')) {
        return routeName.includes(pathName)
      } else {
        return routeName.startsWith(pathName)
      }
    }

    /**
     * Returns a boolean indicating if the name of path exists in the route based on the language parameter
     * @param pathName string
     * @param route object
     * @param language string
     **/

    function findLocalisedRoute(pathName, route, language) {
      let exists = false;

      if (language) {
        return { exists: route.lang && route.lang[language] && route.lang[language].includes(pathName), language }
      }

      exists = compareRoutes(pathName, route.name);

      if (!exists && route.lang && typeof route.lang === 'object') {
        for (const [key, value] of Object.entries(route.lang)) {
          if (compareRoutes(pathName, value)) {
            exists = true;
            language = key;
          }
        }
      }

      return { exists, language }
    }

    /**
     * Return all the consecutive named param (placeholders) of a pathname
     * @param pathname
     **/
    function getNamedParams(pathName = '') {
      if (pathName.trim().length === 0) return []
      const namedUrlParams = getPathNames(pathName);
      return namedUrlParams.reduce((validParams, param) => {
        if (param[0] === ':') {
          validParams.push(param.slice(1));
        }

        return validParams
      }, [])
    }

    /**
     * Split a pathname based on /
     * @param pathName
     * Private method
     **/
    function getPathNames(pathName) {
      if (pathName === '/' || pathName.trim().length === 0) return [pathName]

      pathName = removeSlash(pathName, 'both');

      return pathName.split('/')
    }

    /**
     * Return the first part of a pathname until the first named param is found
     * @param name
     **/
    function nameToPath(name = '') {
      let routeName;
      if (name === '/' || name.trim().length === 0) return name
      name = removeSlash(name, 'lead');
      routeName = name.split(':')[0];
      routeName = removeSlash(routeName, 'trail');

      return routeName.toLowerCase()
    }

    /**
     * Return the path name excluding query params
     * @param name
     **/
    function pathWithoutQueryParams(currentRoute) {
      const path = currentRoute.path.split('?');
      return path[0]
    }

    /**
     * Return the path name including query params
     * @param name
     **/
    function pathWithQueryParams(currentRoute) {
      let queryParams = [];
      if (currentRoute.queryParams) {
        for (let [key, value] of Object.entries(currentRoute.queryParams)) {
          queryParams.push(`${key}=${value}`);
        }
      }

      if (queryParams.length > 0) {
        return `${currentRoute.path}?${queryParams.join('&')}`
      } else {
        return currentRoute.path
      }
    }

    /**
     * Returns a string with trailing or leading slash character removed
     * @param pathName string
     * @param position string - lead, trail, both
     **/
    function removeExtraPaths(pathNames, basePathNames) {
      const names = basePathNames.split('/');
      if (names.length > 1) {
        names.forEach(function(name, index) {
          if (name.length > 0 && index > 0) {
            pathNames.shift();
          }
        });
      }

      return pathNames
    }

    /**
     * Returns a string with trailing or leading slash character removed
     * @param pathName string
     * @param position string - lead, trail, both
     **/

    function removeSlash(pathName, position = 'lead') {
      if (pathName.trim().length < 1) {
        return ''
      }

      if (position === 'trail' || position === 'both') {
        if (pathName.slice(-1) === '/') {
          pathName = pathName.slice(0, -1);
        }
      }

      if (position === 'lead' || position === 'both') {
        if (pathName[0] === '/') {
          pathName = pathName.slice(1);
        }
      }

      return pathName
    }

    /**
     * Returns the name of the route based on the language parameter
     * @param route object
     * @param language string
     **/

    function routeNameLocalised(route, language = null) {
      if (!language || !route.lang || !route.lang[language]) {
        return route.name
      } else {
        return route.lang[language]
      }
    }

    /**
     * Updates the base route path.
     * Route objects can have nested routes (childRoutes) or just a long name like "admin/employees/show/:id"
     *
     * @param basePath string
     * @param pathNames array
     * @param route object
     * @param language string
     **/

    function updateRoutePath(basePath, pathNames, route, language, convert = false) {
      if (basePath === '/' || basePath.trim().length === 0) return { result: basePath, language: null }

      let basePathResult = basePath;
      let routeName = route.name;
      let currentLanguage = language;

      if (convert) {
        currentLanguage = '';
      }

      routeName = removeSlash(routeName);
      basePathResult = removeSlash(basePathResult);

      if (!route.childRoute) {
        let localisedRoute = findLocalisedRoute(basePathResult, route, currentLanguage);

        if (localisedRoute.exists && convert) {
          basePathResult = routeNameLocalised(route, language);
        }

        let routeNames = routeName.split(':')[0];
        routeNames = removeSlash(routeNames, 'trail');
        routeNames = routeNames.split('/');
        routeNames.shift();
        routeNames.forEach(() => {
          const currentPathName = pathNames[0];
          localisedRoute = findLocalisedRoute(`${basePathResult}/${currentPathName}`, route, currentLanguage);

          if (currentPathName && localisedRoute.exists) {
            if (convert) {
              basePathResult = routeNameLocalised(route, language);
            } else {
              basePathResult = `${basePathResult}/${currentPathName}`;
            }
            pathNames.shift();
          } else {
            return { result: basePathResult, language: localisedRoute.language }
          }
        });
        return { result: basePathResult, language: localisedRoute.language }
      } else {
        return { result: basePath, language: currentLanguage }
      }
    }

    var utils = {
      anyEmptyNestedRoutes,
      compareRoutes,
      findLocalisedRoute,
      getNamedParams,
      getPathNames,
      nameToPath,
      pathWithQueryParams,
      pathWithoutQueryParams,
      removeExtraPaths,
      removeSlash,
      routeNameLocalised,
      updateRoutePath
    };

    const { UrlParser: UrlParser$2 } = urlParamsParser;

    const { pathWithQueryParams: pathWithQueryParams$1, removeSlash: removeSlash$1 } = utils;

    function RouterCurrent(trackPage) {
      const trackPageview = trackPage || false;
      let activeRoute = '';

      function setActive(newRoute) {
        activeRoute = newRoute.path;
        pushActiveRoute(newRoute);
      }

      function active() {
        return activeRoute
      }

      /**
       * Returns true if pathName is current active route
       * @param pathName String The path name to check against the current route.
       * @param includePath Boolean if true checks that pathName is included in current route. If false should match it.
       **/
      function isActive(queryPath, includePath = false) {
        if (queryPath[0] !== '/') {
          queryPath = '/' + queryPath;
        }

        // remove query params for comparison
        let pathName = UrlParser$2(`http://fake.com${queryPath}`).pathname;
        let activeRoutePath = UrlParser$2(`http://fake.com${activeRoute}`).pathname;

        pathName = removeSlash$1(pathName, 'trail');

        activeRoutePath = removeSlash$1(activeRoutePath, 'trail');

        if (includePath) {
          return activeRoutePath.includes(pathName)
        } else {
          return activeRoutePath === pathName
        }
      }

      function pushActiveRoute(newRoute) {
        if (typeof window !== 'undefined') {
          const pathAndSearch = pathWithQueryParams$1(newRoute);
          //if (window.history && window.history.state && window.history.state.page !== pathAndSearch) {
          window.history.pushState({ page: pathAndSearch }, '', pathAndSearch);
          if (trackPageview) {
            gaTracking(pathAndSearch);
          }
        }
      }

      function gaTracking(newPage) {
        if (typeof ga !== 'undefined') {
          ga('set', 'page', newPage);
          ga('send', 'pageview');
        }
      }

      return Object.freeze({ active, isActive, setActive })
    }

    var current = { RouterCurrent };

    function RouterGuard(onlyIf) {
      const guardInfo = onlyIf;

      function valid() {
        return guardInfo && guardInfo.guard && typeof guardInfo.guard === 'function'
      }

      function redirect() {
        return !guardInfo.guard()
      }

      function redirectPath() {
        let destinationUrl = '/';
        if (guardInfo.redirect && guardInfo.redirect.length > 0) {
          destinationUrl = guardInfo.redirect;
        }

        return destinationUrl
      }

      return Object.freeze({ valid, redirect, redirectPath })
    }

    var guard = { RouterGuard };

    const { RouterGuard: RouterGuard$1 } = guard;

    function RouterRedirect(route, currentPath) {
      const guard = RouterGuard$1(route.onlyIf);

      function path() {
        let redirectTo = currentPath;
        if (route.redirectTo && route.redirectTo.length > 0) {
          redirectTo = route.redirectTo;
        }

        if (guard.valid() && guard.redirect()) {
          redirectTo = guard.redirectPath();
        }

        return redirectTo
      }

      return Object.freeze({ path })
    }

    var redirect = { RouterRedirect };

    const { UrlParser: UrlParser$3 } = urlParamsParser;

    function RouterRoute({ routeInfo, path, routeNamedParams, urlParser, namedPath, language }) {
      function namedParams() {
        const parsedParams = UrlParser$3(`https://fake.com${urlParser.pathname}`, namedPath).namedParams;

        return { ...routeNamedParams, ...parsedParams }
      }

      function get() {
        return {
          name: path,
          component: routeInfo.component,
          layout: routeInfo.layout,
          queryParams: urlParser.queryParams,
          namedParams: namedParams(),
          path,
          language
        }
      }

      return Object.freeze({ get, namedParams })
    }

    var route = { RouterRoute };

    const { updateRoutePath: updateRoutePath$1, getNamedParams: getNamedParams$1, nameToPath: nameToPath$1, removeExtraPaths: removeExtraPaths$1, routeNameLocalised: routeNameLocalised$1 } = utils;

    function RouterPath({ basePath, basePathName, pathNames, convert, currentLanguage }) {
      let updatedPathRoute;
      let route;
      let routePathLanguage = currentLanguage;

      function updatedPath(currentRoute) {
        route = currentRoute;
        updatedPathRoute = updateRoutePath$1(basePathName, pathNames, route, routePathLanguage, convert);
        routePathLanguage = convert ? currentLanguage : updatedPathRoute.language;

        return updatedPathRoute
      }

      function localisedPathName() {
        return routeNameLocalised$1(route, routePathLanguage)
      }

      function localisedRouteWithoutNamedParams() {
        return nameToPath$1(localisedPathName())
      }

      function basePathNameWithoutNamedParams() {
        return nameToPath$1(updatedPathRoute.result)
      }

      function namedPath() {
        const localisedPath = localisedPathName();

        return basePath ? `${basePath}/${localisedPath}` : localisedPath
      }

      function routePath() {
        let routePathValue = `${basePath}/${basePathNameWithoutNamedParams()}`;
        if (routePathValue === '//') {
          routePathValue = '/';
        }

        if (routePathLanguage) {
          pathNames = removeExtraPaths$1(pathNames, localisedRouteWithoutNamedParams());
        }

        const namedParams = getNamedParams$1(localisedPathName());
        if (namedParams && namedParams.length > 0) {
          namedParams.forEach(function() {
            if (pathNames.length > 0) {
              routePathValue += `/${pathNames.shift()}`;
            }
          });
        }

        return routePathValue
      }

      function routeLanguage() {
        return routePathLanguage
      }

      function basePathSameAsLocalised() {
        return basePathNameWithoutNamedParams() === localisedRouteWithoutNamedParams()
      }

      return Object.freeze({
        basePathSameAsLocalised,
        updatedPath,
        basePathNameWithoutNamedParams,
        localisedPathName,
        localisedRouteWithoutNamedParams,
        namedPath,
        pathNames,
        routeLanguage,
        routePath
      })
    }

    var path = { RouterPath };

    const { UrlParser: UrlParser$4 } = urlParamsParser;

    const { RouterRedirect: RouterRedirect$1 } = redirect;
    const { RouterRoute: RouterRoute$1 } = route;
    const { RouterPath: RouterPath$1 } = path;
    const { anyEmptyNestedRoutes: anyEmptyNestedRoutes$1, pathWithoutQueryParams: pathWithoutQueryParams$1 } = utils;

    const NotFoundPage = '/404.html';

    function RouterFinder({ routes, currentUrl, routerOptions, convert }) {
      const defaultLanguage = routerOptions.defaultLanguage;
      const urlParser = UrlParser$4(currentUrl);
      let redirectTo = '';
      let routeNamedParams = {};

      function findActiveRoute() {
        let searchActiveRoute = searchActiveRoutes(routes, '', urlParser.pathNames, routerOptions.lang, convert);

        if (!searchActiveRoute || !Object.keys(searchActiveRoute).length || anyEmptyNestedRoutes$1(searchActiveRoute)) {
          if (typeof window !== 'undefined') {
            searchActiveRoute = { name: '404', component: '', path: '404', redirectTo: NotFoundPage };
          }
        } else {
          searchActiveRoute.path = pathWithoutQueryParams$1(searchActiveRoute);
        }

        return searchActiveRoute
      }

      /**
       * Gets an array of routes and the browser pathname and return the active route
       * @param routes
       * @param basePath
       * @param pathNames
       **/
      function searchActiveRoutes(routes, basePath, pathNames, currentLanguage, convert) {
        let currentRoute = {};
        let basePathName = pathNames.shift().toLowerCase();
        const routerPath = RouterPath$1({ basePath, basePathName, pathNames, convert, currentLanguage });

        routes.forEach(function(route) {
          routerPath.updatedPath(route);
          if (routerPath.basePathSameAsLocalised()) {
            let routePath = routerPath.routePath();

            redirectTo = RouterRedirect$1(route, redirectTo).path();

            if (currentRoute.name !== routePath) {
              currentRoute = setCurrentRoute({
                route,
                routePath,
                routeLanguage: routerPath.routeLanguage(),
                urlParser,
                namedPath: routerPath.namedPath()
              });
            }

            if (route.nestedRoutes && route.nestedRoutes.length > 0 && routerPath.pathNames.length > 0) {
              currentRoute.childRoute = searchActiveRoutes(
                route.nestedRoutes,
                routePath,
                routerPath.pathNames,
                routerPath.routeLanguage(),
                convert
              );
              currentRoute.path = currentRoute.childRoute.path;
              currentRoute.language = currentRoute.childRoute.language;
            } else if (nestedRoutesAndNoPath(route, routerPath.pathNames)) {
              const indexRoute = searchActiveRoutes(
                route.nestedRoutes,
                routePath,
                ['index'],
                routerPath.routeLanguage(),
                convert
              );
              if (indexRoute && Object.keys(indexRoute).length > 0) {
                currentRoute.childRoute = indexRoute;
                currentRoute.language = currentRoute.childRoute.language;
              }
            }
          }
        });

        if (redirectTo) {
          currentRoute.redirectTo = redirectTo;
        }

        return currentRoute
      }

      function nestedRoutesAndNoPath(route, pathNames) {
        return route.nestedRoutes && route.nestedRoutes.length > 0 && pathNames.length === 0
      }

      function setCurrentRoute({ route, routePath, routeLanguage, urlParser, namedPath }) {
        const routerRoute = RouterRoute$1({
          routeInfo: route,
          urlParser,
          path: routePath,
          routeNamedParams,
          namedPath,
          language: routeLanguage || defaultLanguage
        });
        routeNamedParams = routerRoute.namedParams();

        return routerRoute.get()
      }

      return Object.freeze({ findActiveRoute })
    }

    var finder = { RouterFinder };

    const { activeRoute: activeRoute$1 } = store$1;
    const { RouterCurrent: RouterCurrent$1 } = current;
    const { RouterFinder: RouterFinder$1 } = finder;
    const { removeSlash: removeSlash$2 } = utils;

    const NotFoundPage$1 = '/404.html';

    let userDefinedRoutes = [];
    let routerOptions = {};
    let routerCurrent;

    /**
     * Object exposes one single property: activeRoute
     * @param routes  Array of routes
     * @param currentUrl current url
     * @param options configuration options
     **/
    function SpaRouter(routes, currentUrl, options = {}) {
      routerOptions = { ...options };
      if (typeof currentUrl === 'undefined' || currentUrl === '') {
        currentUrl = document.location.href;
      }

      routerCurrent = RouterCurrent$1(routerOptions.gaPageviews);

      currentUrl = removeSlash$2(currentUrl, 'trail');
      userDefinedRoutes = routes;

      function findActiveRoute() {
        let convert = false;

        if (routerOptions.langConvertTo) {
          routerOptions.lang = routerOptions.langConvertTo;
          convert = true;
        }

        return RouterFinder$1({ routes, currentUrl, routerOptions, convert }).findActiveRoute()
      }

      /**
       * Redirect current route to another
       * @param destinationUrl
       **/
      function navigateNow(destinationUrl) {
        if (typeof window !== 'undefined') {
          if (destinationUrl === NotFoundPage$1) {
            routerCurrent.setActive({ path: NotFoundPage$1 });
          } else {
            navigateTo(destinationUrl);
          }
        }

        return destinationUrl
      }

      function setActiveRoute() {
        const currentRoute = findActiveRoute();
        if (currentRoute.redirectTo) {
          return navigateNow(currentRoute.redirectTo)
        }

        routerCurrent.setActive(currentRoute);
        activeRoute$1.set(currentRoute);

        return currentRoute
      }

      return Object.freeze({
        setActiveRoute,
        findActiveRoute
      })
    }

    /**
     * Converts a route to its localised version
     * @param pathName
     **/
    function localisedRoute(pathName, language) {
      pathName = removeSlash$2(pathName, 'lead');
      routerOptions.langConvertTo = language;

      return SpaRouter(userDefinedRoutes, 'http://fake.com/' + pathName, routerOptions).findActiveRoute()
    }

    /**
     * Updates the current active route and updates the browser pathname
     * @param pathName String
     * @param language String
     **/
    function navigateTo(pathName, language = null) {
      pathName = removeSlash$2(pathName, 'lead');

      if (language) {
        routerOptions.langConvertTo = language;
      }

      return SpaRouter(userDefinedRoutes, 'http://fake.com/' + pathName, routerOptions).setActiveRoute()
    }

    /**
     * Returns true if pathName is current active route
     * @param pathName String The path name to check against the current route.
     * @param includePath Boolean if true checks that pathName is included in current route. If false should match it.
     **/
    function routeIsActive(queryPath, includePath = false) {
      return routerCurrent.isActive(queryPath, includePath)
    }

    if (typeof window !== 'undefined') {
      // Avoid full page reload on local routes
      window.addEventListener('click', event => {
        if (event.target.pathname && event.target.hostname === window.location.hostname && event.target.localName === 'a') {
          event.preventDefault();
          // event.stopPropagation()
          navigateTo(event.target.pathname + event.target.search);
        }
      });

      window.onpopstate = function(_event) {
        navigateTo(window.location.pathname + window.location.search);
      };
    }

    var spa_router = { SpaRouter, localisedRoute, navigateTo, routeIsActive };
    var spa_router_1 = spa_router.SpaRouter;
    var spa_router_2 = spa_router.localisedRoute;
    var spa_router_3 = spa_router.navigateTo;
    var spa_router_4 = spa_router.routeIsActive;

    /* node_modules/svelte-router-spa/src/components/route.svelte generated by Svelte v3.20.1 */

    // (10:34) 
    function create_if_block_2(ctx) {
    	let current;

    	const route = new Route({
    			props: {
    				currentRoute: /*currentRoute*/ ctx[0].childRoute,
    				params: /*params*/ ctx[1]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(route.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(route, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const route_changes = {};
    			if (dirty & /*currentRoute*/ 1) route_changes.currentRoute = /*currentRoute*/ ctx[0].childRoute;
    			if (dirty & /*params*/ 2) route_changes.params = /*params*/ ctx[1];
    			route.$set(route_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(route.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(route.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(route, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(10:34) ",
    		ctx
    	});

    	return block;
    }

    // (8:33) 
    function create_if_block_1(ctx) {
    	let switch_instance_anchor;
    	let current;
    	var switch_value = /*currentRoute*/ ctx[0].component;

    	function switch_props(ctx) {
    		return {
    			props: {
    				currentRoute: {
    					.../*currentRoute*/ ctx[0],
    					component: ""
    				},
    				params: /*params*/ ctx[1]
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		var switch_instance = new switch_value(switch_props(ctx));
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = {};

    			if (dirty & /*currentRoute*/ 1) switch_instance_changes.currentRoute = {
    				.../*currentRoute*/ ctx[0],
    				component: ""
    			};

    			if (dirty & /*params*/ 2) switch_instance_changes.params = /*params*/ ctx[1];

    			if (switch_value !== (switch_value = /*currentRoute*/ ctx[0].component)) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(8:33) ",
    		ctx
    	});

    	return block;
    }

    // (6:0) {#if currentRoute.layout}
    function create_if_block(ctx) {
    	let switch_instance_anchor;
    	let current;
    	var switch_value = /*currentRoute*/ ctx[0].layout;

    	function switch_props(ctx) {
    		return {
    			props: {
    				currentRoute: { .../*currentRoute*/ ctx[0], layout: "" },
    				params: /*params*/ ctx[1]
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		var switch_instance = new switch_value(switch_props(ctx));
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = {};
    			if (dirty & /*currentRoute*/ 1) switch_instance_changes.currentRoute = { .../*currentRoute*/ ctx[0], layout: "" };
    			if (dirty & /*params*/ 2) switch_instance_changes.params = /*params*/ ctx[1];

    			if (switch_value !== (switch_value = /*currentRoute*/ ctx[0].layout)) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(6:0) {#if currentRoute.layout}",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block, create_if_block_1, create_if_block_2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*currentRoute*/ ctx[0].layout) return 0;
    		if (/*currentRoute*/ ctx[0].component) return 1;
    		if (/*currentRoute*/ ctx[0].childRoute) return 2;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { currentRoute = {} } = $$props;
    	let { params = {} } = $$props;
    	const writable_props = ["currentRoute", "params"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Route> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Route", $$slots, []);

    	$$self.$set = $$props => {
    		if ("currentRoute" in $$props) $$invalidate(0, currentRoute = $$props.currentRoute);
    		if ("params" in $$props) $$invalidate(1, params = $$props.params);
    	};

    	$$self.$capture_state = () => ({ currentRoute, params });

    	$$self.$inject_state = $$props => {
    		if ("currentRoute" in $$props) $$invalidate(0, currentRoute = $$props.currentRoute);
    		if ("params" in $$props) $$invalidate(1, params = $$props.params);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [currentRoute, params];
    }

    class Route extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, { currentRoute: 0, params: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Route",
    			options,
    			id: create_fragment.name
    		});
    	}

    	get currentRoute() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentRoute(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get params() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set params(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var route$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Route
    });

    /* node_modules/svelte-router-spa/src/components/router.svelte generated by Svelte v3.20.1 */

    function create_fragment$1(ctx) {
    	let current;

    	const route = new Route({
    			props: { currentRoute: /*$activeRoute*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(route.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(route, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const route_changes = {};
    			if (dirty & /*$activeRoute*/ 1) route_changes.currentRoute = /*$activeRoute*/ ctx[0];
    			route.$set(route_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(route.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(route.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(route, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let $activeRoute;
    	validate_store(store_1, "activeRoute");
    	component_subscribe($$self, store_1, $$value => $$invalidate(0, $activeRoute = $$value));
    	let { routes = [] } = $$props;
    	let { options = {} } = $$props;

    	onMount(function () {
    		spa_router_1(routes, document.location.href, options).setActiveRoute();
    	});

    	const writable_props = ["routes", "options"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Router> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Router", $$slots, []);

    	$$self.$set = $$props => {
    		if ("routes" in $$props) $$invalidate(1, routes = $$props.routes);
    		if ("options" in $$props) $$invalidate(2, options = $$props.options);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		SpaRouter: spa_router_1,
    		Route,
    		activeRoute: store_1,
    		routes,
    		options,
    		$activeRoute
    	});

    	$$self.$inject_state = $$props => {
    		if ("routes" in $$props) $$invalidate(1, routes = $$props.routes);
    		if ("options" in $$props) $$invalidate(2, options = $$props.options);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [$activeRoute, routes, options];
    }

    class Router extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, { routes: 1, options: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Router",
    			options,
    			id: create_fragment$1.name
    		});
    	}

    	get routes() {
    		throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set routes(value) {
    		throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get options() {
    		throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set options(value) {
    		throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var router$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Router
    });

    /* node_modules/svelte-router-spa/src/components/navigate.svelte generated by Svelte v3.20.1 */
    const file = "node_modules/svelte-router-spa/src/components/navigate.svelte";

    function create_fragment$2(ctx) {
    	let a;
    	let current;
    	let dispose;
    	const default_slot_template = /*$$slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

    	const block = {
    		c: function create() {
    			a = element("a");
    			if (default_slot) default_slot.c();
    			attr_dev(a, "href", /*to*/ ctx[0]);
    			attr_dev(a, "title", /*title*/ ctx[1]);
    			attr_dev(a, "class", /*styles*/ ctx[2]);
    			toggle_class(a, "active", spa_router_4(/*to*/ ctx[0]));
    			add_location(a, file, 24, 0, 482);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor, remount) {
    			insert_dev(target, a, anchor);

    			if (default_slot) {
    				default_slot.m(a, null);
    			}

    			current = true;
    			if (remount) dispose();
    			dispose = listen_dev(a, "click", /*navigate*/ ctx[3], false, false, false);
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 32) {
    					default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[5], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null));
    				}
    			}

    			if (!current || dirty & /*to*/ 1) {
    				attr_dev(a, "href", /*to*/ ctx[0]);
    			}

    			if (!current || dirty & /*title*/ 2) {
    				attr_dev(a, "title", /*title*/ ctx[1]);
    			}

    			if (!current || dirty & /*styles*/ 4) {
    				attr_dev(a, "class", /*styles*/ ctx[2]);
    			}

    			if (dirty & /*styles, routeIsActive, to*/ 5) {
    				toggle_class(a, "active", spa_router_4(/*to*/ ctx[0]));
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (default_slot) default_slot.d(detaching);
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { to = "/" } = $$props;
    	let { title = "" } = $$props;
    	let { styles = "" } = $$props;
    	let { lang = null } = $$props;

    	onMount(function () {
    		if (lang) {
    			const route = spa_router_2(to, lang);

    			if (route) {
    				$$invalidate(0, to = route.path);
    			}
    		}
    	});

    	function navigate(event) {
    		event.preventDefault();
    		event.stopPropagation();
    		spa_router_3(to);
    	}

    	const writable_props = ["to", "title", "styles", "lang"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Navigate> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Navigate", $$slots, ['default']);

    	$$self.$set = $$props => {
    		if ("to" in $$props) $$invalidate(0, to = $$props.to);
    		if ("title" in $$props) $$invalidate(1, title = $$props.title);
    		if ("styles" in $$props) $$invalidate(2, styles = $$props.styles);
    		if ("lang" in $$props) $$invalidate(4, lang = $$props.lang);
    		if ("$$scope" in $$props) $$invalidate(5, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		localisedRoute: spa_router_2,
    		navigateTo: spa_router_3,
    		routeIsActive: spa_router_4,
    		to,
    		title,
    		styles,
    		lang,
    		navigate
    	});

    	$$self.$inject_state = $$props => {
    		if ("to" in $$props) $$invalidate(0, to = $$props.to);
    		if ("title" in $$props) $$invalidate(1, title = $$props.title);
    		if ("styles" in $$props) $$invalidate(2, styles = $$props.styles);
    		if ("lang" in $$props) $$invalidate(4, lang = $$props.lang);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [to, title, styles, navigate, lang, $$scope, $$slots];
    }

    class Navigate extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, { to: 0, title: 1, styles: 2, lang: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Navigate",
    			options,
    			id: create_fragment$2.name
    		});
    	}

    	get to() {
    		throw new Error("<Navigate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set to(value) {
    		throw new Error("<Navigate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<Navigate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<Navigate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get styles() {
    		throw new Error("<Navigate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set styles(value) {
    		throw new Error("<Navigate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get lang() {
    		throw new Error("<Navigate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set lang(value) {
    		throw new Error("<Navigate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var navigate = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Navigate
    });

    var Route$1 = getCjsExportFromNamespace(route$1);

    var Router$1 = getCjsExportFromNamespace(router$1);

    var Navigate$1 = getCjsExportFromNamespace(navigate);

    const { SpaRouter: SpaRouter$1, navigateTo: navigateTo$1, localisedRoute: localisedRoute$1, routeIsActive: routeIsActive$1 } = spa_router;




    var src = {
      SpaRouter: SpaRouter$1,
      localisedRoute: localisedRoute$1,
      navigateTo: navigateTo$1,
      routeIsActive: routeIsActive$1,
      Route: Route$1,
      Router: Router$1,
      Navigate: Navigate$1
    };
    var src_3 = src.navigateTo;
    var src_5 = src.Route;
    var src_6 = src.Router;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    }
    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var tslib_es6 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        __extends: __extends,
        get __assign () { return __assign; },
        __rest: __rest,
        __decorate: __decorate,
        __param: __param,
        __metadata: __metadata,
        __awaiter: __awaiter,
        __generator: __generator,
        __exportStar: __exportStar,
        __values: __values,
        __read: __read,
        __spread: __spread,
        __spreadArrays: __spreadArrays,
        __await: __await,
        __asyncGenerator: __asyncGenerator,
        __asyncDelegator: __asyncDelegator,
        __asyncValues: __asyncValues,
        __makeTemplateObject: __makeTemplateObject,
        __importStar: __importStar,
        __importDefault: __importDefault,
        __classPrivateFieldGet: __classPrivateFieldGet,
        __classPrivateFieldSet: __classPrivateFieldSet
    });

    var index_cjs = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, '__esModule', { value: true });



    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
     */
    var CONSTANTS = {
        /**
         * @define {boolean} Whether this is the client Node.js SDK.
         */
        NODE_CLIENT: false,
        /**
         * @define {boolean} Whether this is the Admin Node.js SDK.
         */
        NODE_ADMIN: false,
        /**
         * Firebase SDK Version
         */
        SDK_VERSION: '${JSCORE_VERSION}'
    };

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Throws an error if the provided assertion is falsy
     */
    var assert = function (assertion, message) {
        if (!assertion) {
            throw assertionError(message);
        }
    };
    /**
     * Returns an Error object suitable for throwing.
     */
    var assertionError = function (message) {
        return new Error('Firebase Database (' +
            CONSTANTS.SDK_VERSION +
            ') INTERNAL ASSERT FAILED: ' +
            message);
    };

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var stringToByteArray = function (str) {
        // TODO(user): Use native implementations if/when available
        var out = [];
        var p = 0;
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            if (c < 128) {
                out[p++] = c;
            }
            else if (c < 2048) {
                out[p++] = (c >> 6) | 192;
                out[p++] = (c & 63) | 128;
            }
            else if ((c & 0xfc00) === 0xd800 &&
                i + 1 < str.length &&
                (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
                // Surrogate Pair
                c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
                out[p++] = (c >> 18) | 240;
                out[p++] = ((c >> 12) & 63) | 128;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
            else {
                out[p++] = (c >> 12) | 224;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
        }
        return out;
    };
    /**
     * Turns an array of numbers into the string given by the concatenation of the
     * characters to which the numbers correspond.
     * @param bytes Array of numbers representing characters.
     * @return Stringification of the array.
     */
    var byteArrayToString = function (bytes) {
        // TODO(user): Use native implementations if/when available
        var out = [];
        var pos = 0, c = 0;
        while (pos < bytes.length) {
            var c1 = bytes[pos++];
            if (c1 < 128) {
                out[c++] = String.fromCharCode(c1);
            }
            else if (c1 > 191 && c1 < 224) {
                var c2 = bytes[pos++];
                out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
            }
            else if (c1 > 239 && c1 < 365) {
                // Surrogate Pair
                var c2 = bytes[pos++];
                var c3 = bytes[pos++];
                var c4 = bytes[pos++];
                var u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -
                    0x10000;
                out[c++] = String.fromCharCode(0xd800 + (u >> 10));
                out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
            }
            else {
                var c2 = bytes[pos++];
                var c3 = bytes[pos++];
                out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
            }
        }
        return out.join('');
    };
    // We define it as an object literal instead of a class because a class compiled down to es5 can't
    // be treeshaked. https://github.com/rollup/rollup/issues/1691
    // Static lookup maps, lazily populated by init_()
    var base64 = {
        /**
         * Maps bytes to characters.
         */
        byteToCharMap_: null,
        /**
         * Maps characters to bytes.
         */
        charToByteMap_: null,
        /**
         * Maps bytes to websafe characters.
         * @private
         */
        byteToCharMapWebSafe_: null,
        /**
         * Maps websafe characters to bytes.
         * @private
         */
        charToByteMapWebSafe_: null,
        /**
         * Our default alphabet, shared between
         * ENCODED_VALS and ENCODED_VALS_WEBSAFE
         */
        ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',
        /**
         * Our default alphabet. Value 64 (=) is special; it means "nothing."
         */
        get ENCODED_VALS() {
            return this.ENCODED_VALS_BASE + '+/=';
        },
        /**
         * Our websafe alphabet.
         */
        get ENCODED_VALS_WEBSAFE() {
            return this.ENCODED_VALS_BASE + '-_.';
        },
        /**
         * Whether this browser supports the atob and btoa functions. This extension
         * started at Mozilla but is now implemented by many browsers. We use the
         * ASSUME_* variables to avoid pulling in the full useragent detection library
         * but still allowing the standard per-browser compilations.
         *
         */
        HAS_NATIVE_SUPPORT: typeof atob === 'function',
        /**
         * Base64-encode an array of bytes.
         *
         * @param input An array of bytes (numbers with
         *     value in [0, 255]) to encode.
         * @param webSafe Boolean indicating we should use the
         *     alternative alphabet.
         * @return The base64 encoded string.
         */
        encodeByteArray: function (input, webSafe) {
            if (!Array.isArray(input)) {
                throw Error('encodeByteArray takes an array as a parameter');
            }
            this.init_();
            var byteToCharMap = webSafe
                ? this.byteToCharMapWebSafe_
                : this.byteToCharMap_;
            var output = [];
            for (var i = 0; i < input.length; i += 3) {
                var byte1 = input[i];
                var haveByte2 = i + 1 < input.length;
                var byte2 = haveByte2 ? input[i + 1] : 0;
                var haveByte3 = i + 2 < input.length;
                var byte3 = haveByte3 ? input[i + 2] : 0;
                var outByte1 = byte1 >> 2;
                var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
                var outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);
                var outByte4 = byte3 & 0x3f;
                if (!haveByte3) {
                    outByte4 = 64;
                    if (!haveByte2) {
                        outByte3 = 64;
                    }
                }
                output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
            }
            return output.join('');
        },
        /**
         * Base64-encode a string.
         *
         * @param input A string to encode.
         * @param webSafe If true, we should use the
         *     alternative alphabet.
         * @return The base64 encoded string.
         */
        encodeString: function (input, webSafe) {
            // Shortcut for Mozilla browsers that implement
            // a native base64 encoder in the form of "btoa/atob"
            if (this.HAS_NATIVE_SUPPORT && !webSafe) {
                return btoa(input);
            }
            return this.encodeByteArray(stringToByteArray(input), webSafe);
        },
        /**
         * Base64-decode a string.
         *
         * @param input to decode.
         * @param webSafe True if we should use the
         *     alternative alphabet.
         * @return string representing the decoded value.
         */
        decodeString: function (input, webSafe) {
            // Shortcut for Mozilla browsers that implement
            // a native base64 encoder in the form of "btoa/atob"
            if (this.HAS_NATIVE_SUPPORT && !webSafe) {
                return atob(input);
            }
            return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
        },
        /**
         * Base64-decode a string.
         *
         * In base-64 decoding, groups of four characters are converted into three
         * bytes.  If the encoder did not apply padding, the input length may not
         * be a multiple of 4.
         *
         * In this case, the last group will have fewer than 4 characters, and
         * padding will be inferred.  If the group has one or two characters, it decodes
         * to one byte.  If the group has three characters, it decodes to two bytes.
         *
         * @param input Input to decode.
         * @param webSafe True if we should use the web-safe alphabet.
         * @return bytes representing the decoded value.
         */
        decodeStringToByteArray: function (input, webSafe) {
            this.init_();
            var charToByteMap = webSafe
                ? this.charToByteMapWebSafe_
                : this.charToByteMap_;
            var output = [];
            for (var i = 0; i < input.length;) {
                var byte1 = charToByteMap[input.charAt(i++)];
                var haveByte2 = i < input.length;
                var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
                ++i;
                var haveByte3 = i < input.length;
                var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
                ++i;
                var haveByte4 = i < input.length;
                var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
                ++i;
                if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
                    throw Error();
                }
                var outByte1 = (byte1 << 2) | (byte2 >> 4);
                output.push(outByte1);
                if (byte3 !== 64) {
                    var outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);
                    output.push(outByte2);
                    if (byte4 !== 64) {
                        var outByte3 = ((byte3 << 6) & 0xc0) | byte4;
                        output.push(outByte3);
                    }
                }
            }
            return output;
        },
        /**
         * Lazy static initialization function. Called before
         * accessing any of the static map variables.
         * @private
         */
        init_: function () {
            if (!this.byteToCharMap_) {
                this.byteToCharMap_ = {};
                this.charToByteMap_ = {};
                this.byteToCharMapWebSafe_ = {};
                this.charToByteMapWebSafe_ = {};
                // We want quick mappings back and forth, so we precompute two maps.
                for (var i = 0; i < this.ENCODED_VALS.length; i++) {
                    this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                    this.charToByteMap_[this.byteToCharMap_[i]] = i;
                    this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                    this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                    // Be forgiving when decoding and correctly decode both encodings.
                    if (i >= this.ENCODED_VALS_BASE.length) {
                        this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                        this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                    }
                }
            }
        }
    };
    /**
     * URL-safe base64 encoding
     */
    var base64Encode = function (str) {
        var utf8Bytes = stringToByteArray(str);
        return base64.encodeByteArray(utf8Bytes, true);
    };
    /**
     * URL-safe base64 decoding
     *
     * NOTE: DO NOT use the global atob() function - it does NOT support the
     * base64Url variant encoding.
     *
     * @param str To be decoded
     * @return Decoded result, if possible
     */
    var base64Decode = function (str) {
        try {
            return base64.decodeString(str, true);
        }
        catch (e) {
            console.error('base64Decode failed: ', e);
        }
        return null;
    };

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Do a deep-copy of basic JavaScript Objects or Arrays.
     */
    function deepCopy(value) {
        return deepExtend(undefined, value);
    }
    /**
     * Copy properties from source to target (recursively allows extension
     * of Objects and Arrays).  Scalar values in the target are over-written.
     * If target is undefined, an object of the appropriate type will be created
     * (and returned).
     *
     * We recursively copy all child properties of plain Objects in the source- so
     * that namespace- like dictionaries are merged.
     *
     * Note that the target can be a function, in which case the properties in
     * the source Object are copied onto it as static properties of the Function.
     */
    function deepExtend(target, source) {
        if (!(source instanceof Object)) {
            return source;
        }
        switch (source.constructor) {
            case Date:
                // Treat Dates like scalars; if the target date object had any child
                // properties - they will be lost!
                var dateValue = source;
                return new Date(dateValue.getTime());
            case Object:
                if (target === undefined) {
                    target = {};
                }
                break;
            case Array:
                // Always copy the array source and overwrite the target.
                target = [];
                break;
            default:
                // Not a plain Object - treat it as a scalar.
                return source;
        }
        for (var prop in source) {
            if (!source.hasOwnProperty(prop)) {
                continue;
            }
            target[prop] = deepExtend(target[prop], source[prop]);
        }
        return target;
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var Deferred = /** @class */ (function () {
        function Deferred() {
            var _this = this;
            this.reject = function () { };
            this.resolve = function () { };
            this.promise = new Promise(function (resolve, reject) {
                _this.resolve = resolve;
                _this.reject = reject;
            });
        }
        /**
         * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
         * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
         * and returns a node-style callback which will resolve or reject the Deferred's promise.
         */
        Deferred.prototype.wrapCallback = function (callback) {
            var _this = this;
            return function (error, value) {
                if (error) {
                    _this.reject(error);
                }
                else {
                    _this.resolve(value);
                }
                if (typeof callback === 'function') {
                    // Attaching noop handler just in case developer wasn't expecting
                    // promises
                    _this.promise.catch(function () { });
                    // Some of our callbacks don't expect a value and our own tests
                    // assert that the parameter length is 1
                    if (callback.length === 1) {
                        callback(error);
                    }
                    else {
                        callback(error, value);
                    }
                }
            };
        };
        return Deferred;
    }());

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns navigator.userAgent string or '' if it's not defined.
     * @return user agent string
     */
    function getUA() {
        if (typeof navigator !== 'undefined' &&
            typeof navigator['userAgent'] === 'string') {
            return navigator['userAgent'];
        }
        else {
            return '';
        }
    }
    /**
     * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
     *
     * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
     * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
     * wait for a callback.
     */
    function isMobileCordova() {
        return (typeof window !== 'undefined' &&
            // @ts-ignore Setting up an broadly applicable index signature for Window
            // just to deal with this case would probably be a bad idea.
            !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
            /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));
    }
    /**
     * Detect Node.js.
     *
     * @return true if Node.js environment is detected.
     */
    // Node detection logic from: https://github.com/iliakan/detect-node/
    function isNode() {
        try {
            return (Object.prototype.toString.call(commonjsGlobal.process) === '[object process]');
        }
        catch (e) {
            return false;
        }
    }
    /**
     * Detect Browser Environment
     */
    function isBrowser() {
        return typeof self === 'object' && self.self === self;
    }
    function isBrowserExtension() {
        var runtime = typeof chrome === 'object'
            ? chrome.runtime
            : typeof browser === 'object'
                ? browser.runtime
                : undefined;
        return typeof runtime === 'object' && runtime.id !== undefined;
    }
    /**
     * Detect React Native.
     *
     * @return true if ReactNative environment is detected.
     */
    function isReactNative() {
        return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
    }
    /** Detects Electron apps. */
    function isElectron() {
        return getUA().indexOf('Electron/') >= 0;
    }
    /** Detects Internet Explorer. */
    function isIE() {
        var ua = getUA();
        return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
    }
    /** Detects Universal Windows Platform apps. */
    function isUWP() {
        return getUA().indexOf('MSAppHost/') >= 0;
    }
    /**
     * Detect whether the current SDK build is the Node version.
     *
     * @return true if it's the Node SDK build.
     */
    function isNodeSdk() {
        return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ERROR_NAME = 'FirebaseError';
    // Based on code from:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
    var FirebaseError = /** @class */ (function (_super) {
        tslib_es6.__extends(FirebaseError, _super);
        function FirebaseError(code, message) {
            var _this = _super.call(this, message) || this;
            _this.code = code;
            _this.name = ERROR_NAME;
            // Fix For ES5
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(_this, FirebaseError.prototype);
            // Maintains proper stack trace for where our error was thrown.
            // Only available on V8.
            if (Error.captureStackTrace) {
                Error.captureStackTrace(_this, ErrorFactory.prototype.create);
            }
            return _this;
        }
        return FirebaseError;
    }(Error));
    var ErrorFactory = /** @class */ (function () {
        function ErrorFactory(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
        }
        ErrorFactory.prototype.create = function (code) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            var customData = data[0] || {};
            var fullCode = this.service + "/" + code;
            var template = this.errors[code];
            var message = template ? replaceTemplate(template, customData) : 'Error';
            // Service Name: Error message (service/code).
            var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
            var error = new FirebaseError(fullCode, fullMessage);
            // Keys with an underscore at the end of their name are not included in
            // error.data for some reason.
            // TODO: Replace with Object.entries when lib is updated to es2017.
            for (var _a = 0, _b = Object.keys(customData); _a < _b.length; _a++) {
                var key = _b[_a];
                if (key.slice(-1) !== '_') {
                    if (key in error) {
                        console.warn("Overwriting FirebaseError base field \"" + key + "\" can cause unexpected behavior.");
                    }
                    error[key] = customData[key];
                }
            }
            return error;
        };
        return ErrorFactory;
    }());
    function replaceTemplate(template, data) {
        return template.replace(PATTERN, function (_, key) {
            var value = data[key];
            return value != null ? value.toString() : "<" + key + "?>";
        });
    }
    var PATTERN = /\{\$([^}]+)}/g;

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Evaluates a JSON string into a javascript object.
     *
     * @param {string} str A string containing JSON.
     * @return {*} The javascript object representing the specified JSON.
     */
    function jsonEval(str) {
        return JSON.parse(str);
    }
    /**
     * Returns JSON representing a javascript object.
     * @param {*} data Javascript object to be stringified.
     * @return {string} The JSON contents of the object.
     */
    function stringify(data) {
        return JSON.stringify(data);
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Decodes a Firebase auth. token into constituent parts.
     *
     * Notes:
     * - May return with invalid / incomplete claims if there's no native base64 decoding support.
     * - Doesn't check if the token is actually valid.
     */
    var decode = function (token) {
        var header = {}, claims = {}, data = {}, signature = '';
        try {
            var parts = token.split('.');
            header = jsonEval(base64Decode(parts[0]) || '');
            claims = jsonEval(base64Decode(parts[1]) || '');
            signature = parts[2];
            data = claims['d'] || {};
            delete claims['d'];
        }
        catch (e) { }
        return {
            header: header,
            claims: claims,
            data: data,
            signature: signature
        };
    };
    /**
     * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
     * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
     *
     * Notes:
     * - May return a false negative if there's no native base64 decoding support.
     * - Doesn't check if the token is actually valid.
     */
    var isValidTimestamp = function (token) {
        var claims = decode(token).claims;
        var now = Math.floor(new Date().getTime() / 1000);
        var validSince = 0, validUntil = 0;
        if (typeof claims === 'object') {
            if (claims.hasOwnProperty('nbf')) {
                validSince = claims['nbf'];
            }
            else if (claims.hasOwnProperty('iat')) {
                validSince = claims['iat'];
            }
            if (claims.hasOwnProperty('exp')) {
                validUntil = claims['exp'];
            }
            else {
                // token will expire after 24h by default
                validUntil = validSince + 86400;
            }
        }
        return (!!now &&
            !!validSince &&
            !!validUntil &&
            now >= validSince &&
            now <= validUntil);
    };
    /**
     * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
     *
     * Notes:
     * - May return null if there's no native base64 decoding support.
     * - Doesn't check if the token is actually valid.
     */
    var issuedAtTime = function (token) {
        var claims = decode(token).claims;
        if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {
            return claims['iat'];
        }
        return null;
    };
    /**
     * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
     *
     * Notes:
     * - May return a false negative if there's no native base64 decoding support.
     * - Doesn't check if the token is actually valid.
     */
    var isValidFormat = function (token) {
        var decoded = decode(token), claims = decoded.claims;
        return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
    };
    /**
     * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
     *
     * Notes:
     * - May return a false negative if there's no native base64 decoding support.
     * - Doesn't check if the token is actually valid.
     */
    var isAdmin = function (token) {
        var claims = decode(token).claims;
        return typeof claims === 'object' && claims['admin'] === true;
    };

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function contains(obj, key) {
        return Object.prototype.hasOwnProperty.call(obj, key);
    }
    function safeGet(obj, key) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            return obj[key];
        }
        else {
            return undefined;
        }
    }
    function isEmpty(obj) {
        for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
                return false;
            }
        }
        return true;
    }
    function map(obj, fn, contextObj) {
        var res = {};
        for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
                res[key] = fn.call(contextObj, obj[key], key, obj);
            }
        }
        return res;
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
     * params object (e.g. {arg: 'val', arg2: 'val2'})
     * Note: You must prepend it with ? when adding it to a URL.
     */
    function querystring(querystringParams) {
        var params = [];
        var _loop_1 = function (key, value) {
            if (Array.isArray(value)) {
                value.forEach(function (arrayVal) {
                    params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
                });
            }
            else {
                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
            }
        };
        for (var _i = 0, _a = Object.entries(querystringParams); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            _loop_1(key, value);
        }
        return params.length ? '&' + params.join('&') : '';
    }
    /**
     * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object
     * (e.g. {arg: 'val', arg2: 'val2'})
     */
    function querystringDecode(querystring) {
        var obj = {};
        var tokens = querystring.replace(/^\?/, '').split('&');
        tokens.forEach(function (token) {
            if (token) {
                var key = token.split('=');
                obj[key[0]] = key[1];
            }
        });
        return obj;
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @fileoverview SHA-1 cryptographic hash.
     * Variable names follow the notation in FIPS PUB 180-3:
     * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
     *
     * Usage:
     *   var sha1 = new sha1();
     *   sha1.update(bytes);
     *   var hash = sha1.digest();
     *
     * Performance:
     *   Chrome 23:   ~400 Mbit/s
     *   Firefox 16:  ~250 Mbit/s
     *
     */
    /**
     * SHA-1 cryptographic hash constructor.
     *
     * The properties declared here are discussed in the above algorithm document.
     * @constructor
     * @final
     * @struct
     */
    var Sha1 = /** @class */ (function () {
        function Sha1() {
            /**
             * Holds the previous values of accumulated variables a-e in the compress_
             * function.
             * @private
             */
            this.chain_ = [];
            /**
             * A buffer holding the partially computed hash result.
             * @private
             */
            this.buf_ = [];
            /**
             * An array of 80 bytes, each a part of the message to be hashed.  Referred to
             * as the message schedule in the docs.
             * @private
             */
            this.W_ = [];
            /**
             * Contains data needed to pad messages less than 64 bytes.
             * @private
             */
            this.pad_ = [];
            /**
             * @private {number}
             */
            this.inbuf_ = 0;
            /**
             * @private {number}
             */
            this.total_ = 0;
            this.blockSize = 512 / 8;
            this.pad_[0] = 128;
            for (var i = 1; i < this.blockSize; ++i) {
                this.pad_[i] = 0;
            }
            this.reset();
        }
        Sha1.prototype.reset = function () {
            this.chain_[0] = 0x67452301;
            this.chain_[1] = 0xefcdab89;
            this.chain_[2] = 0x98badcfe;
            this.chain_[3] = 0x10325476;
            this.chain_[4] = 0xc3d2e1f0;
            this.inbuf_ = 0;
            this.total_ = 0;
        };
        /**
         * Internal compress helper function.
         * @param buf Block to compress.
         * @param offset Offset of the block in the buffer.
         * @private
         */
        Sha1.prototype.compress_ = function (buf, offset) {
            if (!offset) {
                offset = 0;
            }
            var W = this.W_;
            // get 16 big endian words
            if (typeof buf === 'string') {
                for (var i = 0; i < 16; i++) {
                    // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
                    // have a bug that turns the post-increment ++ operator into pre-increment
                    // during JIT compilation.  We have code that depends heavily on SHA-1 for
                    // correctness and which is affected by this bug, so I've removed all uses
                    // of post-increment ++ in which the result value is used.  We can revert
                    // this change once the Safari bug
                    // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
                    // most clients have been updated.
                    W[i] =
                        (buf.charCodeAt(offset) << 24) |
                            (buf.charCodeAt(offset + 1) << 16) |
                            (buf.charCodeAt(offset + 2) << 8) |
                            buf.charCodeAt(offset + 3);
                    offset += 4;
                }
            }
            else {
                for (var i = 0; i < 16; i++) {
                    W[i] =
                        (buf[offset] << 24) |
                            (buf[offset + 1] << 16) |
                            (buf[offset + 2] << 8) |
                            buf[offset + 3];
                    offset += 4;
                }
            }
            // expand to 80 words
            for (var i = 16; i < 80; i++) {
                var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;
            }
            var a = this.chain_[0];
            var b = this.chain_[1];
            var c = this.chain_[2];
            var d = this.chain_[3];
            var e = this.chain_[4];
            var f, k;
            // TODO(user): Try to unroll this loop to speed up the computation.
            for (var i = 0; i < 80; i++) {
                if (i < 40) {
                    if (i < 20) {
                        f = d ^ (b & (c ^ d));
                        k = 0x5a827999;
                    }
                    else {
                        f = b ^ c ^ d;
                        k = 0x6ed9eba1;
                    }
                }
                else {
                    if (i < 60) {
                        f = (b & c) | (d & (b | c));
                        k = 0x8f1bbcdc;
                    }
                    else {
                        f = b ^ c ^ d;
                        k = 0xca62c1d6;
                    }
                }
                var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;
                e = d;
                d = c;
                c = ((b << 30) | (b >>> 2)) & 0xffffffff;
                b = a;
                a = t;
            }
            this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;
            this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;
            this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;
            this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;
            this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;
        };
        Sha1.prototype.update = function (bytes, length) {
            // TODO(johnlenz): tighten the function signature and remove this check
            if (bytes == null) {
                return;
            }
            if (length === undefined) {
                length = bytes.length;
            }
            var lengthMinusBlock = length - this.blockSize;
            var n = 0;
            // Using local instead of member variables gives ~5% speedup on Firefox 16.
            var buf = this.buf_;
            var inbuf = this.inbuf_;
            // The outer while loop should execute at most twice.
            while (n < length) {
                // When we have no data in the block to top up, we can directly process the
                // input buffer (assuming it contains sufficient data). This gives ~25%
                // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
                // the data is provided in large chunks (or in multiples of 64 bytes).
                if (inbuf === 0) {
                    while (n <= lengthMinusBlock) {
                        this.compress_(bytes, n);
                        n += this.blockSize;
                    }
                }
                if (typeof bytes === 'string') {
                    while (n < length) {
                        buf[inbuf] = bytes.charCodeAt(n);
                        ++inbuf;
                        ++n;
                        if (inbuf === this.blockSize) {
                            this.compress_(buf);
                            inbuf = 0;
                            // Jump to the outer loop so we use the full-block optimization.
                            break;
                        }
                    }
                }
                else {
                    while (n < length) {
                        buf[inbuf] = bytes[n];
                        ++inbuf;
                        ++n;
                        if (inbuf === this.blockSize) {
                            this.compress_(buf);
                            inbuf = 0;
                            // Jump to the outer loop so we use the full-block optimization.
                            break;
                        }
                    }
                }
            }
            this.inbuf_ = inbuf;
            this.total_ += length;
        };
        /** @override */
        Sha1.prototype.digest = function () {
            var digest = [];
            var totalBits = this.total_ * 8;
            // Add pad 0x80 0x00*.
            if (this.inbuf_ < 56) {
                this.update(this.pad_, 56 - this.inbuf_);
            }
            else {
                this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
            }
            // Add # bits.
            for (var i = this.blockSize - 1; i >= 56; i--) {
                this.buf_[i] = totalBits & 255;
                totalBits /= 256; // Don't use bit-shifting here!
            }
            this.compress_(this.buf_);
            var n = 0;
            for (var i = 0; i < 5; i++) {
                for (var j = 24; j >= 0; j -= 8) {
                    digest[n] = (this.chain_[i] >> j) & 255;
                    ++n;
                }
            }
            return digest;
        };
        return Sha1;
    }());

    /**
     * Helper to make a Subscribe function (just like Promise helps make a
     * Thenable).
     *
     * @param executor Function which can make calls to a single Observer
     *     as a proxy.
     * @param onNoObservers Callback when count of Observers goes to zero.
     */
    function createSubscribe(executor, onNoObservers) {
        var proxy = new ObserverProxy(executor, onNoObservers);
        return proxy.subscribe.bind(proxy);
    }
    /**
     * Implement fan-out for any number of Observers attached via a subscribe
     * function.
     */
    var ObserverProxy = /** @class */ (function () {
        /**
         * @param executor Function which can make calls to a single Observer
         *     as a proxy.
         * @param onNoObservers Callback when count of Observers goes to zero.
         */
        function ObserverProxy(executor, onNoObservers) {
            var _this = this;
            this.observers = [];
            this.unsubscribes = [];
            this.observerCount = 0;
            // Micro-task scheduling by calling task.then().
            this.task = Promise.resolve();
            this.finalized = false;
            this.onNoObservers = onNoObservers;
            // Call the executor asynchronously so subscribers that are called
            // synchronously after the creation of the subscribe function
            // can still receive the very first value generated in the executor.
            this.task
                .then(function () {
                executor(_this);
            })
                .catch(function (e) {
                _this.error(e);
            });
        }
        ObserverProxy.prototype.next = function (value) {
            this.forEachObserver(function (observer) {
                observer.next(value);
            });
        };
        ObserverProxy.prototype.error = function (error) {
            this.forEachObserver(function (observer) {
                observer.error(error);
            });
            this.close(error);
        };
        ObserverProxy.prototype.complete = function () {
            this.forEachObserver(function (observer) {
                observer.complete();
            });
            this.close();
        };
        /**
         * Subscribe function that can be used to add an Observer to the fan-out list.
         *
         * - We require that no event is sent to a subscriber sychronously to their
         *   call to subscribe().
         */
        ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {
            var _this = this;
            var observer;
            if (nextOrObserver === undefined &&
                error === undefined &&
                complete === undefined) {
                throw new Error('Missing Observer.');
            }
            // Assemble an Observer object when passed as callback functions.
            if (implementsAnyMethods(nextOrObserver, [
                'next',
                'error',
                'complete'
            ])) {
                observer = nextOrObserver;
            }
            else {
                observer = {
                    next: nextOrObserver,
                    error: error,
                    complete: complete
                };
            }
            if (observer.next === undefined) {
                observer.next = noop;
            }
            if (observer.error === undefined) {
                observer.error = noop;
            }
            if (observer.complete === undefined) {
                observer.complete = noop;
            }
            var unsub = this.unsubscribeOne.bind(this, this.observers.length);
            // Attempt to subscribe to a terminated Observable - we
            // just respond to the Observer with the final error or complete
            // event.
            if (this.finalized) {
                // eslint-disable-next-line @typescript-eslint/no-floating-promises
                this.task.then(function () {
                    try {
                        if (_this.finalError) {
                            observer.error(_this.finalError);
                        }
                        else {
                            observer.complete();
                        }
                    }
                    catch (e) {
                        // nothing
                    }
                    return;
                });
            }
            this.observers.push(observer);
            return unsub;
        };
        // Unsubscribe is synchronous - we guarantee that no events are sent to
        // any unsubscribed Observer.
        ObserverProxy.prototype.unsubscribeOne = function (i) {
            if (this.observers === undefined || this.observers[i] === undefined) {
                return;
            }
            delete this.observers[i];
            this.observerCount -= 1;
            if (this.observerCount === 0 && this.onNoObservers !== undefined) {
                this.onNoObservers(this);
            }
        };
        ObserverProxy.prototype.forEachObserver = function (fn) {
            if (this.finalized) {
                // Already closed by previous event....just eat the additional values.
                return;
            }
            // Since sendOne calls asynchronously - there is no chance that
            // this.observers will become undefined.
            for (var i = 0; i < this.observers.length; i++) {
                this.sendOne(i, fn);
            }
        };
        // Call the Observer via one of it's callback function. We are careful to
        // confirm that the observe has not been unsubscribed since this asynchronous
        // function had been queued.
        ObserverProxy.prototype.sendOne = function (i, fn) {
            var _this = this;
            // Execute the callback asynchronously
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.task.then(function () {
                if (_this.observers !== undefined && _this.observers[i] !== undefined) {
                    try {
                        fn(_this.observers[i]);
                    }
                    catch (e) {
                        // Ignore exceptions raised in Observers or missing methods of an
                        // Observer.
                        // Log error to console. b/31404806
                        if (typeof console !== 'undefined' && console.error) {
                            console.error(e);
                        }
                    }
                }
            });
        };
        ObserverProxy.prototype.close = function (err) {
            var _this = this;
            if (this.finalized) {
                return;
            }
            this.finalized = true;
            if (err !== undefined) {
                this.finalError = err;
            }
            // Proxy is no longer needed - garbage collect references
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.task.then(function () {
                _this.observers = undefined;
                _this.onNoObservers = undefined;
            });
        };
        return ObserverProxy;
    }());
    /** Turn synchronous function into one called asynchronously. */
    function async(fn, onError) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            Promise.resolve(true)
                .then(function () {
                fn.apply(void 0, args);
            })
                .catch(function (error) {
                if (onError) {
                    onError(error);
                }
            });
        };
    }
    /**
     * Return true if the object passed in implements any of the named methods.
     */
    function implementsAnyMethods(obj, methods) {
        if (typeof obj !== 'object' || obj === null) {
            return false;
        }
        for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
            var method = methods_1[_i];
            if (method in obj && typeof obj[method] === 'function') {
                return true;
            }
        }
        return false;
    }
    function noop() {
        // do nothing
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Check to make sure the appropriate number of arguments are provided for a public function.
     * Throws an error if it fails.
     *
     * @param fnName The function name
     * @param minCount The minimum number of arguments to allow for the function call
     * @param maxCount The maximum number of argument to allow for the function call
     * @param argCount The actual number of arguments provided.
     */
    var validateArgCount = function (fnName, minCount, maxCount, argCount) {
        var argError;
        if (argCount < minCount) {
            argError = 'at least ' + minCount;
        }
        else if (argCount > maxCount) {
            argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
        }
        if (argError) {
            var error = fnName +
                ' failed: Was called with ' +
                argCount +
                (argCount === 1 ? ' argument.' : ' arguments.') +
                ' Expects ' +
                argError +
                '.';
            throw new Error(error);
        }
    };
    /**
     * Generates a string to prefix an error message about failed argument validation
     *
     * @param fnName The function name
     * @param argumentNumber The index of the argument
     * @param optional Whether or not the argument is optional
     * @return The prefix to add to the error thrown for validation.
     */
    function errorPrefix(fnName, argumentNumber, optional) {
        var argName = '';
        switch (argumentNumber) {
            case 1:
                argName = optional ? 'first' : 'First';
                break;
            case 2:
                argName = optional ? 'second' : 'Second';
                break;
            case 3:
                argName = optional ? 'third' : 'Third';
                break;
            case 4:
                argName = optional ? 'fourth' : 'Fourth';
                break;
            default:
                throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');
        }
        var error = fnName + ' failed: ';
        error += argName + ' argument ';
        return error;
    }
    /**
     * @param fnName
     * @param argumentNumber
     * @param namespace
     * @param optional
     */
    function validateNamespace(fnName, argumentNumber, namespace, optional) {
        if (optional && !namespace) {
            return;
        }
        if (typeof namespace !== 'string') {
            //TODO: I should do more validation here. We only allow certain chars in namespaces.
            throw new Error(errorPrefix(fnName, argumentNumber, optional) +
                'must be a valid firebase namespace.');
        }
    }
    function validateCallback(fnName, argumentNumber, callback, optional) {
        if (optional && !callback) {
            return;
        }
        if (typeof callback !== 'function') {
            throw new Error(errorPrefix(fnName, argumentNumber, optional) +
                'must be a valid function.');
        }
    }
    function validateContextObject(fnName, argumentNumber, context, optional) {
        if (optional && !context) {
            return;
        }
        if (typeof context !== 'object' || context === null) {
            throw new Error(errorPrefix(fnName, argumentNumber, optional) +
                'must be a valid context object.');
        }
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
    // automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
    // so it's been modified.
    // Note that not all Unicode characters appear as single characters in JavaScript strings.
    // fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
    // use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
    // character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
    // pair).
    // See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
    /**
     * @param {string} str
     * @return {Array}
     */
    var stringToByteArray$1 = function (str) {
        var out = [];
        var p = 0;
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            // Is this the lead surrogate in a surrogate pair?
            if (c >= 0xd800 && c <= 0xdbff) {
                var high = c - 0xd800; // the high 10 bits.
                i++;
                assert(i < str.length, 'Surrogate pair missing trail surrogate.');
                var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.
                c = 0x10000 + (high << 10) + low;
            }
            if (c < 128) {
                out[p++] = c;
            }
            else if (c < 2048) {
                out[p++] = (c >> 6) | 192;
                out[p++] = (c & 63) | 128;
            }
            else if (c < 65536) {
                out[p++] = (c >> 12) | 224;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
            else {
                out[p++] = (c >> 18) | 240;
                out[p++] = ((c >> 12) & 63) | 128;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
        }
        return out;
    };
    /**
     * Calculate length without actually converting; useful for doing cheaper validation.
     * @param {string} str
     * @return {number}
     */
    var stringLength = function (str) {
        var p = 0;
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            if (c < 128) {
                p++;
            }
            else if (c < 2048) {
                p += 2;
            }
            else if (c >= 0xd800 && c <= 0xdbff) {
                // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
                p += 4;
                i++; // skip trail surrogate.
            }
            else {
                p += 3;
            }
        }
        return p;
    };

    exports.CONSTANTS = CONSTANTS;
    exports.Deferred = Deferred;
    exports.ErrorFactory = ErrorFactory;
    exports.FirebaseError = FirebaseError;
    exports.Sha1 = Sha1;
    exports.assert = assert;
    exports.assertionError = assertionError;
    exports.async = async;
    exports.base64 = base64;
    exports.base64Decode = base64Decode;
    exports.base64Encode = base64Encode;
    exports.contains = contains;
    exports.createSubscribe = createSubscribe;
    exports.decode = decode;
    exports.deepCopy = deepCopy;
    exports.deepExtend = deepExtend;
    exports.errorPrefix = errorPrefix;
    exports.getUA = getUA;
    exports.isAdmin = isAdmin;
    exports.isBrowser = isBrowser;
    exports.isBrowserExtension = isBrowserExtension;
    exports.isElectron = isElectron;
    exports.isEmpty = isEmpty;
    exports.isIE = isIE;
    exports.isMobileCordova = isMobileCordova;
    exports.isNode = isNode;
    exports.isNodeSdk = isNodeSdk;
    exports.isReactNative = isReactNative;
    exports.isUWP = isUWP;
    exports.isValidFormat = isValidFormat;
    exports.isValidTimestamp = isValidTimestamp;
    exports.issuedAtTime = issuedAtTime;
    exports.jsonEval = jsonEval;
    exports.map = map;
    exports.querystring = querystring;
    exports.querystringDecode = querystringDecode;
    exports.safeGet = safeGet;
    exports.stringLength = stringLength;
    exports.stringToByteArray = stringToByteArray$1;
    exports.stringify = stringify;
    exports.validateArgCount = validateArgCount;
    exports.validateCallback = validateCallback;
    exports.validateContextObject = validateContextObject;
    exports.validateNamespace = validateNamespace;
    //# sourceMappingURL=index.cjs.js.map
    });

    unwrapExports(index_cjs);
    var index_cjs_1 = index_cjs.CONSTANTS;
    var index_cjs_2 = index_cjs.Deferred;
    var index_cjs_3 = index_cjs.ErrorFactory;
    var index_cjs_4 = index_cjs.FirebaseError;
    var index_cjs_5 = index_cjs.Sha1;
    var index_cjs_6 = index_cjs.assert;
    var index_cjs_7 = index_cjs.assertionError;
    var index_cjs_8 = index_cjs.async;
    var index_cjs_9 = index_cjs.base64;
    var index_cjs_10 = index_cjs.base64Decode;
    var index_cjs_11 = index_cjs.base64Encode;
    var index_cjs_12 = index_cjs.contains;
    var index_cjs_13 = index_cjs.createSubscribe;
    var index_cjs_14 = index_cjs.decode;
    var index_cjs_15 = index_cjs.deepCopy;
    var index_cjs_16 = index_cjs.deepExtend;
    var index_cjs_17 = index_cjs.errorPrefix;
    var index_cjs_18 = index_cjs.getUA;
    var index_cjs_19 = index_cjs.isAdmin;
    var index_cjs_20 = index_cjs.isBrowser;
    var index_cjs_21 = index_cjs.isBrowserExtension;
    var index_cjs_22 = index_cjs.isElectron;
    var index_cjs_23 = index_cjs.isEmpty;
    var index_cjs_24 = index_cjs.isIE;
    var index_cjs_25 = index_cjs.isMobileCordova;
    var index_cjs_26 = index_cjs.isNode;
    var index_cjs_27 = index_cjs.isNodeSdk;
    var index_cjs_28 = index_cjs.isReactNative;
    var index_cjs_29 = index_cjs.isUWP;
    var index_cjs_30 = index_cjs.isValidFormat;
    var index_cjs_31 = index_cjs.isValidTimestamp;
    var index_cjs_32 = index_cjs.issuedAtTime;
    var index_cjs_33 = index_cjs.jsonEval;
    var index_cjs_34 = index_cjs.map;
    var index_cjs_35 = index_cjs.querystring;
    var index_cjs_36 = index_cjs.querystringDecode;
    var index_cjs_37 = index_cjs.safeGet;
    var index_cjs_38 = index_cjs.stringLength;
    var index_cjs_39 = index_cjs.stringToByteArray;
    var index_cjs_40 = index_cjs.stringify;
    var index_cjs_41 = index_cjs.validateArgCount;
    var index_cjs_42 = index_cjs.validateCallback;
    var index_cjs_43 = index_cjs.validateContextObject;
    var index_cjs_44 = index_cjs.validateNamespace;

    var index_cjs$1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, '__esModule', { value: true });




    /**
     * Component for service name T, e.g. `auth`, `auth-internal`
     */
    var Component = /** @class */ (function () {
        /**
         *
         * @param name The public service name, e.g. app, auth, firestore, database
         * @param instanceFactory Service factory responsible for creating the public interface
         * @param type whether the service provided by the component is public or private
         */
        function Component(name, instanceFactory, type) {
            this.name = name;
            this.instanceFactory = instanceFactory;
            this.type = type;
            this.multipleInstances = false;
            /**
             * Properties to be added to the service namespace
             */
            this.serviceProps = {};
            this.instantiationMode = "LAZY" /* LAZY */;
        }
        Component.prototype.setInstantiationMode = function (mode) {
            this.instantiationMode = mode;
            return this;
        };
        Component.prototype.setMultipleInstances = function (multipleInstances) {
            this.multipleInstances = multipleInstances;
            return this;
        };
        Component.prototype.setServiceProps = function (props) {
            this.serviceProps = props;
            return this;
        };
        return Component;
    }());

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_ENTRY_NAME = '[DEFAULT]';

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
     * NameServiceMapping[T] is an alias for the type of the instance
     */
    var Provider = /** @class */ (function () {
        function Provider(name, container) {
            this.name = name;
            this.container = container;
            this.component = null;
            this.instances = new Map();
            this.instancesDeferred = new Map();
        }
        /**
         * @param identifier A provider can provide mulitple instances of a service
         * if this.component.multipleInstances is true.
         */
        Provider.prototype.get = function (identifier) {
            if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }
            // if multipleInstances is not supported, use the default name
            var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
            if (!this.instancesDeferred.has(normalizedIdentifier)) {
                var deferred = new index_cjs.Deferred();
                this.instancesDeferred.set(normalizedIdentifier, deferred);
                // If the service instance is available, resolve the promise with it immediately
                try {
                    var instance = this.getOrInitializeService(normalizedIdentifier);
                    if (instance) {
                        deferred.resolve(instance);
                    }
                }
                catch (e) {
                    // when the instance factory throws an exception during get(), it should not cause
                    // a fatal error. We just return the unresolved promise in this case.
                }
            }
            return this.instancesDeferred.get(normalizedIdentifier).promise;
        };
        Provider.prototype.getImmediate = function (options) {
            var _a = tslib_es6.__assign({ identifier: DEFAULT_ENTRY_NAME, optional: false }, options), identifier = _a.identifier, optional = _a.optional;
            // if multipleInstances is not supported, use the default name
            var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
            try {
                var instance = this.getOrInitializeService(normalizedIdentifier);
                if (!instance) {
                    if (optional) {
                        return null;
                    }
                    throw Error("Service " + this.name + " is not available");
                }
                return instance;
            }
            catch (e) {
                if (optional) {
                    return null;
                }
                else {
                    throw e;
                }
            }
        };
        Provider.prototype.getComponent = function () {
            return this.component;
        };
        Provider.prototype.setComponent = function (component) {
            var e_1, _a;
            if (component.name !== this.name) {
                throw Error("Mismatching Component " + component.name + " for Provider " + this.name + ".");
            }
            if (this.component) {
                throw Error("Component for " + this.name + " has already been provided");
            }
            this.component = component;
            // if the service is eager, initialize the default instance
            if (isComponentEager(component)) {
                try {
                    this.getOrInitializeService(DEFAULT_ENTRY_NAME);
                }
                catch (e) {
                    // when the instance factory for an eager Component throws an exception during the eager
                    // initialization, it should not cause a fatal error.
                    // TODO: Investigate if we need to make it configurable, because some component may want to cause
                    // a fatal error in this case?
                }
            }
            try {
                // Create service instances for the pending promises and resolve them
                // NOTE: if this.multipleInstances is false, only the default instance will be created
                // and all promises with resolve with it regardless of the identifier.
                for (var _b = tslib_es6.__values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = tslib_es6.__read(_c.value, 2), instanceIdentifier = _d[0], instanceDeferred = _d[1];
                    var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
                    try {
                        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
                        var instance = this.getOrInitializeService(normalizedIdentifier);
                        instanceDeferred.resolve(instance);
                    }
                    catch (e) {
                        // when the instance factory throws an exception, it should not cause
                        // a fatal error. We just leave the promise unresolved.
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        Provider.prototype.clearInstance = function (identifier) {
            if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }
            this.instancesDeferred.delete(identifier);
            this.instances.delete(identifier);
        };
        // app.delete() will call this method on every provider to delete the services
        // TODO: should we mark the provider as deleted?
        Provider.prototype.delete = function () {
            return tslib_es6.__awaiter(this, void 0, void 0, function () {
                var services;
                return tslib_es6.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            services = Array.from(this.instances.values());
                            return [4 /*yield*/, Promise.all(services
                                    .filter(function (service) { return 'INTERNAL' in service; })
                                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                    .map(function (service) { return service.INTERNAL.delete(); }))];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        Provider.prototype.isComponentSet = function () {
            return this.component != null;
        };
        Provider.prototype.getOrInitializeService = function (identifier) {
            var instance = this.instances.get(identifier);
            if (!instance && this.component) {
                instance = this.component.instanceFactory(this.container, normalizeIdentifierForFactory(identifier));
                this.instances.set(identifier, instance);
            }
            return instance || null;
        };
        Provider.prototype.normalizeInstanceIdentifier = function (identifier) {
            if (this.component) {
                return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
            }
            else {
                return identifier; // assume multiple instances are supported before the component is provided.
            }
        };
        return Provider;
    }());
    // undefined should be passed to the service factory for the default instance
    function normalizeIdentifierForFactory(identifier) {
        return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;
    }
    function isComponentEager(component) {
        return component.instantiationMode === "EAGER" /* EAGER */;
    }

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
     */
    var ComponentContainer = /** @class */ (function () {
        function ComponentContainer(name) {
            this.name = name;
            this.providers = new Map();
        }
        /**
         *
         * @param component Component being added
         * @param overwrite When a component with the same name has already been registered,
         * if overwrite is true: overwrite the existing component with the new component and create a new
         * provider with the new component. It can be useful in tests where you want to use different mocks
         * for different tests.
         * if overwrite is false: throw an exception
         */
        ComponentContainer.prototype.addComponent = function (component) {
            var provider = this.getProvider(component.name);
            if (provider.isComponentSet()) {
                throw new Error("Component " + component.name + " has already been registered with " + this.name);
            }
            provider.setComponent(component);
        };
        ComponentContainer.prototype.addOrOverwriteComponent = function (component) {
            var provider = this.getProvider(component.name);
            if (provider.isComponentSet()) {
                // delete the existing provider from the container, so we can register the new component
                this.providers.delete(component.name);
            }
            this.addComponent(component);
        };
        /**
         * getProvider provides a type safe interface where it can only be called with a field name
         * present in NameServiceMapping interface.
         *
         * Firebase SDKs providing services should extend NameServiceMapping interface to register
         * themselves.
         */
        ComponentContainer.prototype.getProvider = function (name) {
            if (this.providers.has(name)) {
                return this.providers.get(name);
            }
            // create a Provider for a service that hasn't registered with Firebase
            var provider = new Provider(name, this);
            this.providers.set(name, provider);
            return provider;
        };
        ComponentContainer.prototype.getProviders = function () {
            return Array.from(this.providers.values());
        };
        return ComponentContainer;
    }());

    exports.Component = Component;
    exports.ComponentContainer = ComponentContainer;
    exports.Provider = Provider;
    //# sourceMappingURL=index.cjs.js.map
    });

    unwrapExports(index_cjs$1);
    var index_cjs_1$1 = index_cjs$1.Component;
    var index_cjs_2$1 = index_cjs$1.ComponentContainer;
    var index_cjs_3$1 = index_cjs$1.Provider;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __spreadArrays$1() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a;
    /**
     * A container for all of the Logger instances
     */
    var instances = [];
    /**
     * The JS SDK supports 5 log levels and also allows a user the ability to
     * silence the logs altogether.
     *
     * The order is a follows:
     * DEBUG < VERBOSE < INFO < WARN < ERROR
     *
     * All of the log types above the current log level will be captured (i.e. if
     * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
     * `VERBOSE` logs will not)
     */
    var LogLevel;
    (function (LogLevel) {
        LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
        LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
        LogLevel[LogLevel["INFO"] = 2] = "INFO";
        LogLevel[LogLevel["WARN"] = 3] = "WARN";
        LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
        LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(LogLevel || (LogLevel = {}));
    var levelStringToEnum = {
        'debug': LogLevel.DEBUG,
        'verbose': LogLevel.VERBOSE,
        'info': LogLevel.INFO,
        'warn': LogLevel.WARN,
        'error': LogLevel.ERROR,
        'silent': LogLevel.SILENT
    };
    /**
     * The default log level
     */
    var defaultLogLevel = LogLevel.INFO;
    /**
     * By default, `console.debug` is not displayed in the developer console (in
     * chrome). To avoid forcing users to have to opt-in to these logs twice
     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
     * logs to the `console.log` function.
     */
    var ConsoleMethod = (_a = {},
        _a[LogLevel.DEBUG] = 'log',
        _a[LogLevel.VERBOSE] = 'log',
        _a[LogLevel.INFO] = 'info',
        _a[LogLevel.WARN] = 'warn',
        _a[LogLevel.ERROR] = 'error',
        _a);
    /**
     * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
     * messages on to their corresponding console counterparts (if the log method
     * is supported by the current log level)
     */
    var defaultLogHandler = function (instance, logType) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (logType < instance.logLevel) {
            return;
        }
        var now = new Date().toISOString();
        var method = ConsoleMethod[logType];
        if (method) {
            console[method].apply(console, __spreadArrays$1(["[" + now + "]  " + instance.name + ":"], args));
        }
        else {
            throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
        }
    };
    var Logger = /** @class */ (function () {
        /**
         * Gives you an instance of a Logger to capture messages according to
         * Firebase's logging scheme.
         *
         * @param name The name that the logs will be associated with
         */
        function Logger(name) {
            this.name = name;
            /**
             * The log level of the given Logger instance.
             */
            this._logLevel = defaultLogLevel;
            /**
             * The main (internal) log handler for the Logger instance.
             * Can be set to a new function in internal package code but not by user.
             */
            this._logHandler = defaultLogHandler;
            /**
             * The optional, additional, user-defined log handler for the Logger instance.
             */
            this._userLogHandler = null;
            /**
             * Capture the current instance for later use
             */
            instances.push(this);
        }
        Object.defineProperty(Logger.prototype, "logLevel", {
            get: function () {
                return this._logLevel;
            },
            set: function (val) {
                if (!(val in LogLevel)) {
                    throw new TypeError('Invalid value assigned to `logLevel`');
                }
                this._logLevel = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Logger.prototype, "logHandler", {
            get: function () {
                return this._logHandler;
            },
            set: function (val) {
                if (typeof val !== 'function') {
                    throw new TypeError('Value assigned to `logHandler` must be a function');
                }
                this._logHandler = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Logger.prototype, "userLogHandler", {
            get: function () {
                return this._userLogHandler;
            },
            set: function (val) {
                this._userLogHandler = val;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * The functions below are all based on the `console` interface
         */
        Logger.prototype.debug = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.DEBUG], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.DEBUG], args));
        };
        Logger.prototype.log = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.VERBOSE], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.VERBOSE], args));
        };
        Logger.prototype.info = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.INFO], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.INFO], args));
        };
        Logger.prototype.warn = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.WARN], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.WARN], args));
        };
        Logger.prototype.error = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.ERROR], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.ERROR], args));
        };
        return Logger;
    }());
    function setLogLevel(level) {
        var newLevel = typeof level === 'string' ? levelStringToEnum[level] : level;
        instances.forEach(function (inst) {
            inst.logLevel = newLevel;
        });
    }
    function setUserLogHandler(logCallback, options) {
        var _loop_1 = function (instance) {
            var customLogLevel = null;
            if (options && options.level) {
                customLogLevel = levelStringToEnum[options.level];
            }
            if (logCallback === null) {
                instance.userLogHandler = null;
            }
            else {
                instance.userLogHandler = function (instance, level) {
                    var args = [];
                    for (var _i = 2; _i < arguments.length; _i++) {
                        args[_i - 2] = arguments[_i];
                    }
                    var message = args
                        .map(function (arg) {
                        if (arg == null) {
                            return null;
                        }
                        else if (typeof arg === 'string') {
                            return arg;
                        }
                        else if (typeof arg === 'number' || typeof arg === 'boolean') {
                            return arg.toString();
                        }
                        else if (arg instanceof Error) {
                            return arg.message;
                        }
                        else {
                            try {
                                return JSON.stringify(arg);
                            }
                            catch (ignored) {
                                return null;
                            }
                        }
                    })
                        .filter(function (arg) { return arg; })
                        .join(' ');
                    if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {
                        logCallback({
                            level: LogLevel[level].toLowerCase(),
                            message: message,
                            args: args,
                            type: instance.name
                        });
                    }
                };
            }
        };
        for (var _i = 0, instances_1 = instances; _i < instances_1.length; _i++) {
            var instance = instances_1[_i];
            _loop_1(instance);
        }
    }
    //# sourceMappingURL=index.esm.js.map

    var index_esm = /*#__PURE__*/Object.freeze({
        __proto__: null,
        get LogLevel () { return LogLevel; },
        Logger: Logger,
        setLogLevel: setLogLevel,
        setUserLogHandler: setUserLogHandler
    });

    var index_cjs$2 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, '__esModule', { value: true });






    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a;
    var ERRORS = (_a = {},
        _a["no-app" /* NO_APP */] = "No Firebase App '{$appName}' has been created - " +
            'call Firebase App.initializeApp()',
        _a["bad-app-name" /* BAD_APP_NAME */] = "Illegal App name: '{$appName}",
        _a["duplicate-app" /* DUPLICATE_APP */] = "Firebase App named '{$appName}' already exists",
        _a["app-deleted" /* APP_DELETED */] = "Firebase App named '{$appName}' already deleted",
        _a["invalid-app-argument" /* INVALID_APP_ARGUMENT */] = 'firebase.{$appName}() takes either no argument or a ' +
            'Firebase App instance.',
        _a["invalid-log-argument" /* INVALID_LOG_ARGUMENT */] = 'First argument to `onLog` must be null or a function.',
        _a);
    var ERROR_FACTORY = new index_cjs.ErrorFactory('app', 'Firebase', ERRORS);

    var name$1 = "@firebase/app";
    var version = "0.6.1";

    var name$2 = "@firebase/analytics";

    var name$3 = "@firebase/auth";

    var name$4 = "@firebase/database";

    var name$5 = "@firebase/functions";

    var name$6 = "@firebase/installations";

    var name$7 = "@firebase/messaging";

    var name$8 = "@firebase/performance";

    var name$9 = "@firebase/remote-config";

    var name$a = "@firebase/storage";

    var name$b = "@firebase/firestore";

    var name$c = "firebase-wrapper";

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$1;
    var DEFAULT_ENTRY_NAME = '[DEFAULT]';
    var PLATFORM_LOG_STRING = (_a$1 = {},
        _a$1[name$1] = 'fire-core',
        _a$1[name$2] = 'fire-analytics',
        _a$1[name$3] = 'fire-auth',
        _a$1[name$4] = 'fire-rtdb',
        _a$1[name$5] = 'fire-fn',
        _a$1[name$6] = 'fire-iid',
        _a$1[name$7] = 'fire-fcm',
        _a$1[name$8] = 'fire-perf',
        _a$1[name$9] = 'fire-rc',
        _a$1[name$a] = 'fire-gcs',
        _a$1[name$b] = 'fire-fst',
        _a$1['fire-js'] = 'fire-js',
        _a$1[name$c] = 'fire-js-all',
        _a$1);

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var logger = new index_esm.Logger('@firebase/app');

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Global context object for a collection of services using
     * a shared authentication state.
     */
    var FirebaseAppImpl = /** @class */ (function () {
        function FirebaseAppImpl(options, config, firebase_) {
            var e_1, _a;
            var _this = this;
            this.firebase_ = firebase_;
            this.isDeleted_ = false;
            this.name_ = config.name;
            this.automaticDataCollectionEnabled_ =
                config.automaticDataCollectionEnabled || false;
            this.options_ = index_cjs.deepCopy(options);
            this.container = new index_cjs$1.ComponentContainer(config.name);
            // add itself to container
            this._addComponent(new index_cjs$1.Component('app', function () { return _this; }, "PUBLIC" /* PUBLIC */));
            try {
                // populate ComponentContainer with existing components
                for (var _b = tslib_es6.__values(this.firebase_.INTERNAL.components.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var component$1 = _c.value;
                    this._addComponent(component$1);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        Object.defineProperty(FirebaseAppImpl.prototype, "automaticDataCollectionEnabled", {
            get: function () {
                this.checkDestroyed_();
                return this.automaticDataCollectionEnabled_;
            },
            set: function (val) {
                this.checkDestroyed_();
                this.automaticDataCollectionEnabled_ = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FirebaseAppImpl.prototype, "name", {
            get: function () {
                this.checkDestroyed_();
                return this.name_;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FirebaseAppImpl.prototype, "options", {
            get: function () {
                this.checkDestroyed_();
                return this.options_;
            },
            enumerable: true,
            configurable: true
        });
        FirebaseAppImpl.prototype.delete = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.checkDestroyed_();
                resolve();
            })
                .then(function () {
                _this.firebase_.INTERNAL.removeApp(_this.name_);
                return Promise.all(_this.container.getProviders().map(function (provider) { return provider.delete(); }));
            })
                .then(function () {
                _this.isDeleted_ = true;
            });
        };
        /**
         * Return a service instance associated with this app (creating it
         * on demand), identified by the passed instanceIdentifier.
         *
         * NOTE: Currently storage and functions are the only ones that are leveraging this
         * functionality. They invoke it by calling:
         *
         * ```javascript
         * firebase.app().storage('STORAGE BUCKET ID')
         * ```
         *
         * The service name is passed to this already
         * @internal
         */
        FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {
            if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }
            this.checkDestroyed_();
            // getImmediate will always succeed because _getService is only called for registered components.
            return this.container.getProvider(name).getImmediate({
                identifier: instanceIdentifier
            });
        };
        /**
         * Remove a service instance from the cache, so we will create a new instance for this service
         * when people try to get this service again.
         *
         * NOTE: currently only firestore is using this functionality to support firestore shutdown.
         *
         * @param name The service name
         * @param instanceIdentifier instance identifier in case multiple instances are allowed
         * @internal
         */
        FirebaseAppImpl.prototype._removeServiceInstance = function (name, instanceIdentifier) {
            if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.container.getProvider(name).clearInstance(instanceIdentifier);
        };
        /**
         * @param component the component being added to this app's container
         */
        FirebaseAppImpl.prototype._addComponent = function (component) {
            try {
                this.container.addComponent(component);
            }
            catch (e) {
                logger.debug("Component " + component.name + " failed to register with FirebaseApp " + this.name, e);
            }
        };
        FirebaseAppImpl.prototype._addOrOverwriteComponent = function (component) {
            this.container.addOrOverwriteComponent(component);
        };
        /**
         * This function will throw an Error if the App has already been deleted -
         * use before performing API actions on the App.
         */
        FirebaseAppImpl.prototype.checkDestroyed_ = function () {
            if (this.isDeleted_) {
                throw ERROR_FACTORY.create("app-deleted" /* APP_DELETED */, { appName: this.name_ });
            }
        };
        return FirebaseAppImpl;
    }());
    // Prevent dead-code elimination of these methods w/o invalid property
    // copying.
    (FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||
        FirebaseAppImpl.prototype.delete ||
        console.log('dc');

    var version$1 = "7.13.2";

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Because auth can't share code with other components, we attach the utility functions
     * in an internal namespace to share code.
     * This function return a firebase namespace object without
     * any utility functions, so it can be shared between the regular firebaseNamespace and
     * the lite version.
     */
    function createFirebaseNamespaceCore(firebaseAppImpl) {
        var apps = {};
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var components = new Map();
        // A namespace is a plain JavaScript Object.
        var namespace = {
            // Hack to prevent Babel from modifying the object returned
            // as the firebase namespace.
            // @ts-ignore
            __esModule: true,
            initializeApp: initializeApp,
            // @ts-ignore
            app: app,
            registerVersion: registerVersion,
            setLogLevel: index_esm.setLogLevel,
            onLog: onLog,
            // @ts-ignore
            apps: null,
            SDK_VERSION: version$1,
            INTERNAL: {
                registerComponent: registerComponent,
                removeApp: removeApp,
                components: components,
                useAsService: useAsService
            }
        };
        // Inject a circular default export to allow Babel users who were previously
        // using:
        //
        //   import firebase from 'firebase';
        //   which becomes: var firebase = require('firebase').default;
        //
        // instead of
        //
        //   import * as firebase from 'firebase';
        //   which becomes: var firebase = require('firebase');
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        namespace['default'] = namespace;
        // firebase.apps is a read-only getter.
        Object.defineProperty(namespace, 'apps', {
            get: getApps
        });
        /**
         * Called by App.delete() - but before any services associated with the App
         * are deleted.
         */
        function removeApp(name) {
            delete apps[name];
        }
        /**
         * Get the App object for a given name (or DEFAULT).
         */
        function app(name) {
            name = name || DEFAULT_ENTRY_NAME;
            if (!index_cjs.contains(apps, name)) {
                throw ERROR_FACTORY.create("no-app" /* NO_APP */, { appName: name });
            }
            return apps[name];
        }
        // @ts-ignore
        app['App'] = firebaseAppImpl;
        function initializeApp(options, rawConfig) {
            if (rawConfig === void 0) { rawConfig = {}; }
            if (typeof rawConfig !== 'object' || rawConfig === null) {
                var name_1 = rawConfig;
                rawConfig = { name: name_1 };
            }
            var config = rawConfig;
            if (config.name === undefined) {
                config.name = DEFAULT_ENTRY_NAME;
            }
            var name = config.name;
            if (typeof name !== 'string' || !name) {
                throw ERROR_FACTORY.create("bad-app-name" /* BAD_APP_NAME */, {
                    appName: String(name)
                });
            }
            if (index_cjs.contains(apps, name)) {
                throw ERROR_FACTORY.create("duplicate-app" /* DUPLICATE_APP */, { appName: name });
            }
            var app = new firebaseAppImpl(options, config, namespace);
            apps[name] = app;
            return app;
        }
        /*
         * Return an array of all the non-deleted FirebaseApps.
         */
        function getApps() {
            // Make a copy so caller cannot mutate the apps list.
            return Object.keys(apps).map(function (name) { return apps[name]; });
        }
        function registerComponent(component) {
            var e_1, _a;
            var componentName = component.name;
            if (components.has(componentName)) {
                logger.debug("There were multiple attempts to register component " + componentName + ".");
                return component.type === "PUBLIC" /* PUBLIC */
                    ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        namespace[componentName]
                    : null;
            }
            components.set(componentName, component);
            // create service namespace for public components
            if (component.type === "PUBLIC" /* PUBLIC */) {
                // The Service namespace is an accessor function ...
                var serviceNamespace = function (appArg) {
                    if (appArg === void 0) { appArg = app(); }
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    if (typeof appArg[componentName] !== 'function') {
                        // Invalid argument.
                        // This happens in the following case: firebase.storage('gs:/')
                        throw ERROR_FACTORY.create("invalid-app-argument" /* INVALID_APP_ARGUMENT */, {
                            appName: componentName
                        });
                    }
                    // Forward service instance lookup to the FirebaseApp.
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    return appArg[componentName]();
                };
                // ... and a container for service-level properties.
                if (component.serviceProps !== undefined) {
                    index_cjs.deepExtend(serviceNamespace, component.serviceProps);
                }
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                namespace[componentName] = serviceNamespace;
                // Patch the FirebaseAppImpl prototype
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                firebaseAppImpl.prototype[componentName] =
                    // TODO: The eslint disable can be removed and the 'ignoreRestArgs'
                    // option added to the no-explicit-any rule when ESlint releases it.
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        var serviceFxn = this._getService.bind(this, componentName);
                        return serviceFxn.apply(this, component.multipleInstances ? args : []);
                    };
            }
            try {
                // add the component to existing app instances
                for (var _b = tslib_es6.__values(Object.keys(apps)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var appName = _c.value;
                    apps[appName]._addComponent(component);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return component.type === "PUBLIC" /* PUBLIC */
                ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    namespace[componentName]
                : null;
        }
        function registerVersion(libraryKeyOrName, version, variant) {
            var _a;
            // TODO: We can use this check to whitelist strings when/if we set up
            // a good whitelist system.
            var library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
            if (variant) {
                library += "-" + variant;
            }
            var libraryMismatch = library.match(/\s|\//);
            var versionMismatch = version.match(/\s|\//);
            if (libraryMismatch || versionMismatch) {
                var warning = [
                    "Unable to register library \"" + library + "\" with version \"" + version + "\":"
                ];
                if (libraryMismatch) {
                    warning.push("library name \"" + library + "\" contains illegal characters (whitespace or \"/\")");
                }
                if (libraryMismatch && versionMismatch) {
                    warning.push('and');
                }
                if (versionMismatch) {
                    warning.push("version name \"" + version + "\" contains illegal characters (whitespace or \"/\")");
                }
                logger.warn(warning.join(' '));
                return;
            }
            registerComponent(new index_cjs$1.Component(library + "-version", function () { return ({ library: library, version: version }); }, "VERSION" /* VERSION */));
        }
        function onLog(logCallback, options) {
            if (logCallback !== null && typeof logCallback !== 'function') {
                throw ERROR_FACTORY.create("invalid-log-argument" /* INVALID_LOG_ARGUMENT */, {
                    appName: name
                });
            }
            index_esm.setUserLogHandler(logCallback, options);
        }
        // Map the requested service to a registered service name
        // (used to map auth to serverAuth service when needed).
        function useAsService(app, name) {
            if (name === 'serverAuth') {
                return null;
            }
            var useService = name;
            return useService;
        }
        return namespace;
    }

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Return a firebase namespace object.
     *
     * In production, this will be called exactly once and the result
     * assigned to the 'firebase' global.  It may be called multiple times
     * in unit tests.
     */
    function createFirebaseNamespace() {
        var namespace = createFirebaseNamespaceCore(FirebaseAppImpl);
        namespace.INTERNAL = tslib_es6.__assign(tslib_es6.__assign({}, namespace.INTERNAL), { createFirebaseNamespace: createFirebaseNamespace,
            extendNamespace: extendNamespace,
            createSubscribe: index_cjs.createSubscribe,
            ErrorFactory: index_cjs.ErrorFactory,
            deepExtend: index_cjs.deepExtend });
        /**
         * Patch the top-level firebase namespace with additional properties.
         *
         * firebase.INTERNAL.extendNamespace()
         */
        function extendNamespace(props) {
            index_cjs.deepExtend(namespace, props);
        }
        return namespace;
    }
    var firebase = createFirebaseNamespace();

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PlatformLoggerService = /** @class */ (function () {
        function PlatformLoggerService(container) {
            this.container = container;
        }
        // In initial implementation, this will be called by installations on
        // auth token refresh, and installations will send this string.
        PlatformLoggerService.prototype.getPlatformInfoString = function () {
            var providers = this.container.getProviders();
            // Loop through providers and get library/version pairs from any that are
            // version components.
            return providers
                .map(function (provider) {
                if (isVersionServiceProvider(provider)) {
                    var service = provider.getImmediate();
                    return service.library + "/" + service.version;
                }
                else {
                    return null;
                }
            })
                .filter(function (logString) { return logString; })
                .join(' ');
        };
        return PlatformLoggerService;
    }());
    /**
     *
     * @param provider check if this provider provides a VersionService
     *
     * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
     * provides VersionService. The provider is not necessarily a 'app-version'
     * provider.
     */
    function isVersionServiceProvider(provider) {
        var component = provider.getComponent();
        return (component === null || component === void 0 ? void 0 : component.type) === "VERSION" /* VERSION */;
    }

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function registerCoreComponents(firebase, variant) {
        firebase.INTERNAL.registerComponent(new index_cjs$1.Component('platform-logger', function (container) { return new PlatformLoggerService(container); }, "PRIVATE" /* PRIVATE */));
        // Register `app` package.
        firebase.registerVersion(name$1, version, variant);
        // Register platform SDK identifier (no version).
        firebase.registerVersion('fire-js', '');
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Firebase Lite detection test
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    if (index_cjs.isBrowser() && self.firebase !== undefined) {
        logger.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");
        // eslint-disable-next-line
        var sdkVersion = self.firebase.SDK_VERSION;
        if (sdkVersion && sdkVersion.indexOf('LITE') >= 0) {
            logger.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ");
        }
    }
    var initializeApp = firebase.initializeApp;
    // TODO: This disable can be removed and the 'ignoreRestArgs' option added to
    // the no-explicit-any rule when ESlint releases it.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    firebase.initializeApp = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        // Environment check before initializing app
        // Do the check in initializeApp, so people have a chance to disable it by setting logLevel
        // in @firebase/logger
        if (index_cjs.isNode()) {
            logger.warn("\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the \"main\" field in package.json.\n      \n      If you are using Webpack, you can specify \"main\" as the first item in\n      \"resolve.mainFields\":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the rollup-plugin-node-resolve plugin and specify \"main\"\n      as the first item in \"mainFields\", e.g. ['main', 'module'].\n      https://github.com/rollup/rollup-plugin-node-resolve\n      ");
        }
        return initializeApp.apply(undefined, args);
    };
    var firebase$1 = firebase;
    registerCoreComponents(firebase$1);

    exports.default = firebase$1;
    exports.firebase = firebase$1;
    //# sourceMappingURL=index.cjs.js.map
    });

    unwrapExports(index_cjs$2);
    var index_cjs_1$2 = index_cjs$2.firebase;

    function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

    var firebase = _interopDefault(index_cjs$2);

    var name$1 = "firebase";
    var version = "7.13.2";

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    firebase.registerVersion(name$1, version, 'app');

    var index_cjs$3 = firebase;

    var global$1 = (typeof global !== "undefined" ? global :
                typeof self !== "undefined" ? self :
                typeof window !== "undefined" ? window : {});

    // shim for using process in browser
    // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

    function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout () {
        throw new Error('clearTimeout has not been defined');
    }
    var cachedSetTimeout = defaultSetTimout;
    var cachedClearTimeout = defaultClearTimeout;
    if (typeof global$1.setTimeout === 'function') {
        cachedSetTimeout = setTimeout;
    }
    if (typeof global$1.clearTimeout === 'function') {
        cachedClearTimeout = clearTimeout;
    }

    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
        } catch(e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
            } catch(e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
            }
        }


    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
        } catch (e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
            } catch (e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
            }
        }



    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return;
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }

    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while(len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
    }
    function nextTick(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
        }
    }
    // v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    var title = 'browser';
    var platform = 'browser';
    var browser$1 = true;
    var env = {};
    var argv = [];
    var version$1 = ''; // empty string to avoid regexp issues
    var versions = {};
    var release = {};
    var config = {};

    function noop$1() {}

    var on = noop$1;
    var addListener = noop$1;
    var once = noop$1;
    var off = noop$1;
    var removeListener = noop$1;
    var removeAllListeners = noop$1;
    var emit = noop$1;

    function binding(name) {
        throw new Error('process.binding is not supported');
    }

    function cwd () { return '/' }
    function chdir (dir) {
        throw new Error('process.chdir is not supported');
    }function umask() { return 0; }

    // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
    var performance = global$1.performance || {};
    var performanceNow =
      performance.now        ||
      performance.mozNow     ||
      performance.msNow      ||
      performance.oNow       ||
      performance.webkitNow  ||
      function(){ return (new Date()).getTime() };

    // generate timestamp or delta
    // see http://nodejs.org/api/process.html#process_process_hrtime
    function hrtime(previousTimestamp){
      var clocktime = performanceNow.call(performance)*1e-3;
      var seconds = Math.floor(clocktime);
      var nanoseconds = Math.floor((clocktime%1)*1e9);
      if (previousTimestamp) {
        seconds = seconds - previousTimestamp[0];
        nanoseconds = nanoseconds - previousTimestamp[1];
        if (nanoseconds<0) {
          seconds--;
          nanoseconds += 1e9;
        }
      }
      return [seconds,nanoseconds]
    }

    var startTime = new Date();
    function uptime() {
      var currentTime = new Date();
      var dif = currentTime - startTime;
      return dif / 1000;
    }

    var process = {
      nextTick: nextTick,
      title: title,
      browser: browser$1,
      env: env,
      argv: argv,
      version: version$1,
      versions: versions,
      on: on,
      addListener: addListener,
      once: once,
      off: off,
      removeListener: removeListener,
      removeAllListeners: removeAllListeners,
      emit: emit,
      binding: binding,
      cwd: cwd,
      chdir: chdir,
      umask: umask,
      hrtime: hrtime,
      platform: platform,
      release: release,
      config: config,
      uptime: uptime
    };

    var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global$1 !== 'undefined' ? global$1 : typeof self !== 'undefined' ? self : {};

    var g,goog=goog||{},k=commonjsGlobal$1;function m(a){return "string"==typeof a}function aa(a){return "number"==typeof a}function n(a,b){a=a.split(".");b=b||k;for(var c=0;c<a.length;c++)if(b=b[a[c]],null==b)return null;return b}function ba(){}
    function p(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return "array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return "object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return "array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return "function"}else return "null";
    else if("function"==b&&"undefined"==typeof a.call)return "object";return b}function q(a){return "array"==p(a)}function ca(a){var b=p(a);return "array"==b||"object"==b&&"number"==typeof a.length}function r(a){var b=typeof a;return "object"==b&&null!=a||"function"==b}var t="closure_uid_"+(1E9*Math.random()>>>0),da=0;function ea(a,b,c){return a.call.apply(a.bind,arguments)}
    function fa(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var e=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(e,d);return a.apply(b,e)}}return function(){return a.apply(b,arguments)}}function u(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?u=ea:u=fa;return u.apply(null,arguments)}
    function v(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var d=c.slice();d.push.apply(d,arguments);return a.apply(this,d)}}var w=Date.now||function(){return +new Date};function x(a,b){function c(){}c.prototype=b.prototype;a.N=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.yb=function(d,e,f){for(var h=Array(arguments.length-2),l=2;l<arguments.length;l++)h[l-2]=arguments[l];return b.prototype[e].apply(d,h)};}function y(){this.j=this.j;this.i=this.i;}var ha=0;y.prototype.j=!1;y.prototype.la=function(){if(!this.j&&(this.j=!0,this.G(),0!=ha)){var a=this[t]||(this[t]=++da);}};y.prototype.G=function(){if(this.i)for(;this.i.length;)this.i.shift()();};var ja=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if(m(a))return m(b)&&1==b.length?a.indexOf(b,0):-1;for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return -1},la=Array.prototype.forEach?function(a,b,c){Array.prototype.forEach.call(a,b,c);}:function(a,b,c){for(var d=a.length,e=m(a)?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a);};
    function ma(a){a:{var b=na;for(var c=a.length,d=m(a)?a.split(""):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){b=e;break a}b=-1;}return 0>b?null:m(a)?a.charAt(b):a[b]}function oa(a){return Array.prototype.concat.apply([],arguments)}function pa(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return []}function qa(a){return /^[\s\xa0]*$/.test(a)}var ra=String.prototype.trim?function(a){return a.trim()}:function(a){return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]};function z(a,b){return -1!=a.indexOf(b)}function sa(a,b){return a<b?-1:a>b?1:0}var A;a:{var ta=k.navigator;if(ta){var ua=ta.userAgent;if(ua){A=ua;break a}}A="";}function va(a,b,c){for(var d in a)b.call(c,a[d],d,a);}function wa(a){var b={},c;for(c in a)b[c]=a[c];return b}var xa="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function ya(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<xa.length;f++)c=xa[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c]);}}function za(a){za[" "](a);return a}za[" "]=ba;function Aa(a,b){var c=Ba;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)}var Ca=z(A,"Opera"),B=z(A,"Trident")||z(A,"MSIE"),Da=z(A,"Edge"),Ea=Da||B,Fa=z(A,"Gecko")&&!(z(A.toLowerCase(),"webkit")&&!z(A,"Edge"))&&!(z(A,"Trident")||z(A,"MSIE"))&&!z(A,"Edge"),Ga=z(A.toLowerCase(),"webkit")&&!z(A,"Edge");function Ha(){var a=k.document;return a?a.documentMode:void 0}var Ia;
    a:{var Ja="",Ka=function(){var a=A;if(Fa)return /rv:([^\);]+)(\)|;)/.exec(a);if(Da)return /Edge\/([\d\.]+)/.exec(a);if(B)return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(Ga)return /WebKit\/(\S+)/.exec(a);if(Ca)return /(?:Version)[ \/]?(\S+)/.exec(a)}();Ka&&(Ja=Ka?Ka[1]:"");if(B){var La=Ha();if(null!=La&&La>parseFloat(Ja)){Ia=String(La);break a}}Ia=Ja;}var Ba={};
    function Ma(a){return Aa(a,function(){for(var b=0,c=ra(String(Ia)).split("."),d=ra(String(a)).split("."),e=Math.max(c.length,d.length),f=0;0==b&&f<e;f++){var h=c[f]||"",l=d[f]||"";do{h=/(\d*)(\D*)(.*)/.exec(h)||["","","",""];l=/(\d*)(\D*)(.*)/.exec(l)||["","","",""];if(0==h[0].length&&0==l[0].length)break;b=sa(0==h[1].length?0:parseInt(h[1],10),0==l[1].length?0:parseInt(l[1],10))||sa(0==h[2].length,0==l[2].length)||sa(h[2],l[2]);h=h[3];l=l[3];}while(0==b)}return 0<=b})}var Na;var Oa=k.document;
    Na=Oa&&B?Ha()||("CSS1Compat"==Oa.compatMode?parseInt(Ia,10):5):void 0;var Pa=!B||9<=Number(Na),Qa=B&&!Ma("9"),Ra=function(){if(!k.addEventListener||!Object.defineProperty)return !1;var a=!1,b=Object.defineProperty({},"passive",{get:function(){a=!0;}});try{k.addEventListener("test",ba,b),k.removeEventListener("test",ba,b);}catch(c){}return a}();function C(a,b){this.type=a;this.a=this.target=b;this.Ia=!0;}C.prototype.b=function(){this.Ia=!1;};function D(a,b){C.call(this,a?a.type:"");this.relatedTarget=this.a=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key="";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType="";this.c=null;if(a){var c=this.type=a.type,d=a.changedTouches&&a.changedTouches.length?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.a=b;if(b=a.relatedTarget){if(Fa){a:{try{za(b.nodeName);var e=!0;break a}catch(f){}e=!1;}e||(b=null);}}else "mouseover"==
    c?b=a.fromElement:"mouseout"==c&&(b=a.toElement);this.relatedTarget=b;d?(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0):(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0);this.button=a.button;this.key=a.key||"";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=
    a.metaKey;this.pointerId=a.pointerId||0;this.pointerType=m(a.pointerType)?a.pointerType:Sa[a.pointerType]||"";this.c=a;a.defaultPrevented&&this.b();}}x(D,C);var Sa={2:"touch",3:"pen",4:"mouse"};D.prototype.b=function(){D.N.b.call(this);var a=this.c;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,Qa)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1;}catch(b){}};var F="closure_listenable_"+(1E6*Math.random()|0),Ta=0;function Ua(a,b,c,d,e){this.listener=a;this.proxy=null;this.src=b;this.type=c;this.capture=!!d;this.da=e;this.key=++Ta;this.X=this.Z=!1;}function Va(a){a.X=!0;a.listener=null;a.proxy=null;a.src=null;a.da=null;}function Wa(a){this.src=a;this.a={};this.b=0;}Wa.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.a[f];a||(a=this.a[f]=[],this.b++);var h=Xa(a,b,d,e);-1<h?(b=a[h],c||(b.Z=!1)):(b=new Ua(b,this.src,f,!!d,e),b.Z=c,a.push(b));return b};function Ya(a,b){var c=b.type;if(c in a.a){var d=a.a[c],e=ja(d,b),f;(f=0<=e)&&Array.prototype.splice.call(d,e,1);f&&(Va(b),0==a.a[c].length&&(delete a.a[c],a.b--));}}
    function Xa(a,b,c,d){for(var e=0;e<a.length;++e){var f=a[e];if(!f.X&&f.listener==b&&f.capture==!!c&&f.da==d)return e}return -1}var Za="closure_lm_"+(1E6*Math.random()|0),$a={};function bb(a,b,c,d,e){if(d&&d.once)return cb(a,b,c,d,e);if(q(b)){for(var f=0;f<b.length;f++)bb(a,b[f],c,d,e);return null}c=db(c);return a&&a[F]?a.za(b,c,r(d)?!!d.capture:!!d,e):eb(a,b,c,!1,d,e)}
    function eb(a,b,c,d,e,f){if(!b)throw Error("Invalid event type");var h=r(e)?!!e.capture:!!e;if(h&&!Pa)return null;var l=fb(a);l||(a[Za]=l=new Wa(a));c=l.add(b,c,d,h,f);if(c.proxy)return c;d=gb();c.proxy=d;d.src=a;d.listener=c;if(a.addEventListener)Ra||(e=h),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(hb(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");return c}function gb(){var a=ib,b=Pa?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b}function cb(a,b,c,d,e){if(q(b)){for(var f=0;f<b.length;f++)cb(a,b[f],c,d,e);return null}c=db(c);return a&&a[F]?a.Aa(b,c,r(d)?!!d.capture:!!d,e):eb(a,b,c,!0,d,e)}
    function jb(a,b,c,d,e){if(q(b))for(var f=0;f<b.length;f++)jb(a,b[f],c,d,e);else (d=r(d)?!!d.capture:!!d,c=db(c),a&&a[F])?(a=a.c,b=String(b).toString(),b in a.a&&(f=a.a[b],c=Xa(f,c,d,e),-1<c&&(Va(f[c]),Array.prototype.splice.call(f,c,1),0==f.length&&(delete a.a[b],a.b--)))):a&&(a=fb(a))&&(b=a.a[b.toString()],a=-1,b&&(a=Xa(b,c,d,e)),(c=-1<a?b[a]:null)&&kb(c));}
    function kb(a){if(!aa(a)&&a&&!a.X){var b=a.src;if(b&&b[F])Ya(b.c,a);else {var c=a.type,d=a.proxy;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(hb(c),d):b.addListener&&b.removeListener&&b.removeListener(d);(c=fb(b))?(Ya(c,a),0==c.b&&(c.src=null,b[Za]=null)):Va(a);}}}function hb(a){return a in $a?$a[a]:$a[a]="on"+a}function lb(a,b){var c=a.listener,d=a.da||a.src;a.Z&&kb(a);return c.call(d,b)}
    function ib(a,b){return a.X?!0:Pa?lb(a,new D(b,this)):(b=new D(b||n("window.event"),this),lb(a,b))}function fb(a){a=a[Za];return a instanceof Wa?a:null}var mb="__closure_events_fn_"+(1E9*Math.random()>>>0);function db(a){if("function"==p(a))return a;a[mb]||(a[mb]=function(b){return a.handleEvent(b)});return a[mb]}function G(){y.call(this);this.c=new Wa(this);this.J=this;this.B=null;}x(G,y);G.prototype[F]=!0;g=G.prototype;g.addEventListener=function(a,b,c,d){bb(this,a,b,c,d);};g.removeEventListener=function(a,b,c,d){jb(this,a,b,c,d);};
    g.dispatchEvent=function(a){var b,c=this.B;if(c)for(b=[];c;c=c.B)b.push(c);c=this.J;var d=a.type||a;if(m(a))a=new C(a,c);else if(a instanceof C)a.target=a.target||c;else {var e=a;a=new C(d,c);ya(a,e);}e=!0;if(b)for(var f=b.length-1;0<=f;f--){var h=a.a=b[f];e=nb(h,d,!0,a)&&e;}h=a.a=c;e=nb(h,d,!0,a)&&e;e=nb(h,d,!1,a)&&e;if(b)for(f=0;f<b.length;f++)h=a.a=b[f],e=nb(h,d,!1,a)&&e;return e};
    g.G=function(){G.N.G.call(this);if(this.c){var a=this.c,c;for(c in a.a){for(var d=a.a[c],e=0;e<d.length;e++)Va(d[e]);delete a.a[c];a.b--;}}this.B=null;};g.za=function(a,b,c,d){return this.c.add(String(a),b,!1,c,d)};g.Aa=function(a,b,c,d){return this.c.add(String(a),b,!0,c,d)};
    function nb(a,b,c,d){b=a.c.a[String(b)];if(!b)return !0;b=b.concat();for(var e=!0,f=0;f<b.length;++f){var h=b[f];if(h&&!h.X&&h.capture==c){var l=h.listener,E=h.da||h.src;h.Z&&Ya(a.c,h);e=!1!==l.call(E,d)&&e;}}return e&&0!=d.Ia}var ob=k.JSON.stringify;function pb(a,b){this.c=a;this.f=b;this.b=0;this.a=null;}pb.prototype.get=function(){if(0<this.b){this.b--;var a=this.a;this.a=a.next;a.next=null;}else a=this.c();return a};function qb(){this.b=this.a=null;}var sb=new pb(function(){return new rb},function(a){a.reset();});qb.prototype.add=function(a,b){var c=sb.get();c.set(a,b);this.b?this.b.next=c:this.a=c;this.b=c;};function tb(){var a=ub,b=null;a.a&&(b=a.a,a.a=a.a.next,a.a||(a.b=null),b.next=null);return b}function rb(){this.next=this.b=this.a=null;}rb.prototype.set=function(a,b){this.a=a;this.b=b;this.next=null;};rb.prototype.reset=function(){this.next=this.b=this.a=null;};function vb(a){k.setTimeout(function(){throw a;},0);}function wb(a,b){xb||yb();zb||(xb(),zb=!0);ub.add(a,b);}var xb;function yb(){var a=k.Promise.resolve(void 0);xb=function(){a.then(Ab);};}var zb=!1,ub=new qb;function Ab(){for(var a;a=tb();){try{a.a.call(a.b);}catch(c){vb(c);}var b=sb;b.f(a);100>b.b&&(b.b++,a.next=b.a,b.a=a);}zb=!1;}function Cb(a,b){G.call(this);this.b=a||1;this.a=b||k;this.f=u(this.gb,this);this.g=w();}x(Cb,G);g=Cb.prototype;g.ba=!1;g.L=null;g.gb=function(){if(this.ba){var a=w()-this.g;0<a&&a<.8*this.b?this.L=this.a.setTimeout(this.f,this.b-a):(this.L&&(this.a.clearTimeout(this.L),this.L=null),this.dispatchEvent("tick"),this.ba&&(Db(this),this.start()));}};g.start=function(){this.ba=!0;this.L||(this.L=this.a.setTimeout(this.f,this.b),this.g=w());};function Db(a){a.ba=!1;a.L&&(a.a.clearTimeout(a.L),a.L=null);}
    g.G=function(){Cb.N.G.call(this);Db(this);delete this.a;};function Eb(a,b,c){if("function"==p(a))c&&(a=u(a,c));else if(a&&"function"==typeof a.handleEvent)a=u(a.handleEvent,a);else throw Error("Invalid listener argument");return 2147483647<Number(b)?-1:k.setTimeout(a,b||0)}function Fb(a,b,c){y.call(this);this.f=null!=c?u(a,c):a;this.c=b;this.b=u(this.$a,this);this.a=[];}x(Fb,y);g=Fb.prototype;g.ea=!1;g.U=null;g.Ta=function(a){this.a=arguments;this.U?this.ea=!0:Gb(this);};g.G=function(){Fb.N.G.call(this);this.U&&(k.clearTimeout(this.U),this.U=null,this.ea=!1,this.a=[]);};g.$a=function(){this.U=null;this.ea&&(this.ea=!1,Gb(this));};function Gb(a){a.U=Eb(a.b,a.c);a.f.apply(null,a.a);}function H(a){y.call(this);this.b=a;this.a={};}x(H,y);var Hb=[];function Ib(a,b,c,d){q(c)||(c&&(Hb[0]=c.toString()),c=Hb);for(var e=0;e<c.length;e++){var f=bb(b,c[e],d||a.handleEvent,!1,a.b||a);if(!f)break;a.a[f.key]=f;}}function Jb(a){va(a.a,function(b,c){this.a.hasOwnProperty(c)&&kb(b);},a);a.a={};}H.prototype.G=function(){H.N.G.call(this);Jb(this);};H.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented");};function Kb(){}var I=new G;function Lb(a){C.call(this,"serverreachability",a);}x(Lb,C);function J(a){I.dispatchEvent(new Lb(I,a));}function Mb(a){C.call(this,"statevent",a);}x(Mb,C);function K(a){I.dispatchEvent(new Mb(I,a));}function Nb(a){C.call(this,"timingevent",a);}x(Nb,C);function Ob(a,b){if("function"!=p(a))throw Error("Fn must not be null and must be a function");return k.setTimeout(function(){a();},b)}var Pb={NO_ERROR:0,hb:1,ob:2,nb:3,kb:4,mb:5,pb:6,La:7,TIMEOUT:8,sb:9};var Qb={jb:"complete",wb:"success",Ma:"error",La:"abort",ub:"ready",vb:"readystatechange",TIMEOUT:"timeout",qb:"incrementaldata",tb:"progress",lb:"downloadprogress",xb:"uploadprogress"};function Rb(){}Rb.prototype.a=null;function Sb(a){var b;(b=a.a)||(b=a.a={});return b}function Tb(){}var L={OPEN:"a",ib:"b",Ma:"c",rb:"d"};function Ub(){C.call(this,"d");}x(Ub,C);function Vb(){C.call(this,"c");}x(Vb,C);var Wb;function Xb(){}x(Xb,Rb);Wb=new Xb;function M(a,b,c){this.g=a;this.W=b;this.V=c||1;this.I=new H(this);this.O=Yb;a=Ea?125:void 0;this.P=new Cb(a);this.h=null;this.b=!1;this.l=this.D=this.f=this.F=this.v=this.R=this.i=null;this.j=[];this.a=null;this.A=0;this.c=this.w=null;this.o=-1;this.m=!1;this.J=0;this.B=null;this.s=this.S=this.H=!1;}var Yb=45E3,Zb={},$b={};g=M.prototype;g.setTimeout=function(a){this.O=a;};function ac(a,b,c){a.F=1;a.f=bc(N(b));a.l=c;a.H=!0;cc(a,null);}function dc(a,b,c,d){a.F=1;a.f=bc(N(b));a.l=null;a.H=c;cc(a,d);}
    function cc(a,b){a.v=w();ec(a);a.D=N(a.f);fc(a.D,"t",a.V);a.A=0;a.a=a.g.$(a.g.Y()?b:null);0<a.J&&(a.B=new Fb(u(a.Ja,a,a.a),a.J));Ib(a.I,a.a,"readystatechange",a.cb);b=a.h?wa(a.h):{};a.l?(a.w||(a.w="POST"),b["Content-Type"]="application/x-www-form-urlencoded",a.a.ca(a.D,a.w,a.l,b)):(a.w="GET",a.a.ca(a.D,a.w,null,b));J(1);}g.cb=function(a){a=a.target;var b=this.B;b&&3==O(a)?b.Ta():this.Ja(a);};
    g.Ja=function(a){try{if(a==this.a)a:{var b=O(this.a),c=this.a.ya(),d=this.a.T();if(!(3>b||3==b&&!Ea&&!this.a.aa())){this.m||4!=b||7==c||(8==c||0>=d?J(3):J(2));gc(this);var e=this.a.T();this.o=e;var f=this.a.aa();if(this.b=200==e){if(this.S&&!this.s){b:{if(this.a){var h=hc(this.a,"X-HTTP-Initial-Response");if(h&&!qa(h)){var l=h;break b}}l=null;}if(l)this.s=!0,ic(this,l);else {this.b=!1;this.c=3;K(12);P(this);jc(this);break a}}this.H?(kc(this,b,f),Ea&&this.b&&3==b&&(Ib(this.I,this.P,"tick",this.bb),this.P.start())):
    ic(this,f);4==b&&P(this);this.b&&!this.m&&(4==b?this.g.na(this):(this.b=!1,ec(this)));}else 400==e&&0<f.indexOf("Unknown SID")?(this.c=3,K(12)):(this.c=0,K(13)),P(this),jc(this);}}}catch(E){}finally{}};function kc(a,b,c){for(var d=!0;!a.m&&a.A<c.length;){var e=lc(a,c);if(e==$b){4==b&&(a.c=4,K(14),d=!1);break}else if(e==Zb){a.c=4;K(15);d=!1;break}else ic(a,e);}4==b&&0==c.length&&(a.c=1,K(16),d=!1);a.b=a.b&&d;d||(P(a),jc(a));}
    g.bb=function(){if(this.a){var a=O(this.a),b=this.a.aa();this.A<b.length&&(gc(this),kc(this,a,b),this.b&&4!=a&&ec(this));}};function lc(a,b){var c=a.A,d=b.indexOf("\n",c);if(-1==d)return $b;c=Number(b.substring(c,d));if(isNaN(c))return Zb;d+=1;if(d+c>b.length)return $b;b=b.substr(d,c);a.A=d+c;return b}g.cancel=function(){this.m=!0;P(this);};function ec(a){a.R=w()+a.O;mc(a,a.O);}function mc(a,b){if(null!=a.i)throw Error("WatchDog timer not null");a.i=Ob(u(a.ab,a),b);}
    function gc(a){a.i&&(k.clearTimeout(a.i),a.i=null);}g.ab=function(){this.i=null;var a=w();0<=a-this.R?(2!=this.F&&(J(3),K(17)),P(this),this.c=2,jc(this)):mc(this,this.R-a);};function jc(a){a.g.Ca()||a.m||a.g.na(a);}function P(a){gc(a);var b=a.B;b&&"function"==typeof b.la&&b.la();a.B=null;Db(a.P);Jb(a.I);a.a&&(b=a.a,a.a=null,b.abort(),b.la());}function ic(a,b){try{a.g.Fa(a,b),J(4);}catch(c){}}function nc(a){if(a.C&&"function"==typeof a.C)return a.C();if(m(a))return a.split("");if(ca(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}b=[];c=0;for(d in a)b[c++]=a[d];return b}
    function oc(a,b){if(a.forEach&&"function"==typeof a.forEach)a.forEach(b,void 0);else if(ca(a)||m(a))la(a,b,void 0);else {if(a.K&&"function"==typeof a.K)var c=a.K();else if(a.C&&"function"==typeof a.C)c=void 0;else if(ca(a)||m(a)){c=[];for(var d=a.length,e=0;e<d;e++)c.push(e);}else for(e in c=[],d=0,a)c[d++]=e;d=nc(a);e=d.length;for(var f=0;f<e;f++)b.call(void 0,d[f],c&&c[f],a);}}function Q(a,b){this.b={};this.a=[];this.c=0;var c=arguments.length;if(1<c){if(c%2)throw Error("Uneven number of arguments");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1]);}else if(a)if(a instanceof Q)for(c=a.K(),d=0;d<c.length;d++)this.set(c[d],a.get(c[d]));else for(d in a)this.set(d,a[d]);}g=Q.prototype;g.C=function(){pc(this);for(var a=[],b=0;b<this.a.length;b++)a.push(this.b[this.a[b]]);return a};g.K=function(){pc(this);return this.a.concat()};
    function qc(a){a.b={};a.a.length=0;a.c=0;}function rc(a,b){R(a.b,b)&&(delete a.b[b],a.c--,a.a.length>2*a.c&&pc(a));}function pc(a){if(a.c!=a.a.length){for(var b=0,c=0;b<a.a.length;){var d=a.a[b];R(a.b,d)&&(a.a[c++]=d);b++;}a.a.length=c;}if(a.c!=a.a.length){var e={};for(c=b=0;b<a.a.length;)d=a.a[b],R(e,d)||(a.a[c++]=d,e[d]=1),b++;a.a.length=c;}}g.get=function(a,b){return R(this.b,a)?this.b[a]:b};g.set=function(a,b){R(this.b,a)||(this.c++,this.a.push(a));this.b[a]=b;};
    g.forEach=function(a,b){for(var c=this.K(),d=0;d<c.length;d++){var e=c[d],f=this.get(e);a.call(b,f,e,this);}};function R(a,b){return Object.prototype.hasOwnProperty.call(a,b)}var sc=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function tc(a,b){if(a){a=a.split("&");for(var c=0;c<a.length;c++){var d=a[c].indexOf("="),e=null;if(0<=d){var f=a[c].substring(0,d);e=a[c].substring(d+1);}else f=a[c];b(f,e?decodeURIComponent(e.replace(/\+/g," ")):"");}}}function S(a,b){this.b=this.j=this.f="";this.i=null;this.g=this.a="";this.h=!1;var c;a instanceof S?(this.h=void 0!==b?b:a.h,uc(this,a.f),this.j=a.j,vc(this,a.b),wc(this,a.i),this.a=a.a,xc(this,yc(a.c)),this.g=a.g):a&&(c=String(a).match(sc))?(this.h=!!b,uc(this,c[1]||"",!0),this.j=zc(c[2]||""),vc(this,c[3]||"",!0),wc(this,c[4]),this.a=zc(c[5]||"",!0),xc(this,c[6]||"",!0),this.g=zc(c[7]||"")):(this.h=!!b,this.c=new Ac(null,this.h));}
    S.prototype.toString=function(){var a=[],b=this.f;b&&a.push(Bc(b,Cc,!0),":");var c=this.b;if(c||"file"==b)a.push("//"),(b=this.j)&&a.push(Bc(b,Cc,!0),"@"),a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),c=this.i,null!=c&&a.push(":",String(c));if(c=this.a)this.b&&"/"!=c.charAt(0)&&a.push("/"),a.push(Bc(c,"/"==c.charAt(0)?Dc:Ec,!0));(c=this.c.toString())&&a.push("?",c);(c=this.g)&&a.push("#",Bc(c,Fc));return a.join("")};
    S.prototype.resolve=function(a){var b=N(this),c=!!a.f;c?uc(b,a.f):c=!!a.j;c?b.j=a.j:c=!!a.b;c?vc(b,a.b):c=null!=a.i;var d=a.a;if(c)wc(b,a.i);else if(c=!!a.a){if("/"!=d.charAt(0))if(this.b&&!this.a)d="/"+d;else {var e=b.a.lastIndexOf("/");-1!=e&&(d=b.a.substr(0,e+1)+d);}e=d;if(".."==e||"."==e)d="";else if(z(e,"./")||z(e,"/.")){d=0==e.lastIndexOf("/",0);e=e.split("/");for(var f=[],h=0;h<e.length;){var l=e[h++];"."==l?d&&h==e.length&&f.push(""):".."==l?((1<f.length||1==f.length&&""!=f[0])&&f.pop(),d&&
    h==e.length&&f.push("")):(f.push(l),d=!0);}d=f.join("/");}else d=e;}c?b.a=d:c=""!==a.c.toString();c?xc(b,yc(a.c)):c=!!a.g;c&&(b.g=a.g);return b};function N(a){return new S(a)}function uc(a,b,c){a.f=c?zc(b,!0):b;a.f&&(a.f=a.f.replace(/:$/,""));}function vc(a,b,c){a.b=c?zc(b,!0):b;}function wc(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error("Bad port number "+b);a.i=b;}else a.i=null;}function xc(a,b,c){b instanceof Ac?(a.c=b,Gc(a.c,a.h)):(c||(b=Bc(b,Hc)),a.c=new Ac(b,a.h));}
    function T(a,b,c){a.c.set(b,c);}function fc(a,b,c){q(c)||(c=[String(c)]);Ic(a.c,b,c);}function bc(a){T(a,"zx",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^w()).toString(36));return a}function Jc(a){return a instanceof S?N(a):new S(a,void 0)}function Kc(a,b,c,d){var e=new S(null,void 0);a&&uc(e,a);b&&vc(e,b);c&&wc(e,c);d&&(e.a=d);return e}function zc(a,b){return a?b?decodeURI(a.replace(/%25/g,"%2525")):decodeURIComponent(a):""}
    function Bc(a,b,c){return m(a)?(a=encodeURI(a).replace(b,Lc),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),a):null}function Lc(a){a=a.charCodeAt(0);return "%"+(a>>4&15).toString(16)+(a&15).toString(16)}var Cc=/[#\/\?@]/g,Ec=/[#\?:]/g,Dc=/[#\?]/g,Hc=/[#\?@]/g,Fc=/#/g;function Ac(a,b){this.b=this.a=null;this.c=a||null;this.f=!!b;}function U(a){a.a||(a.a=new Q,a.b=0,a.c&&tc(a.c,function(b,c){a.add(decodeURIComponent(b.replace(/\+/g," ")),c);}));}g=Ac.prototype;
    g.add=function(a,b){U(this);this.c=null;a=V(this,a);var c=this.a.get(a);c||this.a.set(a,c=[]);c.push(b);this.b+=1;return this};function Mc(a,b){U(a);b=V(a,b);R(a.a.b,b)&&(a.c=null,a.b-=a.a.get(b).length,rc(a.a,b));}function Nc(a,b){U(a);b=V(a,b);return R(a.a.b,b)}g.forEach=function(a,b){U(this);this.a.forEach(function(c,d){la(c,function(e){a.call(b,e,d,this);},this);},this);};
    g.K=function(){U(this);for(var a=this.a.C(),b=this.a.K(),c=[],d=0;d<b.length;d++)for(var e=a[d],f=0;f<e.length;f++)c.push(b[d]);return c};g.C=function(a){U(this);var b=[];if(m(a))Nc(this,a)&&(b=oa(b,this.a.get(V(this,a))));else {a=this.a.C();for(var c=0;c<a.length;c++)b=oa(b,a[c]);}return b};g.set=function(a,b){U(this);this.c=null;a=V(this,a);Nc(this,a)&&(this.b-=this.a.get(a).length);this.a.set(a,[b]);this.b+=1;return this};
    g.get=function(a,b){if(!a)return b;a=this.C(a);return 0<a.length?String(a[0]):b};function Ic(a,b,c){Mc(a,b);0<c.length&&(a.c=null,a.a.set(V(a,b),pa(c)),a.b+=c.length);}g.toString=function(){if(this.c)return this.c;if(!this.a)return "";for(var a=[],b=this.a.K(),c=0;c<b.length;c++){var d=b[c],e=encodeURIComponent(String(d));d=this.C(d);for(var f=0;f<d.length;f++){var h=e;""!==d[f]&&(h+="="+encodeURIComponent(String(d[f])));a.push(h);}}return this.c=a.join("&")};
    function yc(a){var b=new Ac;b.c=a.c;a.a&&(b.a=new Q(a.a),b.b=a.b);return b}function V(a,b){b=String(b);a.f&&(b=b.toLowerCase());return b}function Gc(a,b){b&&!a.f&&(U(a),a.c=null,a.a.forEach(function(c,d){var e=d.toLowerCase();d!=e&&(Mc(this,d),Ic(this,e,c));},a));a.f=b;}function Qc(){}function Rc(){}x(Rc,Qc);function Sc(a){this.a=a;this.b=this.h=null;this.g=!1;this.i=null;this.c=-1;this.l=this.f=null;}g=Sc.prototype;g.M=null;function Uc(a){var b=a.a.F.a;if(null!=b)K(4),b?(K(10),Vc(a.a,a,!1)):(K(11),Vc(a.a,a,!0));else {a.b=new M(a,void 0,void 0);a.b.h=a.h;b=a.a;b=Wc(b,b.Y()?a.f:null,a.i);K(4);fc(b,"TYPE","xmlhttp");var c=a.a.j,d=a.a.I;c&&d&&T(b,c,d);dc(a.b,b,!1,a.f);}}g.$=function(a){return this.a.$(a)};g.abort=function(){this.b&&(this.b.cancel(),this.b=null);this.c=-1;};g.Ca=function(){return !1};
    g.Fa=function(a,b){this.c=a.o;if(0==this.M){if(!this.a.o&&(a=a.a)){var c=hc(a,"X-Client-Wire-Protocol");this.l=c?c:null;this.a.j&&(a=hc(a,"X-HTTP-Session-Id"))&&(this.a.I=a);}if(b){try{var d=this.a.ja.a.parse(b);}catch(e){b=this.a;b.m=this.c;W(b,2);return}this.f=d[0];}else b=this.a,b.m=this.c,W(b,2);}else if(1==this.M)if(this.g)K(6);else if("11111"==b){if(K(5),this.g=!0,!B||10<=Number(Na))this.c=200,this.b.cancel(),K(11),Vc(this.a,this,!0);}else K(7),this.g=!1;};
    g.na=function(){this.c=this.b.o;if(this.b.b)0==this.M?(this.M=1,Uc(this)):1==this.M&&(this.g?(K(11),Vc(this.a,this,!0)):(K(10),Vc(this.a,this,!1)));else {0==this.M?K(8):1==this.M&&K(9);var a=this.a;a.m=this.c;W(a,2);}};g.Y=function(){return this.a.Y()};g.ma=function(){return this.a.ma()};function Xc(){this.a=this.b=null;}function Yc(){this.a=new Q;}function Zc(a){var b=typeof a;return "object"==b&&a||"function"==b?"o"+(a[t]||(a[t]=++da)):b.charAt(0)+a}Yc.prototype.add=function(a){this.a.set(Zc(a),a);};Yc.prototype.C=function(){return this.a.C()};function $c(a,b){this.b=a;this.a=b;}function ad(a){this.g=a||bd;k.PerformanceNavigationTiming?(a=k.performance.getEntriesByType("navigation"),a=0<a.length&&("hq"==a[0].nextHopProtocol||"h2"==a[0].nextHopProtocol)):a=!!(k.ka&&k.ka.Da&&k.ka.Da()&&k.ka.Da().zb);this.f=a?this.g:1;this.a=null;1<this.f&&(this.a=new Yc);this.b=null;this.c=[];}var bd=10;function cd(a,b){!a.a&&(z(b,"spdy")||z(b,"quic")||z(b,"h2"))&&(a.f=a.g,a.a=new Yc,a.b&&(dd(a,a.b),a.b=null));}function ed(a){return a.b?!0:a.a?a.a.a.c>=a.f:!1}
    function fd(a){return a.b?1:a.a?a.a.a.c:0}function gd(a,b){a.b?a=a.b==b:a.a?(b=Zc(b),a=R(a.a.a.b,b)):a=!1;return a}function dd(a,b){a.a?a.a.add(b):a.b=b;}function hd(a,b){if(a.b&&a.b==b)a.b=null;else {var c;if(c=a.a)c=Zc(b),c=R(a.a.a.b,c);c&&rc(a.a.a,Zc(b));}}ad.prototype.cancel=function(){this.c=id(this);this.b?(this.b.cancel(),this.b=null):this.a&&0!=this.a.a.c&&(la(this.a.C(),function(a){a.cancel();}),qc(this.a.a));};
    function id(a){if(null!=a.b)return a.c.concat(a.b.j);if(null!=a.a&&0!=a.a.a.c){var b=a.c;la(a.a.C(),function(c){b=b.concat(c.j);});return b}return pa(a.c)}function jd(){}jd.prototype.stringify=function(a){return k.JSON.stringify(a,void 0)};jd.prototype.parse=function(a){return k.JSON.parse(a,void 0)};function kd(){this.a=new jd;}function ld(a,b,c){var d=c||"";try{oc(a,function(e,f){var h=e;r(e)&&(h=ob(e));b.push(d+f+"="+encodeURIComponent(h));});}catch(e){throw b.push(d+"type="+encodeURIComponent("_badmap")),e;}}function md(a,b){var c=new Kb;if(k.Image){var d=new Image;d.onload=v(nd,c,d,"TestLoadImage: loaded",!0,b);d.onerror=v(nd,c,d,"TestLoadImage: error",!1,b);d.onabort=v(nd,c,d,"TestLoadImage: abort",!1,b);d.ontimeout=v(nd,c,d,"TestLoadImage: timeout",!1,b);k.setTimeout(function(){if(d.ontimeout)d.ontimeout();},1E4);d.src=a;}else b(!1);}function nd(a,b,c,d,e){try{b.onload=null,b.onerror=null,b.onabort=null,b.ontimeout=null,e(d);}catch(f){}}var od=k.JSON.parse;function X(a){G.call(this);this.headers=new Q;this.H=a||null;this.b=!1;this.s=this.a=null;this.A="";this.h=0;this.f="";this.g=this.w=this.l=this.v=!1;this.o=0;this.m=null;this.I=pd;this.D=this.F=!1;}x(X,G);var pd="",qd=/^https?$/i,rd=["POST","PUT"];g=X.prototype;
    g.ca=function(a,b,c,d){if(this.a)throw Error("[goog.net.XhrIo] Object is active with another request="+this.A+"; newUri="+a);b=b?b.toUpperCase():"GET";this.A=a;this.f="";this.h=0;this.v=!1;this.b=!0;this.a=new XMLHttpRequest;this.s=this.H?Sb(this.H):Sb(Wb);this.a.onreadystatechange=u(this.Ea,this);try{this.w=!0,this.a.open(b,String(a),!0),this.w=!1;}catch(f){sd(this,f);return}a=c||"";var e=new Q(this.headers);d&&oc(d,function(f,h){e.set(h,f);});d=ma(e.K());c=k.FormData&&a instanceof k.FormData;!(0<=
    ja(rd,b))||d||c||e.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8");e.forEach(function(f,h){this.a.setRequestHeader(h,f);},this);this.I&&(this.a.responseType=this.I);"withCredentials"in this.a&&this.a.withCredentials!==this.F&&(this.a.withCredentials=this.F);try{td(this),0<this.o&&((this.D=ud(this.a))?(this.a.timeout=this.o,this.a.ontimeout=u(this.Ba,this)):this.m=Eb(this.Ba,this.o,this)),this.l=!0,this.a.send(a),this.l=!1;}catch(f){sd(this,f);}};
    function ud(a){return B&&Ma(9)&&aa(a.timeout)&&void 0!==a.ontimeout}function na(a){return "content-type"==a.toLowerCase()}g.Ba=function(){"undefined"!=typeof goog&&this.a&&(this.f="Timed out after "+this.o+"ms, aborting",this.h=8,this.dispatchEvent("timeout"),this.abort(8));};function sd(a,b){a.b=!1;a.a&&(a.g=!0,a.a.abort(),a.g=!1);a.f=b;a.h=5;vd(a);wd(a);}function vd(a){a.v||(a.v=!0,a.dispatchEvent("complete"),a.dispatchEvent("error"));}
    g.abort=function(a){this.a&&this.b&&(this.b=!1,this.g=!0,this.a.abort(),this.g=!1,this.h=a||7,this.dispatchEvent("complete"),this.dispatchEvent("abort"),wd(this));};g.G=function(){this.a&&(this.b&&(this.b=!1,this.g=!0,this.a.abort(),this.g=!1),wd(this,!0));X.N.G.call(this);};g.Ea=function(){this.j||(this.w||this.l||this.g?xd(this):this.Za());};g.Za=function(){xd(this);};
    function xd(a){if(a.b&&"undefined"!=typeof goog&&(!a.s[1]||4!=O(a)||2!=a.T()))if(a.l&&4==O(a))Eb(a.Ea,0,a);else if(a.dispatchEvent("readystatechange"),4==O(a)){a.b=!1;try{var b=a.T();a:switch(b){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var c=!0;break a;default:c=!1;}var d;if(!(d=c)){var e;if(e=0===b){var f=String(a.A).match(sc)[1]||null;if(!f&&k.self&&k.self.location){var h=k.self.location.protocol;f=h.substr(0,h.length-1);}e=!qd.test(f?f.toLowerCase():"");}d=e;}if(d)a.dispatchEvent("complete"),
    a.dispatchEvent("success");else {a.h=6;try{var l=2<O(a)?a.a.statusText:"";}catch(E){l="";}a.f=l+" ["+a.T()+"]";vd(a);}}finally{wd(a);}}}function wd(a,b){if(a.a){td(a);var c=a.a,d=a.s[0]?ba:null;a.a=null;a.s=null;b||a.dispatchEvent("ready");try{c.onreadystatechange=d;}catch(e){}}}function td(a){a.a&&a.D&&(a.a.ontimeout=null);a.m&&(k.clearTimeout(a.m),a.m=null);}function O(a){return a.a?a.a.readyState:0}g.T=function(){try{return 2<O(this)?this.a.status:-1}catch(a){return -1}};
    g.aa=function(){try{return this.a?this.a.responseText:""}catch(a){return ""}};g.Ua=function(a){if(this.a){var b=this.a.responseText;a&&0==b.indexOf(a)&&(b=b.substring(a.length));return od(b)}};function hc(a,b){return a.a?a.a.getResponseHeader(b):null}g.ya=function(){return this.h};g.Xa=function(){return m(this.f)?this.f:String(this.f)};function yd(a){var b="";va(a,function(c,d){b+=d;b+=":";b+=c;b+="\r\n";});return b}function zd(a,b,c){a:{for(d in c){var d=!1;break a}d=!0;}if(d)return a;c=yd(c);if(m(a)){b=encodeURIComponent(String(b));c=null!=c?"="+encodeURIComponent(String(c)):"";if(b+=c){c=a.indexOf("#");0>c&&(c=a.length);d=a.indexOf("?");if(0>d||d>c){d=c;var e="";}else e=a.substring(d+1,c);a=[a.substr(0,d),e,a.substr(c)];c=a[1];a[1]=b?c?c+"&"+b:b:c;a=a[0]+(a[1]?"?"+a[1]:"")+a[2];}return a}T(a,b,c);return a}function Ad(a){this.f=[];this.F=new Xc;this.ga=this.pa=this.B=this.ha=this.a=this.I=this.j=this.V=this.g=this.J=this.i=null;this.Qa=this.P=0;this.Oa=!!n("internalChannelParams.failFast",a);this.ia=this.w=this.s=this.l=this.h=this.c=null;this.oa=!0;this.m=this.ra=this.O=-1;this.S=this.v=this.A=0;this.Na=n("internalChannelParams.baseRetryDelayMs",a)||5E3;this.Ra=n("internalChannelParams.retryDelaySeedMs",a)||1E4;this.Pa=n("internalChannelParams.forwardChannelMaxRetries",a)||2;this.qa=n("internalChannelParams.forwardChannelRequestTimeoutMs",
    a)||2E4;this.Ka=a&&a.Ab||void 0;this.D=void 0;this.R=a&&a.supportsCrossDomainXhr||!1;this.H="";this.b=new ad(a&&a.concurrentRequestLimit);this.ja=new kd;this.o=a&&void 0!==a.backgroundChannelTest?a.backgroundChannelTest:!0;(this.W=a&&a.fastHandshake||!1)&&!this.o&&(this.o=!0);a&&a.forceLongPolling&&(this.oa=!1);this.fa=void 0;}g=Ad.prototype;g.wa=8;g.u=1;
    function Bd(a){Cd(a);if(3==a.u){var b=a.P++,c=N(a.B);T(c,"SID",a.H);T(c,"RID",b);T(c,"TYPE","terminate");Dd(a,c);b=new M(a,b,void 0);b.F=2;b.f=bc(N(c));c=!1;k.navigator&&k.navigator.sendBeacon&&(c=k.navigator.sendBeacon(b.f.toString(),""));!c&&k.Image&&((new Image).src=b.f,c=!0);c||(b.a=b.g.$(null),b.a.ca(b.f));b.v=w();ec(b);}Ed(a);}
    function Cd(a){a.w&&(a.w.abort(),a.w=null);a.a&&(a.a.cancel(),a.a=null);a.l&&(k.clearTimeout(a.l),a.l=null);Fd(a);a.b.cancel();a.h&&(aa(a.h)&&k.clearTimeout(a.h),a.h=null);}function Gd(a,b){a.f.push(new $c(a.Qa++,b));3==a.u&&Hd(a);}g.Ca=function(){return 0==this.u};function Hd(a){ed(a.b)||a.h||(a.h=!0,wb(a.Ha,a),a.A=0);}
    function Id(a,b){if(fd(a.b)>=a.b.f-(a.h?1:0))return !1;if(a.h)return a.f=b.j.concat(a.f),!0;if(1==a.u||2==a.u||a.A>=(a.Oa?0:a.Pa))return !1;a.h=Ob(u(a.Ha,a,b),Jd(a,a.A));a.A++;return !0}
    g.Ha=function(a){if(this.h)if(this.h=null,1==this.u){if(!a){this.P=Math.floor(1E5*Math.random());a=this.P++;var b=new M(this,a,void 0),c=this.i;this.J&&(c?(c=wa(c),ya(c,this.J)):c=this.J);null===this.g&&(b.h=c);var d;if(this.W)a:{for(var e=d=0;e<this.f.length;e++){b:{var f=this.f[e];if("__data__"in f.a&&(f=f.a.__data__,m(f))){f=f.length;break b}f=void 0;}if(void 0===f)break;d+=f;if(4096<d){d=e;break a}if(4096===d||e===this.f.length-1){d=e+1;break a}}d=1E3;}else d=1E3;d=Kd(this,b,d);e=N(this.B);T(e,
    "RID",a);T(e,"CVER",22);this.o&&this.j&&T(e,"X-HTTP-Session-Id",this.j);Dd(this,e);this.g&&c&&zd(e,this.g,c);dd(this.b,b);this.W?(T(e,"$req",d),T(e,"SID","null"),b.S=!0,ac(b,e,null)):ac(b,e,d);this.u=2;}}else 3==this.u&&(a?Ld(this,a):0==this.f.length||ed(this.b)||Ld(this));};
    function Ld(a,b){var c;b?c=b.W:c=a.P++;var d=N(a.B);T(d,"SID",a.H);T(d,"RID",c);T(d,"AID",a.O);Dd(a,d);a.g&&a.i&&zd(d,a.g,a.i);c=new M(a,c,a.A+1);null===a.g&&(c.h=a.i);b&&(a.f=b.j.concat(a.f));b=Kd(a,c,1E3);c.setTimeout(Math.round(.5*a.qa)+Math.round(.5*a.qa*Math.random()));dd(a.b,c);ac(c,d,b);}function Dd(a,b){a.c&&oc({},function(c,d){T(b,d,c);});}
    function Kd(a,b,c){c=Math.min(a.f.length,c);var d=a.c?u(a.c.Sa,a.c,a):null;a:for(var e=a.f,f=-1;;){var h=["count="+c];-1==f?0<c?(f=e[0].b,h.push("ofs="+f)):f=0:h.push("ofs="+f);for(var l=!0,E=0;E<c;E++){var Bb=e[E].b,Tc=e[E].a;Bb-=f;if(0>Bb)f=Math.max(0,e[E].b-100),l=!1;else try{ld(Tc,h,"req"+Bb+"_");}catch(Ud){d&&d(Tc);}}if(l){d=h.join("&");break a}}a=a.f.splice(0,c);b.j=a;return d}function Md(a){a.a||a.l||(a.S=1,wb(a.Ga,a),a.v=0);}
    function Nd(a){if(a.a||a.l||3<=a.v)return !1;a.S++;a.l=Ob(u(a.Ga,a),Jd(a,a.v));a.v++;return !0}g.Ga=function(){this.l=null;this.a=new M(this,"rpc",this.S);null===this.g&&(this.a.h=this.i);this.a.J=0;var a=N(this.pa);T(a,"RID","rpc");T(a,"SID",this.H);T(a,"CI",this.ia?"0":"1");T(a,"AID",this.O);Dd(this,a);T(a,"TYPE","xmlhttp");this.g&&this.i&&zd(a,this.g,this.i);this.D&&this.a.setTimeout(this.D);dc(this.a,a,!0,this.ga);};
    function Vc(a,b,c){var d=b.l;d&&cd(a.b,d);a.ia=a.oa&&c;a.m=b.c;a.B=Wc(a,null,a.ha);Hd(a);}
    g.Fa=function(a,b){if(0!=this.u&&(this.a==a||gd(this.b,a)))if(this.m=a.o,!a.s&&gd(this.b,a)&&3==this.u){try{var c=this.ja.a.parse(b);}catch(f){c=null;}if(q(c)&&3==c.length){b=c;if(0==b[0])a:{if(!this.l){if(this.a)if(this.a.v+3E3<a.v)Fd(this),this.a.cancel(),this.a=null;else break a;Nd(this);K(18);}}else this.ra=b[1],0<this.ra-this.O&&37500>b[2]&&this.ia&&0==this.v&&!this.s&&(this.s=Ob(u(this.Ya,this),6E3));if(1>=fd(this.b)&&this.fa){try{this.fa();}catch(f){}this.fa=void 0;}}else W(this,11);}else if((a.s||
    this.a==a)&&Fd(this),!qa(b))for(b=c=this.ja.a.parse(b),c=0;c<b.length;c++){var d=b[c];this.O=d[0];d=d[1];if(2==this.u)if("c"==d[0]){this.H=d[1];this.ga=d[2];var e=d[3];null!=e&&(this.wa=e);d=d[5];null!=d&&aa(d)&&0<d&&(this.D=1.5*d);this.o&&(d=a.a)&&((e=hc(d,"X-Client-Wire-Protocol"))&&cd(this.b,e),this.j&&(d=hc(d,"X-HTTP-Session-Id")))&&(this.I=d,T(this.B,this.j,d));this.u=3;this.c&&this.c.va();d=a;this.pa=Wc(this,this.Y()?this.ga:null,this.ha);d.s?(hd(this.b,d),(e=this.D)&&d.setTimeout(e),d.i&&(gc(d),
    ec(d)),this.a=d):Md(this);0<this.f.length&&Hd(this);}else "stop"!=d[0]&&"close"!=d[0]||W(this,7);else 3==this.u&&("stop"==d[0]||"close"==d[0]?"stop"==d[0]?W(this,7):Bd(this):"noop"!=d[0]&&this.c&&this.c.ua(d),this.v=0);}};g.Ya=function(){null!=this.s&&(this.s=null,this.a.cancel(),this.a=null,Nd(this),K(19));};function Fd(a){null!=a.s&&(k.clearTimeout(a.s),a.s=null);}
    g.na=function(a){var b=null;if(this.a==a){Fd(this);this.a=null;var c=2;}else if(gd(this.b,a))b=a.j,hd(this.b,a),c=1;else return;this.m=a.o;if(0!=this.u)if(a.b)1==c?(b=w()-a.v,I.dispatchEvent(new Nb(I,a.l?a.l.length:0,b,this.A)),Hd(this)):Md(this);else {var d=a.c;if(3==d||0==d&&0<this.m||!(1==c&&Id(this,a)||2==c&&Nd(this)))switch(b&&0<b.length&&(a=this.b,a.c=a.c.concat(b)),d){case 1:W(this,5);break;case 4:W(this,10);break;case 3:W(this,6);break;default:W(this,2);}}};
    function Jd(a,b){var c=a.Na+Math.floor(Math.random()*a.Ra);a.ma()||(c*=2);return c*b}function W(a,b){if(2==b){var c=null;a.c&&(c=null);var d=u(a.eb,a);c||(c=new S("//www.google.com/images/cleardot.gif"),k.location&&"http"==k.location.protocol||uc(c,"https"),bc(c));md(c.toString(),d);}else K(2);a.u=0;a.c&&a.c.ta(b);Ed(a);Cd(a);}g.eb=function(a){a?K(2):K(1);};function Ed(a){a.u=0;a.m=-1;if(a.c){if(0!=id(a.b).length||0!=a.f.length)a.b.c.length=0,pa(a.f),a.f.length=0;a.c.sa();}}
    function Wc(a,b,c){var d=Jc(c);if(""!=d.b)b&&vc(d,b+"."+d.b),wc(d,d.i);else {var e=k.location,f;b?f=b+"."+e.hostname:f=e.hostname;d=Kc(e.protocol,f,+e.port,c);}a.V&&va(a.V,function(h,l){T(d,l,h);});b=a.j;c=a.I;b&&c&&T(d,b,c);T(d,"VER",a.wa);Dd(a,d);return d}g.$=function(a){if(a&&!this.R)throw Error("Can't create secondary domain capable XhrIo object.");a=new X(this.Ka);a.F=this.R;return a};g.ma=function(){return !!this.c&&!0};g.Y=function(){return this.R};function Od(){}g=Od.prototype;g.va=function(){};
    g.ua=function(){};g.ta=function(){};g.sa=function(){};g.Sa=function(){};function Pd(a){for(var b=arguments[0],c=1;c<arguments.length;c++){var d=arguments[c];if(0==d.lastIndexOf("/",0))b=d;else {var e;(e=""==b)||(e=b.length-1,e=0<=e&&b.indexOf("/",e)==e);e?b+=d:b+="/"+d;}}return b}function Qd(){if(B&&!(10<=Number(Na)))throw Error("Environmental error: no available transport.");}Qd.prototype.a=function(a,b){return new Y(a,b)};
    function Y(a,b){G.call(this);this.a=new Ad(b);this.g=a;this.m=b&&b.fb?b.fb:Pd(this.g,"test");this.b=b&&b.messageUrlParams||null;a=b&&b.messageHeaders||null;b&&b.clientProtocolHeaderRequired&&(a?a["X-Client-Protocol"]="webchannel":a={"X-Client-Protocol":"webchannel"});this.a.i=a;a=b&&b.initMessageHeaders||null;b&&b.messageContentType&&(a?a["X-WebChannel-Content-Type"]=b.messageContentType:a={"X-WebChannel-Content-Type":b.messageContentType});b&&b.xa&&(a?a["X-WebChannel-Client-Profile"]=b.xa:a={"X-WebChannel-Client-Profile":b.xa});
    this.a.J=a;(a=b&&b.httpHeadersOverwriteParam)&&!qa(a)&&(this.a.g=a);this.l=b&&b.supportsCrossDomainXhr||!1;this.h=b&&b.sendRawJson||!1;(b=b&&b.httpSessionIdParam)&&!qa(b)&&(this.a.j=b,a=this.b,null!==a&&b in a&&(a=this.b,b in a&&delete a[b]));this.f=new Z(this);}x(Y,G);g=Y.prototype;g.addEventListener=function(a,b,c,d){Y.N.addEventListener.call(this,a,b,c,d);};g.removeEventListener=function(a,b,c,d){Y.N.removeEventListener.call(this,a,b,c,d);};
    g.Va=function(){this.a.c=this.f;this.l&&(this.a.R=!0);var a=this.a,b=this.m,c=this.g,d=this.b||void 0;K(0);a.ha=c;a.V=d||{};a.o&&(a.F.b=[],a.F.a=!1);a.w=new Sc(a);null===a.g&&(a.w.h=a.i);c=b;a.g&&a.i&&(c=zd(b,a.g,a.i));a=a.w;a.i=c;b=Wc(a.a,null,a.i);K(3);c=a.a.F.b;null!=c?(a.f=c[0],a.M=1,Uc(a)):(fc(b,"MODE","init"),!a.a.o&&a.a.j&&fc(b,"X-HTTP-Session-Id",a.a.j),a.b=new M(a,void 0,void 0),a.b.h=a.h,dc(a.b,b,!1,null),a.M=0);};g.close=function(){Bd(this.a);};
    g.Wa=function(a){if(m(a)){var b={};b.__data__=a;Gd(this.a,b);}else this.h?(b={},b.__data__=ob(a),Gd(this.a,b)):Gd(this.a,a);};g.G=function(){this.a.c=null;delete this.f;Bd(this.a);delete this.a;Y.N.G.call(this);};function Rd(a){Ub.call(this);var b=a.__sm__;if(b){a:{for(var c in b){a=c;break a}a=void 0;}(this.c=a)?(a=this.c,this.data=null!==b&&a in b?b[a]:void 0):this.data=b;}else this.data=a;}x(Rd,Ub);function Sd(){Vb.call(this);this.status=1;}x(Sd,Vb);function Z(a){this.a=a;}x(Z,Od);Z.prototype.va=function(){this.a.dispatchEvent("a");};
    Z.prototype.ua=function(a){this.a.dispatchEvent(new Rd(a));};Z.prototype.ta=function(a){this.a.dispatchEvent(new Sd(a));};Z.prototype.sa=function(){this.a.dispatchEvent("b");};var Td=v(function(a,b){function c(){}c.prototype=a.prototype;var d=new c;a.apply(d,Array.prototype.slice.call(arguments,1));return d},Qd);/*

     Copyright 2017 Google Inc.

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
    */
    Qd.prototype.createWebChannel=Qd.prototype.a;Y.prototype.send=Y.prototype.Wa;Y.prototype.open=Y.prototype.Va;Y.prototype.close=Y.prototype.close;Pb.NO_ERROR=0;Pb.TIMEOUT=8;Pb.HTTP_ERROR=6;Qb.COMPLETE="complete";Tb.EventType=L;L.OPEN="a";L.CLOSE="b";L.ERROR="c";L.MESSAGE="d";G.prototype.listen=G.prototype.za;X.prototype.listenOnce=X.prototype.Aa;X.prototype.getLastError=X.prototype.Xa;X.prototype.getLastErrorCode=X.prototype.ya;X.prototype.getStatus=X.prototype.T;X.prototype.getResponseJson=X.prototype.Ua;
    X.prototype.getResponseText=X.prototype.aa;X.prototype.send=X.prototype.ca;var tmp={createWebChannelTransport:Td,ErrorCode:Pb,EventType:Qb,WebChannel:Tb,XhrIo:X};
    //# sourceMappingURL=index.esm.js.map

    var index_cjs$4 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, '__esModule', { value: true });

    function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

    var t = _interopDefault(index_cjs$2);






    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** The semver (www.semver.org) version of the SDK. */ var _ = t.SDK_VERSION, I = /** @class */ function() {
        function t(t) {
            this.uid = t;
        }
        return t.prototype.t = function() {
            return null != this.uid;
        }, 
        /**
         * Returns a key representing this user, suitable for inclusion in a
         * dictionary.
         */
        t.prototype.i = function() {
            return this.t() ? "uid:" + this.uid : "anonymous-user";
        }, t.prototype.isEqual = function(t) {
            return t.uid === this.uid;
        }, 
        /** A user with a null UID. */
        t.UNAUTHENTICATED = new t(null), 
        // TODO(mikelehen): Look into getting a proper uid-equivalent for
        // non-FirebaseAuth providers.
        t.u = new t("google-credentials-uid"), t.s = new t("first-party-uid"), t;
    }(), T = {
        // Causes are copied from:
        // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
        /** Not an error; returned on success. */
        OK: "ok",
        /** The operation was cancelled (typically by the caller). */
        CANCELLED: "cancelled",
        /** Unknown error or an error from a different error domain. */
        UNKNOWN: "unknown",
        /**
         * Client specified an invalid argument. Note that this differs from
         * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
         * problematic regardless of the state of the system (e.g., a malformed file
         * name).
         */
        INVALID_ARGUMENT: "invalid-argument",
        /**
         * Deadline expired before operation could complete. For operations that
         * change the state of the system, this error may be returned even if the
         * operation has completed successfully. For example, a successful response
         * from a server could have been delayed long enough for the deadline to
         * expire.
         */
        DEADLINE_EXCEEDED: "deadline-exceeded",
        /** Some requested entity (e.g., file or directory) was not found. */
        NOT_FOUND: "not-found",
        /**
         * Some entity that we attempted to create (e.g., file or directory) already
         * exists.
         */
        ALREADY_EXISTS: "already-exists",
        /**
         * The caller does not have permission to execute the specified operation.
         * PERMISSION_DENIED must not be used for rejections caused by exhausting
         * some resource (use RESOURCE_EXHAUSTED instead for those errors).
         * PERMISSION_DENIED must not be used if the caller can not be identified
         * (use UNAUTHENTICATED instead for those errors).
         */
        PERMISSION_DENIED: "permission-denied",
        /**
         * The request does not have valid authentication credentials for the
         * operation.
         */
        UNAUTHENTICATED: "unauthenticated",
        /**
         * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
         * entire file system is out of space.
         */
        RESOURCE_EXHAUSTED: "resource-exhausted",
        /**
         * Operation was rejected because the system is not in a state required for
         * the operation's execution. For example, directory to be deleted may be
         * non-empty, an rmdir operation is applied to a non-directory, etc.
         *
         * A litmus test that may help a service implementor in deciding
         * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
         *  (a) Use UNAVAILABLE if the client can retry just the failing call.
         *  (b) Use ABORTED if the client should retry at a higher-level
         *      (e.g., restarting a read-modify-write sequence).
         *  (c) Use FAILED_PRECONDITION if the client should not retry until
         *      the system state has been explicitly fixed. E.g., if an "rmdir"
         *      fails because the directory is non-empty, FAILED_PRECONDITION
         *      should be returned since the client should not retry unless
         *      they have first fixed up the directory by deleting files from it.
         *  (d) Use FAILED_PRECONDITION if the client performs conditional
         *      REST Get/Update/Delete on a resource and the resource on the
         *      server does not match the condition. E.g., conflicting
         *      read-modify-write on the same resource.
         */
        FAILED_PRECONDITION: "failed-precondition",
        /**
         * The operation was aborted, typically due to a concurrency issue like
         * sequencer check failures, transaction aborts, etc.
         *
         * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
         * and UNAVAILABLE.
         */
        ABORTED: "aborted",
        /**
         * Operation was attempted past the valid range. E.g., seeking or reading
         * past end of file.
         *
         * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
         * if the system state changes. For example, a 32-bit file system will
         * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
         * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
         * an offset past the current file size.
         *
         * There is a fair bit of overlap between FAILED_PRECONDITION and
         * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
         * when it applies so that callers who are iterating through a space can
         * easily look for an OUT_OF_RANGE error to detect when they are done.
         */
        OUT_OF_RANGE: "out-of-range",
        /** Operation is not implemented or not supported/enabled in this service. */
        UNIMPLEMENTED: "unimplemented",
        /**
         * Internal errors. Means some invariants expected by underlying System has
         * been broken. If you see one of these errors, Something is very broken.
         */
        INTERNAL: "internal",
        /**
         * The service is currently unavailable. This is a most likely a transient
         * condition and may be corrected by retrying with a backoff.
         *
         * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
         * and UNAVAILABLE.
         */
        UNAVAILABLE: "unavailable",
        /** Unrecoverable data loss or corruption. */
        DATA_LOSS: "data-loss"
    }, E = /** @class */ function(t) {
        function i(n, i) {
            var e = t.call(this, i) || this;
            return e.code = n, e.message = i, e.name = "FirebaseError", 
            // HACK: We write a toString property directly because Error is not a real
            // class and so inheritance does not work correctly. We could alternatively
            // do the same "back-door inheritance" trick that FirebaseError does.
            e.toString = function() {
                return e.name + ": [code=" + e.code + "]: " + e.message;
            }, e;
        }
        return tslib_es6.__extends(i, t), i;
    }(Error), D = function(t, n) {
        this.user = n, this.type = "OAuth", this.o = {}, 
        // Set the headers using Object Literal notation to avoid minification
        this.o.Authorization = "Bearer " + t;
    }, R = /** @class */ function() {
        function t() {
            /**
             * Stores the listener registered with setChangeListener()
             * This isn't actually necessary since the UID never changes, but we use this
             * to verify the listen contract is adhered to in tests.
             */
            this.h = null;
        }
        return t.prototype.getToken = function() {
            return Promise.resolve(null);
        }, t.prototype.l = function() {}, t.prototype.v = function(t) {
            Wn(!this.h, "Can only call setChangeListener() once."), this.h = t, 
            // Fire with initial user.
            t(I.UNAUTHENTICATED);
        }, t.prototype.m = function() {
            Wn(null !== this.h, "removeChangeListener() when no listener registered"), this.h = null;
        }, t;
    }(), S = /** @class */ function() {
        function t(t) {
            var n = this;
            /**
             * The auth token listener registered with FirebaseApp, retained here so we
             * can unregister it.
             */        this.p = null, 
            /** Tracks the current User. */
            this.currentUser = I.UNAUTHENTICATED, this.g = !1, 
            /**
             * Counter used to detect if the token changed while a getToken request was
             * outstanding.
             */
            this._ = 0, 
            /** The listener registered with setChangeListener(). */
            this.h = null, this.forceRefresh = !1, this.p = function() {
                n._++, n.currentUser = n.I(), n.g = !0, n.h && n.h(n.currentUser);
            }, this._ = 0, this.auth = t.getImmediate({
                optional: !0
            }), this.auth ? this.auth.addAuthTokenListener(this.p) : (
            // if auth is not available, invoke tokenListener once with null token
            this.p(null), t.get().then((function(t) {
                n.auth = t, n.p && 
                // tokenListener can be removed by removeChangeListener()
                n.auth.addAuthTokenListener(n.p);
            }), (function() {
                /* this.authProvider.get() never rejects */})));
        }
        return t.prototype.getToken = function() {
            var t = this;
            Wn(null != this.p, "getToken cannot be called after listener removed.");
            // Take note of the current value of the tokenCounter so that this method
            // can fail (with an ABORTED error) if there is a token change while the
            // request is outstanding.
            var n = this._, i = this.forceRefresh;
            return this.forceRefresh = !1, this.auth ? this.auth.getToken(i).then((function(i) {
                // Cancel the request since the token changed while the request was
                // outstanding so the response is potentially for a previous user (which
                // user, we can't be sure).
                if (t._ !== n) throw new E(T.ABORTED, "getToken aborted due to token change.");
                return i ? (Wn("string" == typeof i.accessToken, "Invalid tokenData returned from getToken():" + i), 
                new D(i.accessToken, t.currentUser)) : null;
            })) : Promise.resolve(null);
        }, t.prototype.l = function() {
            this.forceRefresh = !0;
        }, t.prototype.v = function(t) {
            Wn(!this.h, "Can only call setChangeListener() once."), this.h = t, 
            // Fire the initial event
            this.g && t(this.currentUser);
        }, t.prototype.m = function() {
            Wn(null != this.p, "removeChangeListener() called twice"), Wn(null !== this.h, "removeChangeListener() called when no listener registered"), 
            this.auth && this.auth.removeAuthTokenListener(this.p), this.p = null, this.h = null;
        }, 
        // Auth.getUid() can return null even with a user logged in. It is because
        // getUid() is synchronous, but the auth code populating Uid is asynchronous.
        // This method should only be called in the AuthTokenListener callback
        // to guarantee to get the actual user.
        t.prototype.I = function() {
            var t = this.auth && this.auth.getUid();
            return Wn(null === t || "string" == typeof t, "Received invalid UID: " + t), new I(t);
        }, t;
    }(), A = /** @class */ function() {
        function t(t, n) {
            this.T = t, this.D = n, this.type = "FirstParty", this.user = I.s;
        }
        return Object.defineProperty(t.prototype, "o", {
            get: function() {
                var t = {
                    "X-Goog-AuthUser": this.D
                }, n = this.T.auth.R([]);
                return n && (t.Authorization = n), t;
            },
            enumerable: !0,
            configurable: !0
        }), t;
    }(), C = /** @class */ function() {
        function t(t, n) {
            this.T = t, this.D = n;
        }
        return t.prototype.getToken = function() {
            return Promise.resolve(new A(this.T, this.D));
        }, t.prototype.v = function(t) {
            // Fire with initial uid.
            t(I.s);
        }, t.prototype.m = function() {}, t.prototype.l = function() {}, t;
    }();

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Simple wrapper around a nullable UID. Mostly exists to make code more
     * readable.
     */
    /**
     * Builds a CredentialsProvider depending on the type of
     * the credentials passed in.
     */
    function P(t) {
        if (!t) return new R;
        switch (t.type) {
          case "gapi":
            var n = t.S;
            // Make sure this really is a Gapi client.
                    return Wn(!("object" != typeof n || null === n || !n.auth || !n.auth.getAuthHeaderValueForFirstParty), "unexpected gapi interface"), 
            new C(n, t.D || "0");

          case "provider":
            return t.S;

          default:
            throw new E(T.INVALID_ARGUMENT, "makeCredentialsProvider failed due to invalid credential type");
        }
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // The earlist date supported by Firestore timestamps (0001-01-01T00:00:00Z).
    var V = /** @class */ function() {
        function t(t, n) {
            if (this.seconds = t, this.nanoseconds = n, n < 0) throw new E(T.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + n);
            if (n >= 1e9) throw new E(T.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + n);
            if (t < -62135596800) throw new E(T.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
            // This will break in the year 10,000.
                    if (t >= 253402300800) throw new E(T.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
        }
        return t.now = function() {
            return t.fromMillis(Date.now());
        }, t.fromDate = function(n) {
            return t.fromMillis(n.getTime());
        }, t.fromMillis = function(n) {
            var i = Math.floor(n / 1e3);
            return new t(i, 1e6 * (n - 1e3 * i));
        }, t.prototype.toDate = function() {
            return new Date(this.toMillis());
        }, t.prototype.toMillis = function() {
            return 1e3 * this.seconds + this.nanoseconds / 1e6;
        }, t.prototype.A = function(t) {
            return this.seconds === t.seconds ? Kn(this.nanoseconds, t.nanoseconds) : Kn(this.seconds, t.seconds);
        }, t.prototype.isEqual = function(t) {
            return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;
        }, t.prototype.toString = function() {
            return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
        }, t.prototype.valueOf = function() {
            // This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is
            // translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded
            // with zeroes to be a consistent length. Strings with this format then have a lexiographical
            // ordering that matches the expected ordering. The <seconds> translation is done to avoid
            // having a leading negative sign (i.e. a leading '-' character) in its string representation,
            // which would affect its lexiographical ordering.
            var t = this.seconds - -62135596800;
            // Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.
                    return String(t).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
        }, t;
    }(), k = /** @class */ function() {
        function t(t) {
            this.timestamp = t;
        }
        // TODO(b/34176344): Once we no longer need to use the old alpha protos,
        // delete this constructor and use a timestamp-backed version everywhere.
            return t.C = function(n) {
            var i = Math.floor(n / 1e6);
            return new t(new V(i, n % 1e6 * 1e3));
        }, t.P = function(n) {
            return new t(n);
        }, t.V = function() {
            return t.MIN;
        }, t.prototype.k = function(t) {
            return this.timestamp.A(t.timestamp);
        }, t.prototype.isEqual = function(t) {
            return this.timestamp.isEqual(t.timestamp);
        }, 
        /** Returns a number representation of the version for use in spec tests. */
        t.prototype.N = function() {
            // Convert to microseconds.
            return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
        }, t.prototype.toString = function() {
            return "SnapshotVersion(" + this.timestamp.toString() + ")";
        }, t.prototype.O = function() {
            return this.timestamp;
        }, t.MIN = new t(new V(0, 0)), t;
    }(), N = /** @class */ function() {
        function t(t, n, i) {
            void 0 === n ? n = 0 : n > t.length && Gn("offset " + n + " out of range " + t.length), 
            void 0 === i ? i = t.length - n : i > t.length - n && Gn("length " + i + " out of range " + (t.length - n)), 
            this.segments = t, this.offset = n, this.len = i;
        }
        return Object.defineProperty(t.prototype, "length", {
            get: function() {
                return this.len;
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.isEqual = function(n) {
            return 0 === t.F(this, n);
        }, t.prototype.child = function(n) {
            var i = this.segments.slice(this.offset, this.limit());
            return n instanceof t ? n.forEach((function(t) {
                i.push(t);
            })) : i.push(n), this.U(i);
        }, 
        /** The index of one past the last segment of the path. */
        t.prototype.limit = function() {
            return this.offset + this.length;
        }, t.prototype.j = function(t) {
            return t = void 0 === t ? 1 : t, Wn(this.length >= t, "Can't call popFirst() with less segments"), 
            this.U(this.segments, this.offset + t, this.length - t);
        }, t.prototype.L = function() {
            return Wn(!this.M(), "Can't call popLast() on empty path"), this.U(this.segments, this.offset, this.length - 1);
        }, t.prototype.q = function() {
            return Wn(!this.M(), "Can't call firstSegment() on empty path"), this.segments[this.offset];
        }, t.prototype.B = function() {
            return this.get(this.length - 1);
        }, t.prototype.get = function(t) {
            return Wn(t < this.length, "Index out of range"), this.segments[this.offset + t];
        }, t.prototype.M = function() {
            return 0 === this.length;
        }, t.prototype.G = function(t) {
            if (t.length < this.length) return !1;
            for (var n = 0; n < this.length; n++) if (this.get(n) !== t.get(n)) return !1;
            return !0;
        }, t.prototype.W = function(t) {
            if (this.length + 1 !== t.length) return !1;
            for (var n = 0; n < this.length; n++) if (this.get(n) !== t.get(n)) return !1;
            return !0;
        }, t.prototype.forEach = function(t) {
            for (var n = this.offset, i = this.limit(); n < i; n++) t(this.segments[n]);
        }, t.prototype.K = function() {
            return this.segments.slice(this.offset, this.limit());
        }, t.F = function(t, n) {
            for (var i = Math.min(t.length, n.length), e = 0; e < i; e++) {
                var r = t.get(e), u = n.get(e);
                if (r < u) return -1;
                if (r > u) return 1;
            }
            return t.length < n.length ? -1 : t.length > n.length ? 1 : 0;
        }, t;
    }(), O = /** @class */ function(t) {
        function i() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return tslib_es6.__extends(i, t), i.prototype.U = function(t, n, e) {
            return new i(t, n, e);
        }, i.prototype.J = function() {
            // NOTE: The client is ignorant of any path segments containing escape
            // sequences (e.g. __id123__) and just passes them through raw (they exist
            // for legacy reasons and should not be used frequently).
            return this.K().join("/");
        }, i.prototype.toString = function() {
            return this.J();
        }, 
        /**
         * Creates a resource path from the given slash-delimited string.
         */
        i.H = function(t) {
            // NOTE: The client is ignorant of any path segments containing escape
            // sequences (e.g. __id123__) and just passes them through raw (they exist
            // for legacy reasons and should not be used frequently).
            if (t.indexOf("//") >= 0) throw new E(T.INVALID_ARGUMENT, "Invalid path (" + t + "). Paths must not contain // in them.");
            // We may still have an empty segment at the beginning or end if they had a
            // leading or trailing slash (which we allow).
                    return new i(t.split("/").filter((function(t) {
                return t.length > 0;
            })));
        }, i.Y = new i([]), i;
    }(N), F = /^[_a-zA-Z][_a-zA-Z0-9]*$/, U = /** @class */ function(t) {
        function i() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return tslib_es6.__extends(i, t), i.prototype.U = function(t, n, e) {
            return new i(t, n, e);
        }, 
        /**
         * Returns true if the string could be used as a segment in a field path
         * without escaping.
         */
        i.X = function(t) {
            return F.test(t);
        }, i.prototype.J = function() {
            return this.K().map((function(t) {
                return t = t.replace("\\", "\\\\").replace("`", "\\`"), i.X(t) || (t = "`" + t + "`"), 
                t;
            })).join(".");
        }, i.prototype.toString = function() {
            return this.J();
        }, 
        /**
         * Returns true if this field references the key of a document.
         */
        i.prototype.$ = function() {
            return 1 === this.length && "__name__" === this.get(0);
        }, 
        /**
         * The field designating the key of a document.
         */
        i.Z = function() {
            return new i([ "__name__" ]);
        }, 
        /**
         * Parses a field string from the given server-formatted string.
         *
         * - Splitting the empty string is not allowed (for now at least).
         * - Empty segments within the string (e.g. if there are two consecutive
         *   separators) are not allowed.
         *
         * TODO(b/37244157): we should make this more strict. Right now, it allows
         * non-identifier path components, even if they aren't escaped.
         */
        i.tt = function(t) {
            for (var n = [], e = "", r = 0, u = function() {
                if (0 === e.length) throw new E(T.INVALID_ARGUMENT, "Invalid field path (" + t + "). Paths must not be empty, begin with '.', end with '.', or contain '..'");
                n.push(e), e = "";
            }, s = !1; r < t.length; ) {
                var o = t[r];
                if ("\\" === o) {
                    if (r + 1 === t.length) throw new E(T.INVALID_ARGUMENT, "Path has trailing escape character: " + t);
                    var h = t[r + 1];
                    if ("\\" !== h && "." !== h && "`" !== h) throw new E(T.INVALID_ARGUMENT, "Path has invalid escape sequence: " + t);
                    e += h, r += 2;
                } else "`" === o ? (s = !s, r++) : "." !== o || s ? (e += o, r++) : (u(), r++);
            }
            if (u(), s) throw new E(T.INVALID_ARGUMENT, "Unterminated ` in path: " + t);
            return new i(n);
        }, i.Y = new i([]), i;
    }(N), j = /** @class */ function() {
        function t(n) {
            this.path = n, Wn(t.nt(n), "Invalid DocumentKey with an odd number of segments: " + n.K().join("/"));
        }
        return t.it = function(n) {
            return new t(O.H(n).j(5));
        }, 
        /** Returns true if the document is in the specified collectionId. */
        t.prototype.et = function(t) {
            return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;
        }, t.prototype.isEqual = function(t) {
            return null !== t && 0 === O.F(this.path, t.path);
        }, t.prototype.toString = function() {
            return this.path.toString();
        }, t.F = function(t, n) {
            return O.F(t.path, n.path);
        }, t.nt = function(t) {
            return t.length % 2 == 0;
        }, 
        /**
         * Creates and returns a new document key with the given segments.
         *
         * @param segments The segments of the path to the document
         * @return A new instance of DocumentKey
         */
        t.rt = function(n) {
            return new t(new O(n.slice()));
        }, t.EMPTY = new t(new O([])), t;
    }(), x = /** @class */ function() {
        function t(t, n) {
            this.F = t, this.root = n || M.EMPTY;
        }
        // Returns a copy of the map, with the specified key/value added or replaced.
            return t.prototype.ut = function(n, i) {
            return new t(this.F, this.root.ut(n, i, this.F).copy(null, null, M.st, null, null));
        }, 
        // Returns a copy of the map, with the specified key removed.
        t.prototype.remove = function(n) {
            return new t(this.F, this.root.remove(n, this.F).copy(null, null, M.st, null, null));
        }, 
        // Returns the value of the node with the given key, or null.
        t.prototype.get = function(t) {
            for (var n = this.root; !n.M(); ) {
                var i = this.F(t, n.key);
                if (0 === i) return n.value;
                i < 0 ? n = n.left : i > 0 && (n = n.right);
            }
            return null;
        }, 
        // Returns the index of the element in this sorted map, or -1 if it doesn't
        // exist.
        t.prototype.indexOf = function(t) {
            for (
            // Number of nodes that were pruned when descending right
            var n = 0, i = this.root; !i.M(); ) {
                var e = this.F(t, i.key);
                if (0 === e) return n + i.left.size;
                e < 0 ? i = i.left : (
                // Count all nodes left of the node plus the node itself
                n += i.left.size + 1, i = i.right);
            }
            // Node not found
                    return -1;
        }, t.prototype.M = function() {
            return this.root.M();
        }, Object.defineProperty(t.prototype, "size", {
            // Returns the total number of nodes in the map.
            get: function() {
                return this.root.size;
            },
            enumerable: !0,
            configurable: !0
        }), 
        // Returns the minimum key in the map.
        t.prototype.ot = function() {
            return this.root.ot();
        }, 
        // Returns the maximum key in the map.
        t.prototype.ht = function() {
            return this.root.ht();
        }, 
        // Traverses the map in key order and calls the specified action function
        // for each key/value pair. If action returns true, traversal is aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        t.prototype.ct = function(t) {
            return this.root.ct(t);
        }, t.prototype.forEach = function(t) {
            this.ct((function(n, i) {
                return t(n, i), !1;
            }));
        }, t.prototype.toString = function() {
            var t = [];
            return this.ct((function(n, i) {
                return t.push(n + ":" + i), !1;
            })), "{" + t.join(", ") + "}";
        }, 
        // Traverses the map in reverse key order and calls the specified action
        // function for each key/value pair. If action returns true, traversal is
        // aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        t.prototype.at = function(t) {
            return this.root.at(t);
        }, 
        // Returns an iterator over the SortedMap.
        t.prototype.ft = function() {
            return new L(this.root, null, this.F, !1);
        }, t.prototype.lt = function(t) {
            return new L(this.root, t, this.F, !1);
        }, t.prototype.dt = function() {
            return new L(this.root, null, this.F, !0);
        }, t.prototype.vt = function(t) {
            return new L(this.root, t, this.F, !0);
        }, t;
    }(), L = /** @class */ function() {
        function t(t, n, i, e) {
            this.wt = e, this.pt = [];
            for (var r = 1; !t.M(); ) if (r = n ? i(t.key, n) : 1, 
            // flip the comparison if we're going in reverse
            e && (r *= -1), r < 0) 
            // This node is less than our start key. ignore it
            t = this.wt ? t.left : t.right; else {
                if (0 === r) {
                    // This node is exactly equal to our start key. Push it on the stack,
                    // but stop iterating;
                    this.pt.push(t);
                    break;
                }
                // This node is greater than our start key, add it to the stack and move
                // to the next one
                this.pt.push(t), t = this.wt ? t.right : t.left;
            }
        }
        return t.prototype.bt = function() {
            Wn(this.pt.length > 0, "getNext() called on iterator when hasNext() is false.");
            var t = this.pt.pop(), n = {
                key: t.key,
                value: t.value
            };
            if (this.wt) for (t = t.left; !t.M(); ) this.pt.push(t), t = t.right; else for (t = t.right; !t.M(); ) this.pt.push(t), 
            t = t.left;
            return n;
        }, t.prototype.gt = function() {
            return this.pt.length > 0;
        }, t.prototype.yt = function() {
            if (0 === this.pt.length) return null;
            var t = this.pt[this.pt.length - 1];
            return {
                key: t.key,
                value: t.value
            };
        }, t;
    }(), M = /** @class */ function() {
        function t(n, i, e, r, u) {
            this.key = n, this.value = i, this.color = null != e ? e : t.RED, this.left = null != r ? r : t.EMPTY, 
            this.right = null != u ? u : t.EMPTY, this.size = this.left.size + 1 + this.right.size;
        }
        // Returns a copy of the current node, optionally replacing pieces of it.
            return t.prototype.copy = function(n, i, e, r, u) {
            return new t(null != n ? n : this.key, null != i ? i : this.value, null != e ? e : this.color, null != r ? r : this.left, null != u ? u : this.right);
        }, t.prototype.M = function() {
            return !1;
        }, 
        // Traverses the tree in key order and calls the specified action function
        // for each node. If action returns true, traversal is aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        t.prototype.ct = function(t) {
            return this.left.ct(t) || t(this.key, this.value) || this.right.ct(t);
        }, 
        // Traverses the tree in reverse key order and calls the specified action
        // function for each node. If action returns true, traversal is aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        t.prototype.at = function(t) {
            return this.right.at(t) || t(this.key, this.value) || this.left.at(t);
        }, 
        // Returns the minimum node in the tree.
        t.prototype.min = function() {
            return this.left.M() ? this : this.left.min();
        }, 
        // Returns the maximum key in the tree.
        t.prototype.ot = function() {
            return this.min().key;
        }, 
        // Returns the maximum key in the tree.
        t.prototype.ht = function() {
            return this.right.M() ? this.key : this.right.ht();
        }, 
        // Returns new tree, with the key/value added.
        t.prototype.ut = function(t, n, i) {
            var e = this, r = i(t, e.key);
            return (e = r < 0 ? e.copy(null, null, null, e.left.ut(t, n, i), null) : 0 === r ? e.copy(null, n, null, null, null) : e.copy(null, null, null, null, e.right.ut(t, n, i)))._t();
        }, t.prototype.It = function() {
            if (this.left.M()) return t.EMPTY;
            var n = this;
            return n.left.Tt() || n.left.left.Tt() || (n = n.Et()), (n = n.copy(null, null, null, n.left.It(), null))._t();
        }, 
        // Returns new tree, with the specified item removed.
        t.prototype.remove = function(n, i) {
            var e, r = this;
            if (i(n, r.key) < 0) r.left.M() || r.left.Tt() || r.left.left.Tt() || (r = r.Et()), 
            r = r.copy(null, null, null, r.left.remove(n, i), null); else {
                if (r.left.Tt() && (r = r.Dt()), r.right.M() || r.right.Tt() || r.right.left.Tt() || (r = r.Rt()), 
                0 === i(n, r.key)) {
                    if (r.right.M()) return t.EMPTY;
                    e = r.right.min(), r = r.copy(e.key, e.value, null, null, r.right.It());
                }
                r = r.copy(null, null, null, null, r.right.remove(n, i));
            }
            return r._t();
        }, t.prototype.Tt = function() {
            return this.color;
        }, 
        // Returns new tree after performing any needed rotations.
        t.prototype._t = function() {
            var t = this;
            return t.right.Tt() && !t.left.Tt() && (t = t.St()), t.left.Tt() && t.left.left.Tt() && (t = t.Dt()), 
            t.left.Tt() && t.right.Tt() && (t = t.At()), t;
        }, t.prototype.Et = function() {
            var t = this.At();
            return t.right.left.Tt() && (t = (t = (t = t.copy(null, null, null, null, t.right.Dt())).St()).At()), 
            t;
        }, t.prototype.Rt = function() {
            var t = this.At();
            return t.left.left.Tt() && (t = (t = t.Dt()).At()), t;
        }, t.prototype.St = function() {
            var n = this.copy(null, null, t.RED, null, this.right.left);
            return this.right.copy(null, null, this.color, n, null);
        }, t.prototype.Dt = function() {
            var n = this.copy(null, null, t.RED, this.left.right, null);
            return this.left.copy(null, null, this.color, null, n);
        }, t.prototype.At = function() {
            var t = this.left.copy(null, null, !this.left.color, null, null), n = this.right.copy(null, null, !this.right.color, null, null);
            return this.copy(null, null, !this.color, t, n);
        }, 
        // For testing.
        t.prototype.Ct = function() {
            var t = this.Pt();
            return Math.pow(2, t) <= this.size + 1;
        }, 
        // In a balanced RB tree, the black-depth (number of black nodes) from root to
        // leaves is equal on both sides.  This function verifies that or asserts.
        t.prototype.Pt = function() {
            if (this.Tt() && this.left.Tt()) throw Gn("Red node has red child(" + this.key + "," + this.value + ")");
            if (this.right.Tt()) throw Gn("Right child of (" + this.key + "," + this.value + ") is red");
            var t = this.left.Pt();
            if (t !== this.right.Pt()) throw Gn("Black depths differ");
            return t + (this.Tt() ? 0 : 1);
        }, 
        // Empty node is shared between all LLRB trees.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        t.EMPTY = null, t.RED = !0, t.st = !1, t;
    }(), q = /** @class */ function() {
        function t() {
            this.size = 0;
        }
        return Object.defineProperty(t.prototype, "key", {
            get: function() {
                throw Gn("LLRBEmptyNode has no key.");
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(t.prototype, "value", {
            get: function() {
                throw Gn("LLRBEmptyNode has no value.");
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(t.prototype, "color", {
            get: function() {
                throw Gn("LLRBEmptyNode has no color.");
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(t.prototype, "left", {
            get: function() {
                throw Gn("LLRBEmptyNode has no left child.");
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(t.prototype, "right", {
            get: function() {
                throw Gn("LLRBEmptyNode has no right child.");
            },
            enumerable: !0,
            configurable: !0
        }), 
        // Returns a copy of the current node.
        t.prototype.copy = function(t, n, i, e, r) {
            return this;
        }, 
        // Returns a copy of the tree, with the specified key/value added.
        t.prototype.ut = function(t, n, i) {
            return new M(t, n);
        }, 
        // Returns a copy of the tree, with the specified key removed.
        t.prototype.remove = function(t, n) {
            return this;
        }, t.prototype.M = function() {
            return !0;
        }, t.prototype.ct = function(t) {
            return !1;
        }, t.prototype.at = function(t) {
            return !1;
        }, t.prototype.ot = function() {
            return null;
        }, t.prototype.ht = function() {
            return null;
        }, t.prototype.Tt = function() {
            return !1;
        }, 
        // For testing.
        t.prototype.Ct = function() {
            return !0;
        }, t.prototype.Pt = function() {
            return 0;
        }, t;
    }();

    // end LLRBEmptyNode
    M.EMPTY = new q;

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * SortedSet is an immutable (copy-on-write) collection that holds elements
     * in order specified by the provided comparator.
     *
     * NOTE: if provided comparator returns 0 for two elements, we consider them to
     * be equal!
     */
    var B = /** @class */ function() {
        function t(t) {
            this.F = t, this.data = new x(this.F);
        }
        /**
         * Creates a SortedSet from the keys of the map.
         * This is currently implemented as an O(n) copy.
         */    return t.Vt = function(n) {
            var i = new t(n.F);
            return n.forEach((function(t) {
                i = i.add(t);
            })), i;
        }, t.prototype.has = function(t) {
            return null !== this.data.get(t);
        }, t.prototype.first = function() {
            return this.data.ot();
        }, t.prototype.last = function() {
            return this.data.ht();
        }, Object.defineProperty(t.prototype, "size", {
            get: function() {
                return this.data.size;
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.indexOf = function(t) {
            return this.data.indexOf(t);
        }, 
        /** Iterates elements in order defined by "comparator" */
        t.prototype.forEach = function(t) {
            this.data.ct((function(n, i) {
                return t(n), !1;
            }));
        }, 
        /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */
        t.prototype.kt = function(t, n) {
            for (var i = this.data.lt(t[0]); i.gt(); ) {
                var e = i.bt();
                if (this.F(e.key, t[1]) >= 0) return;
                n(e.key);
            }
        }, 
        /**
         * Iterates over `elem`s such that: start <= elem until false is returned.
         */
        t.prototype.Nt = function(t, n) {
            var i;
            for (i = void 0 !== n ? this.data.lt(n) : this.data.ft(); i.gt(); ) {
                if (!t(i.bt().key)) return;
            }
        }, 
        /** Finds the least element greater than or equal to `elem`. */
        t.prototype.Ot = function(t) {
            var n = this.data.lt(t);
            return n.gt() ? n.bt().key : null;
        }, t.prototype.ft = function() {
            return new Q(this.data.ft());
        }, t.prototype.lt = function(t) {
            return new Q(this.data.lt(t));
        }, 
        /** Inserts or updates an element */
        t.prototype.add = function(t) {
            return this.copy(this.data.remove(t).ut(t, !0));
        }, 
        /** Deletes an element */
        t.prototype.delete = function(t) {
            return this.has(t) ? this.copy(this.data.remove(t)) : this;
        }, t.prototype.M = function() {
            return this.data.M();
        }, t.prototype.Ft = function(t) {
            var n = this;
            // Make sure `result` always refers to the larger one of the two sets.
                    return n.size < t.size && (n = t, t = this), t.forEach((function(t) {
                n = n.add(t);
            })), n;
        }, t.prototype.isEqual = function(n) {
            if (!(n instanceof t)) return !1;
            if (this.size !== n.size) return !1;
            for (var i = this.data.ft(), e = n.data.ft(); i.gt(); ) {
                var r = i.bt().key, u = e.bt().key;
                if (0 !== this.F(r, u)) return !1;
            }
            return !0;
        }, t.prototype.K = function() {
            var t = [];
            return this.forEach((function(n) {
                t.push(n);
            })), t;
        }, t.prototype.toString = function() {
            var t = [];
            return this.forEach((function(n) {
                return t.push(n);
            })), "SortedSet(" + t.toString() + ")";
        }, t.prototype.copy = function(n) {
            var i = new t(this.F);
            return i.data = n, i;
        }, t;
    }(), Q = /** @class */ function() {
        function t(t) {
            this.Ut = t;
        }
        return t.prototype.bt = function() {
            return this.Ut.bt().key;
        }, t.prototype.gt = function() {
            return this.Ut.gt();
        }, t;
    }();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function G(t) {
        var n = 0;
        for (var i in t) Object.prototype.hasOwnProperty.call(t, i) && n++;
        return n;
    }

    function W(t, n) {
        for (var i in t) Object.prototype.hasOwnProperty.call(t, i) && n(i, t[i]);
    }

    function z(t) {
        for (var n in Wn(null != t && "object" == typeof t, "isEmpty() expects object parameter."), 
        t) if (Object.prototype.hasOwnProperty.call(t, n)) return !1;
        return !0;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Immutable class that represents a "proto" byte string.
     *
     * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when
     * sent on the wire. This class abstracts away this differentiation by holding
     * the proto byte string in a common class that must be converted into a string
     * before being sent as a proto.
     */ var K = /** @class */ function() {
        function t(t) {
            this.jt = t;
        }
        return t.fromBase64String = function(n) {
            return new t(jn.xt().atob(n));
        }, t.fromUint8Array = function(n) {
            return new t(
            /**
     * Helper function to convert an Uint8array to a binary string.
     */
            function(t) {
                for (var n = "", i = 0; i < t.length; ++i) n += String.fromCharCode(t[i]);
                return n;
            }
            /**
     * Helper function to convert a binary string to an Uint8Array.
     */ (n));
        }, t.prototype.toBase64 = function() {
            return jn.xt().btoa(this.jt);
        }, t.prototype.toUint8Array = function() {
            return function(t) {
                for (var n = new Uint8Array(t.length), i = 0; i < t.length; i++) n[i] = t.charCodeAt(i);
                return n;
            }
            /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
            /**
     * Returns whether a variable is either undefined or null.
     */ (this.jt);
        }, t.prototype.Lt = function() {
            return 2 * this.jt.length;
        }, t.prototype.k = function(t) {
            return Kn(this.jt, t.jt);
        }, t.prototype.isEqual = function(t) {
            return this.jt === t.jt;
        }, t.Mt = new t(""), t;
    }();

    function J(t) {
        return null == t;
    }

    /** Returns whether the value represents -0. */ function H(t) {
        // Detect if the value is -0.0. Based on polyfill from
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
        return -0 === t && 1 / t == -1 / 0;
    }

    /**
     * Returns whether a value is an integer and in the safe integer range
     * @param value The value to test for being an integer and in the safe range
     */ function Y(t) {
        return "number" == typeof t && Number.isInteger(t) && !H(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents a locally-applied ServerTimestamp.
     *
     * Server Timestamps are backed by MapValues that contain an internal field
     * `__type__` with a value of `server_timestamp`. The previous value and local
     * write time are stored in its `__previous_value__` and `__local_write_time__`
     * fields respectively.
     *
     * Notes:
     * - ServerTimestampValue instances are created as the result of applying a
     *   TransformMutation (see TransformMutation.applyTo()). They can only exist in
     *   the local view of a document. Therefore they do not need to be parsed or
     *   serialized.
     * - When evaluated locally (e.g. for snapshot.data()), they by default
     *   evaluate to `null`. This behavior can be configured by passing custom
     *   FieldValueOptions to value().
     * - With respect to other ServerTimestampValues, they sort by their
     *   localWriteTime.
     */ function X(t) {
        var n, i;
        return "server_timestamp" === (null === (i = ((null === (n = null == t ? void 0 : t.mapValue) || void 0 === n ? void 0 : n.fields) || {}).__type__) || void 0 === i ? void 0 : i.stringValue);
    }

    /**
     * Creates a new ServerTimestamp proto value (using the internal format).
     */
    /**
     * Returns the local time at which this timestamp was first set.
     */
    function $(t) {
        var n = ot(t.mapValue.fields.__local_write_time__.timestampValue);
        return new V(n.seconds, n.nanos);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // A RegExp matching ISO 8601 UTC timestamps with optional fraction.
    var Z = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);

    /** Extracts the backend's type order for the provided value. */ function tt(t) {
        return "nullValue" in t ? 0 /* NullValue */ : "booleanValue" in t ? 1 /* BooleanValue */ : "integerValue" in t || "doubleValue" in t ? 2 /* NumberValue */ : "timestampValue" in t ? 3 /* TimestampValue */ : "stringValue" in t ? 5 /* StringValue */ : "bytesValue" in t ? 6 /* BlobValue */ : "referenceValue" in t ? 7 /* RefValue */ : "geoPointValue" in t ? 8 /* GeoPointValue */ : "arrayValue" in t ? 9 /* ArrayValue */ : "mapValue" in t ? X(t) ? 4 /* ServerTimestampValue */ : 10 /* ObjectValue */ : Gn("Invalid value type: " + JSON.stringify(t));
    }

    /** Tests `left` and `right` for equality based on the backend semantics. */ function nt(t, n) {
        var i = tt(t);
        if (i !== tt(n)) return !1;
        switch (i) {
          case 0 /* NullValue */ :
            return !0;

          case 1 /* BooleanValue */ :
            return t.booleanValue === n.booleanValue;

          case 4 /* ServerTimestampValue */ :
            return $(t).isEqual($(n));

          case 3 /* TimestampValue */ :
            return function(t, n) {
                if ("string" == typeof t.timestampValue && "string" == typeof n.timestampValue && t.timestampValue.length === n.timestampValue.length) 
                // Use string equality for ISO 8601 timestamps
                return t.timestampValue === n.timestampValue;
                var i = ot(t.timestampValue), e = ot(n.timestampValue);
                return i.seconds === e.seconds && i.nanos === e.nanos;
            }(t, n);

          case 5 /* StringValue */ :
            return t.stringValue === n.stringValue;

          case 6 /* BlobValue */ :
            return function(t, n) {
                return ct(t.bytesValue).isEqual(ct(n.bytesValue));
            }(t, n);

          case 7 /* RefValue */ :
            return t.referenceValue === n.referenceValue;

          case 8 /* GeoPointValue */ :
            return function(t, n) {
                return ht(t.geoPointValue.latitude) === ht(n.geoPointValue.latitude) && ht(t.geoPointValue.longitude) === ht(n.geoPointValue.longitude);
            }(t, n);

          case 2 /* NumberValue */ :
            return function(t, n) {
                if ("integerValue" in t && "integerValue" in n) return ht(t.integerValue) === ht(n.integerValue);
                if ("doubleValue" in t && "doubleValue" in n) {
                    var i = ht(t.doubleValue), e = ht(n.doubleValue);
                    return i === e ? H(i) === H(e) : isNaN(i) && isNaN(e);
                }
                return !1;
            }(t, n);

          case 9 /* ArrayValue */ :
            return Jn(t.arrayValue.values || [], n.arrayValue.values || [], nt);

          case 10 /* ObjectValue */ :
            return function(t, n) {
                var i = t.mapValue.fields || {}, e = n.mapValue.fields || {};
                if (G(i) !== G(e)) return !1;
                for (var r in i) if (i.hasOwnProperty(r) && (void 0 === e[r] || !nt(i[r], e[r]))) return !1;
                return !0;
            }
            /** Returns true if the ArrayValue contains the specified element. */ (t, n);

          default:
            return Gn("Unexpected value type: " + JSON.stringify(t));
        }
    }

    function it(t, n) {
        return void 0 !== (t.values || []).find((function(t) {
            return nt(t, n);
        }));
    }

    function et(t, n) {
        var i = tt(t), e = tt(n);
        if (i !== e) return Kn(i, e);
        switch (i) {
          case 0 /* NullValue */ :
            return 0;

          case 1 /* BooleanValue */ :
            return Kn(t.booleanValue, n.booleanValue);

          case 2 /* NumberValue */ :
            return function(t, n) {
                var i = ht(t.integerValue || t.doubleValue), e = ht(n.integerValue || n.doubleValue);
                return i < e ? -1 : i > e ? 1 : i === e ? 0 : 
                // one or both are NaN.
                isNaN(i) ? isNaN(e) ? 0 : -1 : 1;
            }(t, n);

          case 3 /* TimestampValue */ :
            return rt(t.timestampValue, n.timestampValue);

          case 4 /* ServerTimestampValue */ :
            return rt($(t), $(n));

          case 5 /* StringValue */ :
            return Kn(t.stringValue, n.stringValue);

          case 6 /* BlobValue */ :
            return function(t, n) {
                var i = ct(t), e = ct(n);
                return i.k(e);
            }(t.bytesValue, n.bytesValue);

          case 7 /* RefValue */ :
            return function(t, n) {
                for (var i = t.split("/"), e = n.split("/"), r = 0; r < i.length && r < e.length; r++) {
                    var u = Kn(i[r], e[r]);
                    if (0 !== u) return u;
                }
                return Kn(i.length, e.length);
            }(t.referenceValue, n.referenceValue);

          case 8 /* GeoPointValue */ :
            return function(t, n) {
                var i = Kn(ht(t.latitude), ht(n.latitude));
                if (0 !== i) return i;
                return Kn(ht(t.longitude), ht(n.longitude));
            }(t.geoPointValue, n.geoPointValue);

          case 9 /* ArrayValue */ :
            return function(t, n) {
                for (var i = t.values || [], e = n.values || [], r = 0; r < i.length && r < e.length; ++r) {
                    var u = et(i[r], e[r]);
                    if (u) return u;
                }
                return Kn(i.length, e.length);
            }(t.arrayValue, n.arrayValue);

          case 10 /* ObjectValue */ :
            return function(t, n) {
                var i = t.fields || {}, e = Object.keys(i), r = n.fields || {}, u = Object.keys(r);
                // Even though MapValues are likely sorted correctly based on their insertion
                // order (e.g. when received from the backend), local modifications can bring
                // elements out of order. We need to re-sort the elements to ensure that
                // canonical IDs are independent of insertion order.
                e.sort(), u.sort();
                for (var s = 0; s < e.length && s < u.length; ++s) {
                    var o = Kn(e[s], u[s]);
                    if (0 !== o) return o;
                    var h = et(i[e[s]], r[u[s]]);
                    if (0 !== h) return h;
                }
                return Kn(e.length, u.length);
            }
            /**
     * Generates the canonical ID for the provided field value (as used in Target
     * serialization).
     */ (t.mapValue, n.mapValue);

          default:
            throw Gn("Invalid value type: " + i);
        }
    }

    function rt(t, n) {
        if ("string" == typeof t && "string" == typeof n && t.length === n.length) return Kn(t, n);
        var i = ot(t), e = ot(n), r = Kn(i.seconds, e.seconds);
        return 0 !== r ? r : Kn(i.nanos, e.nanos);
    }

    function ut(t) {
        return st(t);
    }

    function st(t) {
        return "nullValue" in t ? "null" : "booleanValue" in t ? "" + t.booleanValue : "integerValue" in t ? "" + t.integerValue : "doubleValue" in t ? "" + t.doubleValue : "timestampValue" in t ? (e = t.timestampValue, 
        "time(" + (r = ot(e)).seconds + "," + r.nanos + ")") : "stringValue" in t ? t.stringValue : "bytesValue" in t ? ct(t.bytesValue).toBase64() : "referenceValue" in t ? (i = t.referenceValue, 
        j.it(i).toString()) : "geoPointValue" in t ? "geo(" + (n = t.geoPointValue).latitude + "," + n.longitude + ")" : "arrayValue" in t ? function(t) {
            for (var n = "[", i = !0, e = 0, r = t.values || []; e < r.length; e++) {
                var u = r[e];
                i ? i = !1 : n += ",", n += st(u);
            }
            return n + "]";
        }
        /**
     * Converts the possible Proto values for a timestamp value into a "seconds and
     * nanos" representation.
     */ (t.arrayValue) : "mapValue" in t ? function(t) {
            for (
            // Iteration order in JavaScript is not guaranteed. To ensure that we generate
            // matching canonical IDs for identical maps, we need to sort the keys.
            var n = Object.keys(t.fields || {}).sort(), i = "{", e = !0, r = 0, u = n; r < u.length; r++) {
                var s = u[r];
                e ? e = !1 : i += ",", i += s + ":" + st(t.fields[s]);
            }
            return i + "}";
        }(t.mapValue) : Gn("Invalid value type: " + JSON.stringify(t));
        var n, i, e, r;
    }

    function ot(t) {
        // The json interface (for the browser) will return an iso timestamp string,
        // while the proto js library (for node) will return a
        // google.protobuf.Timestamp instance.
        if (Wn(!!t, "Cannot normalize null or undefined timestamp."), "string" == typeof t) {
            // The date string can have higher precision (nanos) than the Date class
            // (millis), so we do some custom parsing here.
            // Parse the nanos right out of the string.
            var n = 0, i = Z.exec(t);
            if (Wn(!!i, "invalid timestamp: " + t), i[1]) {
                // Pad the fraction out to 9 digits (nanos).
                var e = i[1];
                e = (e + "000000000").substr(0, 9), n = Number(e);
            }
            // Parse the date to get the seconds.
                    var r = new Date(t);
            return {
                seconds: Math.floor(r.getTime() / 1e3),
                nanos: n
            };
        }
        return {
            seconds: ht(t.seconds),
            nanos: n = ht(t.nanos)
        };
    }

    /**
     * Converts the possible Proto types for numbers into a JavaScript number.
     * Returns 0 if the value is not numeric.
     */ function ht(t) {
        // TODO(bjornick): Handle int64 greater than 53 bits.
        return "number" == typeof t ? t : "string" == typeof t ? Number(t) : 0;
    }

    /** Converts the possible Proto types for Blobs into a ByteString. */ function ct(t) {
        return "string" == typeof t ? K.fromBase64String(t) : K.fromUint8Array(t);
    }

    /** Returns a reference value for the provided database and key. */ function at(t, n) {
        return {
            referenceValue: "projects/" + t.projectId + "/databases/" + t.database + "/documents/" + n.path.J()
        };
    }

    /** Returns true if `value` is an IntegerValue . */ function ft(t) {
        return !!t && "integerValue" in t;
    }

    /** Returns true if `value` is a DoubleValue. */
    /** Returns true if `value` is either an IntegerValue or a DoubleValue. */
    function lt(t) {
        return ft(t) || function(t) {
            return !!t && "doubleValue" in t;
        }(t);
    }

    /** Returns true if `value` is an ArrayValue. */ function dt(t) {
        return !!t && "arrayValue" in t;
    }

    /** Returns true if `value` is a ReferenceValue. */ function vt(t) {
        return !!t && "referenceValue" in t;
    }

    /** Returns true if `value` is a NullValue. */ function wt(t) {
        return !!t && "nullValue" in t;
    }

    /** Returns true if `value` is NaN. */ function mt(t) {
        return !!t && "doubleValue" in t && isNaN(Number(t.doubleValue));
    }

    /** Returns true if `value` is a MapValue. */ function pt(t) {
        return !!t && "mapValue" in t;
    }

    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Transforms a value into a server-generated timestamp. */ var bt = /** @class */ function() {
        function t() {}
        return t.prototype.qt = function(t, n) {
            return function(t, n) {
                var i, e = {
                    fields: (i = {}, i.__type__ = {
                        stringValue: "server_timestamp"
                    }, i.__local_write_time__ = {
                        timestampValue: {
                            seconds: t.seconds,
                            nanos: t.nanoseconds
                        }
                    }, i)
                };
                return n && (e.fields.__previous_value__ = n), {
                    mapValue: e
                };
            }
            /**
     * Returns the value of the field before this ServerTimestamp was set.
     *
     * Preserving the previous values allows the user to display the last resoled
     * value until the backend responds with the timestamp.
     */ (n, t);
        }, t.prototype.Bt = function(t, n) {
            return n;
        }, t.prototype.Qt = function(t) {
            return null;
     // Server timestamps are idempotent and don't require a base value.
            }, t.prototype.isEqual = function(n) {
            return n instanceof t;
        }, t.instance = new t, t;
    }(), gt = /** @class */ function() {
        function t(t) {
            this.elements = t;
        }
        return t.prototype.qt = function(t, n) {
            return this.apply(t);
        }, t.prototype.Bt = function(t, n) {
            // The server just sends null as the transform result for array operations,
            // so we have to calculate a result the same as we do for local
            // applications.
            return this.apply(t);
        }, t.prototype.apply = function(t) {
            for (var n = It(t), i = function(t) {
                n.some((function(n) {
                    return nt(n, t);
                })) || n.push(t);
            }, e = 0, r = this.elements; e < r.length; e++) {
                i(r[e]);
            }
            return {
                arrayValue: {
                    values: n
                }
            };
        }, t.prototype.Qt = function(t) {
            return null;
     // Array transforms are idempotent and don't require a base value.
            }, t.prototype.isEqual = function(n) {
            return n instanceof t && Jn(this.elements, n.elements, nt);
        }, t;
    }(), yt = /** @class */ function() {
        function t(t) {
            this.elements = t;
        }
        return t.prototype.qt = function(t, n) {
            return this.apply(t);
        }, t.prototype.Bt = function(t, n) {
            // The server just sends null as the transform result for array operations,
            // so we have to calculate a result the same as we do for local
            // applications.
            return this.apply(t);
        }, t.prototype.apply = function(t) {
            for (var n = It(t), i = function(t) {
                n = n.filter((function(n) {
                    return !nt(n, t);
                }));
            }, e = 0, r = this.elements; e < r.length; e++) {
                i(r[e]);
            }
            return {
                arrayValue: {
                    values: n
                }
            };
        }, t.prototype.Qt = function(t) {
            return null;
     // Array transforms are idempotent and don't require a base value.
            }, t.prototype.isEqual = function(n) {
            return n instanceof t && Jn(this.elements, n.elements, nt);
        }, t;
    }(), _t = /** @class */ function() {
        function t(t, n) {
            this.serializer = t, this.Gt = n, Wn(lt(n), "NumericIncrementTransform transform requires a NumberValue");
        }
        return t.prototype.qt = function(t, n) {
            // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit
            // precision and resolves overflows by reducing precision, we do not
            // manually cap overflows at 2^63.
            var i = this.Qt(t), e = this.asNumber(i) + this.asNumber(this.Gt);
            return ft(i) && ft(this.Gt) ? this.serializer.Wt(e) : this.serializer.zt(e);
        }, t.prototype.Bt = function(t, n) {
            return Wn(null !== n, "Didn't receive transformResult for NUMERIC_ADD transform"), 
            n;
        }, 
        /**
         * Inspects the provided value, returning the provided value if it is already
         * a NumberValue, otherwise returning a coerced value of 0.
         */
        t.prototype.Qt = function(t) {
            return lt(t) ? t : {
                integerValue: 0
            };
        }, t.prototype.isEqual = function(n) {
            return n instanceof t && nt(this.Gt, n.Gt);
        }, t.prototype.asNumber = function(t) {
            return ht(t.integerValue || t.doubleValue);
        }, t;
    }();

    /** Transforms an array value via a union operation. */ function It(t) {
        return dt(t) && t.arrayValue.values ? t.arrayValue.values.slice() : [];
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provides a set of fields that can be used to partially patch a document.
     * FieldMask is used in conjunction with ObjectValue.
     * Examples:
     *   foo - Overwrites foo entirely with the provided value. If foo is not
     *         present in the companion ObjectValue, the field is deleted.
     *   foo.bar - Overwrites only the field bar of the object foo.
     *             If foo is not an object, foo is replaced with an object
     *             containing foo
     */ var Tt, Et, Dt = /** @class */ function() {
        function t(t) {
            this.fields = t;
            // TODO(dimond): validation of FieldMask
            }
        return t.Kt = function(n) {
            return new t(n);
        }, t.Jt = function(n) {
            var i = new B(U.F);
            return n.forEach((function(t) {
                return i = i.add(t);
            })), new t(i);
        }, 
        /**
         * Verifies that `fieldPath` is included by at least one field in this field
         * mask.
         *
         * This is an O(n) operation, where `n` is the size of the field mask.
         */
        t.prototype.Ht = function(t) {
            var n = !1;
            return this.fields.forEach((function(i) {
                i.G(t) && (n = !0);
            })), n;
        }, t.prototype.isEqual = function(t) {
            return this.fields.isEqual(t.fields);
        }, t;
    }(), Rt = /** @class */ function() {
        function t(t, n) {
            this.field = t, this.transform = n;
        }
        return t.prototype.isEqual = function(t) {
            return this.field.isEqual(t.field) && this.transform.isEqual(t.transform);
        }, t;
    }(), St = function(
    /**
         * The version at which the mutation was committed:
         *
         * - For most operations, this is the updateTime in the WriteResult.
         * - For deletes, the commitTime of the WriteResponse (because deletes are
         *   not stored and have no updateTime).
         *
         * Note that these versions can be different: No-op writes will not change
         * the updateTime even though the commitTime advances.
         */
    t, 
    /**
         * The resulting fields returned from the backend after a
         * TransformMutation has been committed. Contains one FieldValue for each
         * FieldTransform that was in the mutation.
         *
         * Will be null if the mutation was not a TransformMutation.
         */
    n) {
        this.version = t, this.transformResults = n;
    }, At = /** @class */ function() {
        function t(t, n) {
            this.updateTime = t, this.exists = n, Wn(void 0 === t || void 0 === n, 'Precondition can specify "exists" or "updateTime" but not both');
        }
        /** Creates a new Precondition with an exists flag. */    return t.exists = function(n) {
            return new t(void 0, n);
        }, 
        /** Creates a new Precondition based on a version a document exists at. */
        t.updateTime = function(n) {
            return new t(n);
        }, Object.defineProperty(t.prototype, "Yt", {
            /** Returns whether this Precondition is empty. */
            get: function() {
                return void 0 === this.updateTime && void 0 === this.exists;
            },
            enumerable: !0,
            configurable: !0
        }), 
        /**
         * Returns true if the preconditions is valid for the given document
         * (or null if no document is available).
         */
        t.prototype.Xt = function(t) {
            return void 0 !== this.updateTime ? t instanceof xt && t.version.isEqual(this.updateTime) : void 0 !== this.exists ? this.exists === t instanceof xt : (Wn(this.Yt, "Precondition should be empty"), 
            !0);
        }, t.prototype.isEqual = function(t) {
            return !(n = this.updateTime, i = t.updateTime, (null != n ? !i || !n.isEqual(i) : n !== i) || this.exists !== t.exists);
            /** Helper to compare nullable (or undefined-able) objects using isEqual(). */
            var n, i;
            /** Helper to compare arrays using isEqual(). */    }, t.NONE = new t, t;
    }(), Ct = /** @class */ function() {
        function t() {}
        return t.prototype.$t = function(t) {
            null != t && Wn(t.key.isEqual(this.key), "Can only apply a mutation to a document with the same key");
        }, 
        /**
         * Returns the version from the given document for use as the result of a
         * mutation. Mutations are defined to return the version of the base document
         * only if it is an existing document. Deleted and unknown documents have a
         * post-mutation version of SnapshotVersion.MIN.
         */
        t.Zt = function(t) {
            return t instanceof xt ? t.version : k.MIN;
        }, t;
    }(), Pt = /** @class */ function(t) {
        function i(n, i, e) {
            var r = t.call(this) || this;
            return r.key = n, r.value = i, r.tn = e, r.type = 0 /* Set */ , r;
        }
        return tslib_es6.__extends(i, t), i.prototype.Bt = function(t, n) {
            this.$t(t), Wn(null == n.transformResults, "Transform results received by SetMutation.");
            // Unlike applyToLocalView, if we're applying a mutation to a remote
            // document the server has accepted the mutation so the precondition must
            // have held.
            var i = n.version;
            return new xt(this.key, i, this.value, {
                hasCommittedMutations: !0
            });
        }, i.prototype.qt = function(t, n, i) {
            if (this.$t(t), !this.tn.Xt(t)) return t;
            var e = Ct.Zt(t);
            return new xt(this.key, e, this.value, {
                nn: !0
            });
        }, i.prototype.in = function(t) {
            return null;
        }, i.prototype.isEqual = function(t) {
            return t instanceof i && this.key.isEqual(t.key) && this.value.isEqual(t.value) && this.tn.isEqual(t.tn);
        }, i;
    }(Ct), Vt = /** @class */ function(t) {
        function i(n, i, e, r) {
            var u = t.call(this) || this;
            return u.key = n, u.data = i, u.en = e, u.tn = r, u.type = 1 /* Patch */ , u;
        }
        return tslib_es6.__extends(i, t), i.prototype.Bt = function(t, n) {
            if (this.$t(t), Wn(null == n.transformResults, "Transform results received by PatchMutation."), 
            !this.tn.Xt(t)) 
            // Since the mutation was not rejected, we know that the  precondition
            // matched on the backend. We therefore must not have the expected version
            // of the document in our cache and return an UnknownDocument with the
            // known updateTime.
            return new Mt(this.key, n.version);
            var i = this.rn(t);
            return new xt(this.key, n.version, i, {
                hasCommittedMutations: !0
            });
        }, i.prototype.qt = function(t, n, i) {
            if (this.$t(t), !this.tn.Xt(t)) return t;
            var e = Ct.Zt(t), r = this.rn(t);
            return new xt(this.key, e, r, {
                nn: !0
            });
        }, i.prototype.in = function(t) {
            return null;
        }, i.prototype.isEqual = function(t) {
            return t instanceof i && this.key.isEqual(t.key) && this.en.isEqual(t.en) && this.tn.isEqual(t.tn);
        }, 
        /**
         * Patches the data of document if available or creates a new document. Note
         * that this does not check whether or not the precondition of this patch
         * holds.
         */
        i.prototype.rn = function(t) {
            var n;
            return n = t instanceof xt ? t.data() : Ft.EMPTY, this.un(n);
        }, i.prototype.un = function(t) {
            var n = this, i = t.sn();
            return this.en.fields.forEach((function(t) {
                if (!t.M()) {
                    var e = n.data.field(t);
                    null !== e ? i.set(t, e) : i.delete(t);
                }
            })), i.on();
        }, i;
    }(Ct), kt = /** @class */ function(t) {
        function i(n, i) {
            var e = t.call(this) || this;
            return e.key = n, e.fieldTransforms = i, e.type = 2 /* Transform */ , 
            // NOTE: We set a precondition of exists: true as a safety-check, since we
            // always combine TransformMutations with a SetMutation or PatchMutation which
            // (if successful) should end up with an existing document.
            e.tn = At.exists(!0), e;
        }
        return tslib_es6.__extends(i, t), i.prototype.Bt = function(t, n) {
            if (this.$t(t), Wn(null != n.transformResults, "Transform results missing for TransformMutation."), 
            !this.tn.Xt(t)) 
            // Since the mutation was not rejected, we know that the  precondition
            // matched on the backend. We therefore must not have the expected version
            // of the document in our cache and return an UnknownDocument with the
            // known updateTime.
            return new Mt(this.key, n.version);
            var i = this.hn(t), e = this.cn(t, n.transformResults), r = n.version, u = this.an(i.data(), e);
            return new xt(this.key, r, u, {
                hasCommittedMutations: !0
            });
        }, i.prototype.qt = function(t, n, i) {
            if (this.$t(t), !this.tn.Xt(t)) return t;
            var e = this.hn(t), r = this.fn(i, t, n), u = this.an(e.data(), r);
            return new xt(this.key, e.version, u, {
                nn: !0
            });
        }, i.prototype.in = function(t) {
            for (var n = null, i = 0, e = this.fieldTransforms; i < e.length; i++) {
                var r = e[i], u = t instanceof xt ? t.field(r.field) : void 0, s = r.transform.Qt(u || null);
                null != s && (n = null == n ? Ft.ln().set(r.field, s) : n.set(r.field, s));
            }
            return n ? n.on() : null;
        }, i.prototype.isEqual = function(t) {
            return t instanceof i && this.key.isEqual(t.key) && Jn(this.fieldTransforms, t.fieldTransforms, (function(t, n) {
                return t.isEqual(n);
            })) && this.tn.isEqual(t.tn);
        }, 
        /**
         * Asserts that the given MaybeDocument is actually a Document and verifies
         * that it matches the key for this mutation. Since we only support
         * transformations with precondition exists this method is guaranteed to be
         * safe.
         */
        i.prototype.hn = function(t) {
            return Wn(t instanceof xt, "Unknown MaybeDocument type " + t), Wn(t.key.isEqual(this.key), "Can only transform a document with the same key"), 
            t;
        }, 
        /**
         * Creates a list of "transform results" (a transform result is a field value
         * representing the result of applying a transform) for use after a
         * TransformMutation has been acknowledged by the server.
         *
         * @param baseDoc The document prior to applying this mutation batch.
         * @param serverTransformResults The transform results received by the server.
         * @return The transform results list.
         */
        i.prototype.cn = function(t, n) {
            var i = [];
            Wn(this.fieldTransforms.length === n.length, "server transform result count (" + n.length + ") should match field transform count (" + this.fieldTransforms.length + ")");
            for (var e = 0; e < n.length; e++) {
                var r = this.fieldTransforms[e], u = r.transform, s = null;
                t instanceof xt && (s = t.field(r.field)), i.push(u.Bt(s, n[e]));
            }
            return i;
        }, 
        /**
         * Creates a list of "transform results" (a transform result is a field value
         * representing the result of applying a transform) for use when applying a
         * TransformMutation locally.
         *
         * @param localWriteTime The local time of the transform mutation (used to
         *     generate ServerTimestampValues).
         * @param maybeDoc The current state of the document after applying all
         *     previous mutations.
         * @param baseDoc The document prior to applying this mutation batch.
         * @return The transform results list.
         */
        i.prototype.fn = function(t, n, i) {
            for (var e = [], r = 0, u = this.fieldTransforms; r < u.length; r++) {
                var s = u[r], o = s.transform, h = null;
                n instanceof xt && (h = n.field(s.field)), null === h && i instanceof xt && (
                // If the current document does not contain a value for the mutated
                // field, use the value that existed before applying this mutation
                // batch. This solves an edge case where a PatchMutation clears the
                // values in a nested map before the TransformMutation is applied.
                h = i.field(s.field)), e.push(o.qt(h, t));
            }
            return e;
        }, i.prototype.an = function(t, n) {
            Wn(n.length === this.fieldTransforms.length, "TransformResults length mismatch.");
            for (var i = t.sn(), e = 0; e < this.fieldTransforms.length; e++) {
                var r = this.fieldTransforms[e].field;
                i.set(r, n[e]);
            }
            return i.on();
        }, i;
    }(Ct), Nt = /** @class */ function(t) {
        function i(n, i) {
            var e = t.call(this) || this;
            return e.key = n, e.tn = i, e.type = 3 /* Delete */ , e;
        }
        return tslib_es6.__extends(i, t), i.prototype.Bt = function(t, n) {
            // Unlike applyToLocalView, if we're applying a mutation to a remote
            // document the server has accepted the mutation so the precondition must
            // have held.
            return this.$t(t), Wn(null == n.transformResults, "Transform results received by DeleteMutation."), 
            new Lt(this.key, n.version, {
                hasCommittedMutations: !0
            });
        }, i.prototype.qt = function(t, n, i) {
            return this.$t(t), this.tn.Xt(t) ? (t && Wn(t.key.isEqual(this.key), "Can only apply mutation to document with same key"), 
            new Lt(this.key, k.V())) : t;
        }, i.prototype.in = function(t) {
            return null;
        }, i.prototype.isEqual = function(t) {
            return t instanceof i && this.key.isEqual(t.key) && this.tn.isEqual(t.tn);
        }, i;
    }(Ct), Ot = /** @class */ function(t) {
        function i(n, i) {
            var e = t.call(this) || this;
            return e.key = n, e.tn = i, e.type = 4 /* Verify */ , e;
        }
        return tslib_es6.__extends(i, t), i.prototype.Bt = function(t, n) {
            Gn("VerifyMutation should only be used in Transactions.");
        }, i.prototype.qt = function(t, n, i) {
            Gn("VerifyMutation should only be used in Transactions.");
        }, i.prototype.in = function(t) {
            Gn("VerifyMutation should only be used in Transactions.");
        }, i.prototype.isEqual = function(t) {
            return t instanceof i && this.key.isEqual(t.key) && this.tn.isEqual(t.tn);
        }, i;
    }(Ct), Ft = /** @class */ function() {
        function t(t) {
            this.proto = t, Wn(!X(t), "ServerTimestamps should be converted to ServerTimestampValue");
        }
        /** Returns a new Builder instance that is based on an empty object. */    return t.ln = function() {
            return t.EMPTY.sn();
        }, 
        /**
         * Returns the value at the given path or null.
         *
         * @param path the path to search
         * @return The value at the path or if there it doesn't exist.
         */
        t.prototype.field = function(t) {
            if (t.M()) return this.proto;
            for (var n = this.proto, i = 0; i < t.length - 1; ++i) {
                if (!n.mapValue.fields) return null;
                if (!pt(n = n.mapValue.fields[t.get(i)])) return null;
            }
            return (n = (n.mapValue.fields || {})[t.B()]) || null;
        }, 
        /**
         * Returns a FieldMask built from all FieldPaths starting from this
         * ObjectValue, including paths from nested objects.
         */
        t.prototype.en = function() {
            return this.dn(this.proto.mapValue);
        }, t.prototype.dn = function(t) {
            var n = this, i = new B(U.F);
            return W(t.fields || {}, (function(t, e) {
                var r = new U([ t ]);
                if (10 /* ObjectValue */ === tt(e)) {
                    var u = n.dn(e.mapValue).fields;
                    u.M() ? 
                    // Preserve the empty map by adding it to the FieldMask.
                    i = i.add(r) : 
                    // For nested and non-empty ObjectValues, add the FieldPath of the
                    // leaf nodes.
                    u.forEach((function(t) {
                        i = i.add(r.child(t));
                    }));
                } else 
                // For nested and non-empty ObjectValues, add the FieldPath of the leaf
                // nodes.
                i = i.add(r);
            })), Dt.Kt(i);
        }, t.prototype.isEqual = function(t) {
            return nt(this.proto, t.proto);
        }, 
        /** Creates a ObjectValueBuilder instance that is based on the current value. */
        t.prototype.sn = function() {
            return new Ut(this);
        }, t.EMPTY = new t({
            mapValue: {}
        }), t;
    }(), Ut = /** @class */ function() {
        /**
         * @param baseObject The object to mutate.
         */
        function t(t) {
            this.vn = t, 
            /** A map that contains the accumulated changes in this builder. */
            this.wn = new Map;
        }
        /**
         * Sets the field to the provided value.
         *
         * @param path The field path to set.
         * @param value The value to set.
         * @return The current Builder instance.
         */    return t.prototype.set = function(t, n) {
            return Wn(!t.M(), "Cannot set field for empty path on ObjectValue"), this.mn(t, n), 
            this;
        }, 
        /**
         * Removes the field at the specified path. If there is no field at the
         * specified path, nothing is changed.
         *
         * @param path The field path to remove.
         * @return The current Builder instance.
         */
        t.prototype.delete = function(t) {
            return Wn(!t.M(), "Cannot delete field for empty path on ObjectValue"), this.mn(t, null), 
            this;
        }, 
        /**
         * Adds `value` to the overlay map at `path`. Creates nested map entries if
         * needed.
         */
        t.prototype.mn = function(t, n) {
            for (var i = this.wn, e = 0; e < t.length - 1; ++e) {
                var r = t.get(e), u = i.get(r);
                u instanceof Map ? 
                // Re-use a previously created map
                i = u : u && 10 /* ObjectValue */ === tt(u) ? (
                // Convert the existing Protobuf MapValue into a map
                u = new Map(Object.entries(u.mapValue.fields || {})), i.set(r, u), i = u) : (
                // Create an empty map to represent the current nesting level
                u = new Map, i.set(r, u), i = u);
            }
            i.set(t.B(), n);
        }, 
        /** Returns an ObjectValue with all mutations applied. */
        t.prototype.on = function() {
            var t = this.pn(U.Y, this.wn);
            return null != t ? new Ft(t) : this.vn;
        }, 
        /**
         * Applies any overlays from `currentOverlays` that exist at `currentPath`
         * and returns the merged data at `currentPath` (or null if there were no
         * changes).
         *
         * @param currentPath The path at the current nesting level. Can be set to
         * FieldValue.EMPTY_PATH to represent the root.
         * @param currentOverlays The overlays at the current nesting level in the
         * same format as `overlayMap`.
         * @return The merged data at `currentPath` or null if no modifications
         * were applied.
         */
        t.prototype.pn = function(t, n) {
            var e = this, r = !1, u = this.vn.field(t), s = pt(u) ? // If there is already data at the current path, base our
            tslib_es6.__assign({}, u.mapValue.fields) : {};
            return n.forEach((function(n, i) {
                if (n instanceof Map) {
                    var u = e.pn(t.child(i), n);
                    null != u && (s[i] = u, r = !0);
                } else null !== n ? (s[i] = n, r = !0) : s.hasOwnProperty(i) && (delete s[i], r = !0);
            })), r ? {
                mapValue: {
                    fields: s
                }
            } : null;
        }, t;
    }(), jt = /** @class */ function() {
        function t(t, n) {
            this.key = t, this.version = n;
        }
        return t.bn = function(t, n) {
            return j.F(t.key, n.key);
        }, t;
    }(), xt = /** @class */ function(t) {
        function i(n, i, e, r) {
            var u = t.call(this, n, i) || this;
            return u.gn = e, u.nn = !!r.nn, u.hasCommittedMutations = !!r.hasCommittedMutations, 
            u;
        }
        return tslib_es6.__extends(i, t), i.prototype.field = function(t) {
            return this.gn.field(t);
        }, i.prototype.data = function() {
            return this.gn;
        }, i.prototype.yn = function() {
            return this.gn.proto;
        }, i.prototype.isEqual = function(t) {
            return t instanceof i && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.nn === t.nn && this.hasCommittedMutations === t.hasCommittedMutations && this.gn.isEqual(t.gn);
        }, i.prototype.toString = function() {
            return "Document(" + this.key + ", " + this.version + ", " + this.gn.toString() + ", {hasLocalMutations: " + this.nn + "}), {hasCommittedMutations: " + this.hasCommittedMutations + "})";
        }, Object.defineProperty(i.prototype, "hasPendingWrites", {
            get: function() {
                return this.nn || this.hasCommittedMutations;
            },
            enumerable: !0,
            configurable: !0
        }), i._n = function(t, n, i) {
            var e = n.field(t), r = i.field(t);
            return null !== e && null !== r ? et(e, r) : Gn("Trying to compare documents on fields that don't exist");
        }, i;
    }(jt), Lt = /** @class */ function(t) {
        function i(n, i, e) {
            var r = t.call(this, n, i) || this;
            return r.hasCommittedMutations = !(!e || !e.hasCommittedMutations), r;
        }
        return tslib_es6.__extends(i, t), i.prototype.toString = function() {
            return "NoDocument(" + this.key + ", " + this.version + ")";
        }, Object.defineProperty(i.prototype, "hasPendingWrites", {
            get: function() {
                return this.hasCommittedMutations;
            },
            enumerable: !0,
            configurable: !0
        }), i.prototype.isEqual = function(t) {
            return t instanceof i && t.hasCommittedMutations === this.hasCommittedMutations && t.version.isEqual(this.version) && t.key.isEqual(this.key);
        }, i;
    }(jt), Mt = /** @class */ function(t) {
        function i() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return tslib_es6.__extends(i, t), i.prototype.toString = function() {
            return "UnknownDocument(" + this.key + ", " + this.version + ")";
        }, Object.defineProperty(i.prototype, "hasPendingWrites", {
            get: function() {
                return !0;
            },
            enumerable: !0,
            configurable: !0
        }), i.prototype.isEqual = function(t) {
            return t instanceof i && t.version.isEqual(this.version) && t.key.isEqual(this.key);
        }, i;
    }(jt), qt = /** @class */ function() {
        /**
         * Initializes a Target with a path and optional additional query constraints.
         * Path must currently be empty if this is a collection group query.
         *
         * NOTE: you should always construct `Target` from `Query.toTarget` instead of
         * using this constructor, because `Query` provides an implicit `orderBy`
         * property.
         */
        function t(t, n, i, e, r, u, s) {
            void 0 === n && (n = null), void 0 === i && (i = []), void 0 === e && (e = []), 
            void 0 === r && (r = null), void 0 === u && (u = null), void 0 === s && (s = null), 
            this.path = t, this.collectionGroup = n, this.orderBy = i, this.filters = e, this.limit = r, 
            this.startAt = u, this.endAt = s, this.In = null;
        }
        return t.prototype.canonicalId = function() {
            if (null === this.In) {
                var t = this.path.J();
                null !== this.collectionGroup && (t += "|cg:" + this.collectionGroup), t += "|f:", 
                t += this.filters.map((function(t) {
                    return t.canonicalId();
                })).join(","), t += "|ob:", t += this.orderBy.map((function(t) {
                    return t.canonicalId();
                })).join(","), J(this.limit) || (t += "|l:", t += this.limit), this.startAt && (t += "|lb:", 
                t += this.startAt.canonicalId()), this.endAt && (t += "|ub:", t += this.endAt.canonicalId()), 
                this.In = t;
            }
            return this.In;
        }, t.prototype.toString = function() {
            var t = this.path.J();
            return null !== this.collectionGroup && (t += " collectionGroup=" + this.collectionGroup), 
            this.filters.length > 0 && (t += ", filters: [" + this.filters.join(", ") + "]"), 
            J(this.limit) || (t += ", limit: " + this.limit), this.orderBy.length > 0 && (t += ", orderBy: [" + this.orderBy.join(", ") + "]"), 
            this.startAt && (t += ", startAt: " + this.startAt.canonicalId()), this.endAt && (t += ", endAt: " + this.endAt.canonicalId()), 
            "Target(" + t + ")";
        }, t.prototype.isEqual = function(t) {
            if (this.limit !== t.limit) return !1;
            if (this.orderBy.length !== t.orderBy.length) return !1;
            for (var n = 0; n < this.orderBy.length; n++) if (!this.orderBy[n].isEqual(t.orderBy[n])) return !1;
            if (this.filters.length !== t.filters.length) return !1;
            for (n = 0; n < this.filters.length; n++) if (!this.filters[n].isEqual(t.filters[n])) return !1;
            return this.collectionGroup === t.collectionGroup && (!!this.path.isEqual(t.path) && (!!(null !== this.startAt ? this.startAt.isEqual(t.startAt) : null === t.startAt) && (null !== this.endAt ? this.endAt.isEqual(t.endAt) : null === t.endAt)));
        }, t.prototype.Tn = function() {
            return j.nt(this.path) && null === this.collectionGroup && 0 === this.filters.length;
        }, t;
    }(), Bt = /** @class */ function() {
        /**
         * Initializes a Query with a path and optional additional query constraints.
         * Path must currently be empty if this is a collection group query.
         */
        function t(t, n, i, e, r, u, s, o) {
            void 0 === n && (n = null), void 0 === i && (i = []), void 0 === e && (e = []), 
            void 0 === r && (r = null), void 0 === u && (u = "F" /* First */), void 0 === s && (s = null), 
            void 0 === o && (o = null), this.path = t, this.collectionGroup = n, this.En = i, 
            this.filters = e, this.limit = r, this.Dn = u, this.startAt = s, this.endAt = o, 
            this.Rn = null, 
            // The corresponding `Target` of this `Query` instance.
            this.Sn = null, this.startAt && this.An(this.startAt), this.endAt && this.An(this.endAt);
        }
        return t.Cn = function(n) {
            return new t(n);
        }, Object.defineProperty(t.prototype, "orderBy", {
            get: function() {
                if (null === this.Rn) {
                    var t = this.Pn(), n = this.Vn();
                    if (null !== t && null === n) 
                    // In order to implicitly add key ordering, we must also add the
                    // inequality filter field for it to be a valid query.
                    // Note that the default inequality field and key ordering is ascending.
                    t.$() ? this.Rn = [ tn ] : this.Rn = [ new Zt(t), tn ]; else {
                        Wn(null === t || null !== n && t.isEqual(n), "First orderBy should match inequality field."), 
                        this.Rn = [];
                        for (var i = !1, e = 0, r = this.En; e < r.length; e++) {
                            var u = r[e];
                            this.Rn.push(u), u.field.$() && (i = !0);
                        }
                        if (!i) {
                            // The order of the implicit key ordering always matches the last
                            // explicit order by
                            var s = this.En.length > 0 ? this.En[this.En.length - 1].dir : Xt.ASCENDING;
                            this.Rn.push(s === Xt.ASCENDING ? tn : nn);
                        }
                    }
                }
                return this.Rn;
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.kn = function(n) {
            Wn(null == this.Pn() || !(n instanceof Wt) || !n.Nn() || n.field.isEqual(this.Pn()), "Query must only have one inequality field."), 
            Wn(!this.Tn(), "No filtering allowed for document query");
            var i = this.filters.concat([ n ]);
            return new t(this.path, this.collectionGroup, this.En.slice(), i, this.limit, this.Dn, this.startAt, this.endAt);
        }, t.prototype.On = function(n) {
            Wn(!this.startAt && !this.endAt, "Bounds must be set after orderBy");
            // TODO(dimond): validate that orderBy does not list the same key twice.
            var i = this.En.concat([ n ]);
            return new t(this.path, this.collectionGroup, i, this.filters.slice(), this.limit, this.Dn, this.startAt, this.endAt);
        }, t.prototype.Fn = function(n) {
            return new t(this.path, this.collectionGroup, this.En.slice(), this.filters.slice(), n, "F" /* First */ , this.startAt, this.endAt);
        }, t.prototype.Un = function(n) {
            return new t(this.path, this.collectionGroup, this.En.slice(), this.filters.slice(), n, "L" /* Last */ , this.startAt, this.endAt);
        }, t.prototype.jn = function(n) {
            return new t(this.path, this.collectionGroup, this.En.slice(), this.filters.slice(), this.limit, this.Dn, n, this.endAt);
        }, t.prototype.xn = function(n) {
            return new t(this.path, this.collectionGroup, this.En.slice(), this.filters.slice(), this.limit, this.Dn, this.startAt, n);
        }, 
        /**
         * Helper to convert a collection group query into a collection query at a
         * specific path. This is used when executing collection group queries, since
         * we have to split the query into a set of collection queries at multiple
         * paths.
         */
        t.prototype.Ln = function(n) {
            return new t(n, 
            /*collectionGroup=*/ null, this.En.slice(), this.filters.slice(), this.limit, this.Dn, this.startAt, this.endAt);
        }, 
        /**
         * Returns true if this query does not specify any query constraints that
         * could remove results.
         */
        t.prototype.Mn = function() {
            return 0 === this.filters.length && null === this.limit && null == this.startAt && null == this.endAt && (0 === this.En.length || 1 === this.En.length && this.En[0].field.$());
        }, 
        // TODO(b/29183165): This is used to get a unique string from a query to, for
        // example, use as a dictionary key, but the implementation is subject to
        // collisions. Make it collision-free.
        t.prototype.canonicalId = function() {
            return this.qn().canonicalId() + "|lt:" + this.Dn;
        }, t.prototype.toString = function() {
            return "Query(target=" + this.qn().toString() + "; limitType=" + this.Dn + ")";
        }, t.prototype.isEqual = function(t) {
            return this.qn().isEqual(t.qn()) && this.Dn === t.Dn;
        }, t.prototype.Bn = function(t, n) {
            for (var i = !1, e = 0, r = this.orderBy; e < r.length; e++) {
                var u = r[e], s = u.compare(t, n);
                if (0 !== s) return s;
                i = i || u.field.$();
            }
            // Assert that we actually compared by key
                    return Wn(i, "orderBy used that doesn't compare on key field"), 0;
        }, t.prototype.matches = function(t) {
            return this.Qn(t) && this.Gn(t) && this.Wn(t) && this.zn(t);
        }, t.prototype.Kn = function() {
            return !J(this.limit) && "F" /* First */ === this.Dn;
        }, t.prototype.Jn = function() {
            return !J(this.limit) && "L" /* Last */ === this.Dn;
        }, t.prototype.Vn = function() {
            return this.En.length > 0 ? this.En[0].field : null;
        }, t.prototype.Pn = function() {
            for (var t = 0, n = this.filters; t < n.length; t++) {
                var i = n[t];
                if (i instanceof Wt && i.Nn()) return i.field;
            }
            return null;
        }, 
        // Checks if any of the provided Operators are included in the query and
        // returns the first one that is, or null if none are.
        t.prototype.Hn = function(t) {
            for (var n = 0, i = this.filters; n < i.length; n++) {
                var e = i[n];
                if (e instanceof Wt && t.indexOf(e.op) >= 0) return e.op;
            }
            return null;
        }, t.prototype.Tn = function() {
            return this.qn().Tn();
        }, t.prototype.Yn = function() {
            return null !== this.collectionGroup;
        }, 
        /**
         * Converts this `Query` instance to it's corresponding `Target`
         * representation.
         */
        t.prototype.qn = function() {
            if (!this.Sn) if ("F" /* First */ === this.Dn) this.Sn = new qt(this.path, this.collectionGroup, this.orderBy, this.filters, this.limit, this.startAt, this.endAt); else {
                for (
                // Flip the orderBy directions since we want the last results
                var t = [], n = 0, i = this.orderBy; n < i.length; n++) {
                    var e = i[n], r = e.dir === Xt.DESCENDING ? Xt.ASCENDING : Xt.DESCENDING;
                    t.push(new Zt(e.field, r));
                }
                // We need to swap the cursors to match the now-flipped query ordering.
                            var u = this.endAt ? new $t(this.endAt.position, !this.endAt.before) : null, s = this.startAt ? new $t(this.startAt.position, !this.startAt.before) : null;
                // Now return as a LimitType.First query.
                this.Sn = new qt(this.path, this.collectionGroup, t, this.filters, this.limit, u, s);
            }
            return this.Sn;
        }, t.prototype.Qn = function(t) {
            var n = t.key.path;
            return null !== this.collectionGroup ? t.key.et(this.collectionGroup) && this.path.G(n) : j.nt(this.path) ? this.path.isEqual(n) : this.path.W(n);
        }, 
        /**
         * A document must have a value for every ordering clause in order to show up
         * in the results.
         */
        t.prototype.Gn = function(t) {
            for (var n = 0, i = this.En; n < i.length; n++) {
                var e = i[n];
                // order by key always matches
                            if (!e.field.$() && null === t.field(e.field)) return !1;
            }
            return !0;
        }, t.prototype.Wn = function(t) {
            for (var n = 0, i = this.filters; n < i.length; n++) {
                if (!i[n].matches(t)) return !1;
            }
            return !0;
        }, 
        /**
         * Makes sure a document is within the bounds, if provided.
         */
        t.prototype.zn = function(t) {
            return !(this.startAt && !this.startAt.Xn(this.orderBy, t)) && (!this.endAt || !this.endAt.Xn(this.orderBy, t));
        }, t.prototype.An = function(t) {
            Wn(t.position.length <= this.orderBy.length, "Bound is longer than orderBy");
        }, t;
    }(), Qt = function() {}, Gt = /** @class */ function() {
        function t(t) {
            this.name = t;
        }
        return t.H = function(n) {
            switch (n) {
              case "<":
                return t.LESS_THAN;

              case "<=":
                return t.LESS_THAN_OR_EQUAL;

              case "==":
                return t.EQUAL;

              case ">=":
                return t.GREATER_THAN_OR_EQUAL;

              case ">":
                return t.GREATER_THAN;

              case "array-contains":
                return t.ARRAY_CONTAINS;

              case "in":
                return t.IN;

              case "array-contains-any":
                return t.ARRAY_CONTAINS_ANY;

              default:
                return Gn("Unknown FieldFilter operator: " + n);
            }
        }, t.prototype.toString = function() {
            return this.name;
        }, t.prototype.isEqual = function(t) {
            return this.name === t.name;
        }, t.LESS_THAN = new t("<"), t.LESS_THAN_OR_EQUAL = new t("<="), t.EQUAL = new t("=="), 
        t.GREATER_THAN = new t(">"), t.GREATER_THAN_OR_EQUAL = new t(">="), t.ARRAY_CONTAINS = new t("array-contains"), 
        t.IN = new t("in"), t.ARRAY_CONTAINS_ANY = new t("array-contains-any"), t;
    }(), Wt = /** @class */ function(t) {
        function i(n, i, e) {
            var r = t.call(this) || this;
            return r.field = n, r.op = i, r.value = e, r;
        }
        /**
         * Creates a filter based on the provided arguments.
         */    return tslib_es6.__extends(i, t), i.create = function(t, n, e) {
            if (t.$()) return n === Gt.IN ? (Wn(dt(e), "Comparing on key with IN, but filter value not an ArrayValue"), 
            Wn((e.arrayValue.values || []).every((function(t) {
                return vt(t);
            })), "Comparing on key with IN, but an array value was not a RefValue"), new Kt(t, e)) : (Wn(vt(e), "Comparing on key, but filter value not a RefValue"), 
            Wn(n !== Gt.ARRAY_CONTAINS && n !== Gt.ARRAY_CONTAINS_ANY, "'" + n.toString() + "' queries don't make sense on document keys."), 
            new zt(t, n, e));
            if (wt(e)) {
                if (n !== Gt.EQUAL) throw new E(T.INVALID_ARGUMENT, "Invalid query. Null supports only equality comparisons.");
                return new i(t, n, e);
            }
            if (mt(e)) {
                if (n !== Gt.EQUAL) throw new E(T.INVALID_ARGUMENT, "Invalid query. NaN supports only equality comparisons.");
                return new i(t, n, e);
            }
            return n === Gt.ARRAY_CONTAINS ? new Jt(t, e) : n === Gt.IN ? (Wn(dt(e), "IN filter has invalid value: " + e.toString()), 
            new Ht(t, e)) : n === Gt.ARRAY_CONTAINS_ANY ? (Wn(dt(e), "ARRAY_CONTAINS_ANY filter has invalid value: " + e.toString()), 
            new Yt(t, e)) : new i(t, n, e);
        }, i.prototype.matches = function(t) {
            var n = t.field(this.field);
            // Only compare types with matching backend order (such as double and int).
                    return null !== n && tt(this.value) === tt(n) && this.$n(et(n, this.value));
        }, i.prototype.$n = function(t) {
            switch (this.op) {
              case Gt.LESS_THAN:
                return t < 0;

              case Gt.LESS_THAN_OR_EQUAL:
                return t <= 0;

              case Gt.EQUAL:
                return 0 === t;

              case Gt.GREATER_THAN:
                return t > 0;

              case Gt.GREATER_THAN_OR_EQUAL:
                return t >= 0;

              default:
                return Gn("Unknown FieldFilter operator: " + this.op);
            }
        }, i.prototype.Nn = function() {
            return [ Gt.LESS_THAN, Gt.LESS_THAN_OR_EQUAL, Gt.GREATER_THAN, Gt.GREATER_THAN_OR_EQUAL ].indexOf(this.op) >= 0;
        }, i.prototype.canonicalId = function() {
            // TODO(b/29183165): Technically, this won't be unique if two values have
            // the same description, such as the int 3 and the string "3". So we should
            // add the types in here somehow, too.
            return this.field.J() + this.op.toString() + ut(this.value);
        }, i.prototype.isEqual = function(t) {
            return t instanceof i && (this.op.isEqual(t.op) && this.field.isEqual(t.field) && nt(this.value, t.value));
        }, i.prototype.toString = function() {
            return this.field.J() + " " + this.op + " " + ut(this.value);
        }, i;
    }(Qt), zt = /** @class */ function(t) {
        function i(n, i, e) {
            var r = t.call(this, n, i, e) || this;
            return Wn(vt(e), "KeyFieldFilter expects a ReferenceValue"), r.key = j.it(e.referenceValue), 
            r;
        }
        return tslib_es6.__extends(i, t), i.prototype.matches = function(t) {
            var n = j.F(t.key, this.key);
            return this.$n(n);
        }, i;
    }(Wt), Kt = /** @class */ function(t) {
        function i(n, i) {
            var e = t.call(this, n, Gt.IN, i) || this;
            return Wn(dt(i), "KeyFieldInFilter expects an ArrayValue"), e.keys = (i.arrayValue.values || []).map((function(t) {
                return Wn(vt(t), "Comparing on key with IN, but an array value was not a ReferenceValue"), 
                j.it(t.referenceValue);
            })), e;
        }
        return tslib_es6.__extends(i, t), i.prototype.matches = function(t) {
            return this.keys.some((function(n) {
                return n.isEqual(t.key);
            }));
        }, i;
    }(Wt), Jt = /** @class */ function(t) {
        function i(n, i) {
            return t.call(this, n, Gt.ARRAY_CONTAINS, i) || this;
        }
        return tslib_es6.__extends(i, t), i.prototype.matches = function(t) {
            var n = t.field(this.field);
            return dt(n) && it(n.arrayValue, this.value);
        }, i;
    }(Wt), Ht = /** @class */ function(t) {
        function i(n, i) {
            var e = t.call(this, n, Gt.IN, i) || this;
            return Wn(dt(i), "InFilter expects an ArrayValue"), e;
        }
        return tslib_es6.__extends(i, t), i.prototype.matches = function(t) {
            var n = t.field(this.field);
            return null !== n && it(this.value.arrayValue, n);
        }, i;
    }(Wt), Yt = /** @class */ function(t) {
        function i(n, i) {
            var e = t.call(this, n, Gt.ARRAY_CONTAINS_ANY, i) || this;
            return Wn(dt(i), "ArrayContainsAnyFilter expects an ArrayValue"), e;
        }
        return tslib_es6.__extends(i, t), i.prototype.matches = function(t) {
            var n = this, i = t.field(this.field);
            return !(!dt(i) || !i.arrayValue.values) && i.arrayValue.values.some((function(t) {
                return it(n.value.arrayValue, t);
            }));
        }, i;
    }(Wt), Xt = /** @class */ function() {
        function t(t) {
            this.name = t;
        }
        return t.prototype.toString = function() {
            return this.name;
        }, t.ASCENDING = new t("asc"), t.DESCENDING = new t("desc"), t;
    }(), $t = /** @class */ function() {
        function t(t, n) {
            this.position = t, this.before = n;
        }
        return t.prototype.canonicalId = function() {
            // TODO(b/29183165): Make this collision robust.
            return (this.before ? "b" : "a") + ":" + this.position.map((function(t) {
                return ut(t);
            })).join(",");
        }, 
        /**
         * Returns true if a document sorts before a bound using the provided sort
         * order.
         */
        t.prototype.Xn = function(t, n) {
            Wn(this.position.length <= t.length, "Bound has more components than query's orderBy");
            for (var i = 0, e = 0; e < this.position.length; e++) {
                var r = t[e], u = this.position[e];
                if (r.field.$()) Wn(vt(u), "Bound has a non-key value where the key path is being used."), 
                i = j.F(j.it(u.referenceValue), n.key); else {
                    var s = n.field(r.field);
                    Wn(null !== s, "Field should exist since document matched the orderBy already."), 
                    i = et(u, s);
                }
                if (r.dir === Xt.DESCENDING && (i *= -1), 0 !== i) break;
            }
            return this.before ? i <= 0 : i < 0;
        }, t.prototype.isEqual = function(t) {
            if (null === t) return !1;
            if (this.before !== t.before || this.position.length !== t.position.length) return !1;
            for (var n = 0; n < this.position.length; n++) {
                if (!nt(this.position[n], t.position[n])) return !1;
            }
            return !0;
        }, t;
    }(), Zt = /** @class */ function() {
        function t(t, n) {
            this.field = t, void 0 === n && (n = Xt.ASCENDING), this.dir = n, this.Zn = t.$();
        }
        return t.prototype.compare = function(t, n) {
            var i = this.Zn ? xt.bn(t, n) : xt._n(this.field, t, n);
            switch (this.dir) {
              case Xt.ASCENDING:
                return i;

              case Xt.DESCENDING:
                return -1 * i;

              default:
                return Gn("Unknown direction: " + this.dir);
            }
        }, t.prototype.canonicalId = function() {
            // TODO(b/29183165): Make this collision robust.
            return this.field.J() + this.dir.toString();
        }, t.prototype.toString = function() {
            return this.field.J() + " (" + this.dir + ")";
        }, t.prototype.isEqual = function(t) {
            return this.dir === t.dir && this.field.isEqual(t.field);
        }, t;
    }(), tn = new Zt(U.Z(), Xt.ASCENDING), nn = new Zt(U.Z(), Xt.DESCENDING), en = /** @class */ function() {
        function t(
        /** The target being listened to. */
        t, 
        /**
         * The target ID to which the target corresponds; Assigned by the
         * LocalStore for user listens and by the SyncEngine for limbo watches.
         */
        n, 
        /** The purpose of the target. */
        i, 
        /**
         * The sequence number of the last transaction during which this target data
         * was modified.
         */
        e, 
        /** The latest snapshot version seen for this target. */
        r, 
        /**
         * The maximum snapshot version at which the associated view
         * contained no limbo documents.
         */
        u, 
        /**
         * An opaque, server-assigned token that allows watching a target to be
         * resumed after disconnecting without retransmitting all the data that
         * matches the target. The resume token essentially identifies a point in
         * time from which the server should resume sending results.
         */
        s) {
            void 0 === r && (r = k.MIN), void 0 === u && (u = k.MIN), void 0 === s && (s = K.Mt), 
            this.target = t, this.targetId = n, this.ti = i, this.sequenceNumber = e, this.ni = r, 
            this.lastLimboFreeSnapshotVersion = u, this.resumeToken = s;
        }
        /** Creates a new target data instance with an updated sequence number. */    return t.prototype.ii = function(n) {
            return new t(this.target, this.targetId, this.ti, n, this.ni, this.lastLimboFreeSnapshotVersion, this.resumeToken);
        }, 
        /**
         * Creates a new target data instance with an updated resume token and
         * snapshot version.
         */
        t.prototype.ei = function(n, i) {
            return new t(this.target, this.targetId, this.ti, this.sequenceNumber, i, this.lastLimboFreeSnapshotVersion, n);
        }, 
        /**
         * Creates a new target data instance with an updated last limbo free
         * snapshot version number.
         */
        t.prototype.ri = function(n) {
            return new t(this.target, this.targetId, this.ti, this.sequenceNumber, this.ni, n, this.resumeToken);
        }, t.prototype.isEqual = function(t) {
            return this.targetId === t.targetId && this.ti === t.ti && this.sequenceNumber === t.sequenceNumber && this.ni.isEqual(t.ni) && this.lastLimboFreeSnapshotVersion.isEqual(t.lastLimboFreeSnapshotVersion) && this.resumeToken.isEqual(t.resumeToken) && this.target.isEqual(t.target);
        }, t;
    }(), rn = /** @class */ function() {
        // TODO(b/33078163): just use simplest form of existence filter for now
        function t(t) {
            this.count = t;
        }
        return t.prototype.isEqual = function(t) {
            return t && t.count === this.count;
        }, t;
    }();

    /** A field path and the TransformOperation to perform upon it. */
    /**
     * Determines whether an error code represents a permanent error when received
     * in response to a non-write operation.
     *
     * See isPermanentWriteError for classifying write errors.
     */
    function un(t) {
        switch (t) {
          case T.OK:
            return Gn("Treated status OK as error");

          case T.CANCELLED:
          case T.UNKNOWN:
          case T.DEADLINE_EXCEEDED:
          case T.RESOURCE_EXHAUSTED:
          case T.INTERNAL:
          case T.UNAVAILABLE:
     // Unauthenticated means something went wrong with our token and we need
            // to retry with new credentials which will happen automatically.
                  case T.UNAUTHENTICATED:
            return !1;

          case T.INVALID_ARGUMENT:
          case T.NOT_FOUND:
          case T.ALREADY_EXISTS:
          case T.PERMISSION_DENIED:
          case T.FAILED_PRECONDITION:
     // Aborted might be retried in some scenarios, but that is dependant on
            // the context and should handled individually by the calling code.
            // See https://cloud.google.com/apis/design/errors.
                  case T.ABORTED:
          case T.OUT_OF_RANGE:
          case T.UNIMPLEMENTED:
          case T.DATA_LOSS:
            return !0;

          default:
            return Gn("Unknown status code: " + t);
        }
    }

    /**
     * Determines whether an error code represents a permanent error when received
     * in response to a write operation.
     *
     * Write operations must be handled specially because as of b/119437764, ABORTED
     * errors on the write stream should be retried too (even though ABORTED errors
     * are not generally retryable).
     *
     * Note that during the initial handshake on the write stream an ABORTED error
     * signals that we should discard our stream token (i.e. it is permanent). This
     * means a handshake error should be classified with isPermanentError, above.
     */
    /**
     * Maps an error Code from GRPC status code number, like 0, 1, or 14. These
     * are not the same as HTTP status codes.
     *
     * @returns The Code equivalent to the given GRPC status code. Fails if there
     *     is no match.
     */
    function sn(t) {
        if (void 0 === t) 
        // This shouldn't normally happen, but in certain error cases (like trying
        // to send invalid proto messages) we may get an error with no GRPC code.
        return Bn("GRPC error has no .code"), T.UNKNOWN;
        switch (t) {
          case Tt.OK:
            return T.OK;

          case Tt.CANCELLED:
            return T.CANCELLED;

          case Tt.UNKNOWN:
            return T.UNKNOWN;

          case Tt.DEADLINE_EXCEEDED:
            return T.DEADLINE_EXCEEDED;

          case Tt.RESOURCE_EXHAUSTED:
            return T.RESOURCE_EXHAUSTED;

          case Tt.INTERNAL:
            return T.INTERNAL;

          case Tt.UNAVAILABLE:
            return T.UNAVAILABLE;

          case Tt.UNAUTHENTICATED:
            return T.UNAUTHENTICATED;

          case Tt.INVALID_ARGUMENT:
            return T.INVALID_ARGUMENT;

          case Tt.NOT_FOUND:
            return T.NOT_FOUND;

          case Tt.ALREADY_EXISTS:
            return T.ALREADY_EXISTS;

          case Tt.PERMISSION_DENIED:
            return T.PERMISSION_DENIED;

          case Tt.FAILED_PRECONDITION:
            return T.FAILED_PRECONDITION;

          case Tt.ABORTED:
            return T.ABORTED;

          case Tt.OUT_OF_RANGE:
            return T.OUT_OF_RANGE;

          case Tt.UNIMPLEMENTED:
            return T.UNIMPLEMENTED;

          case Tt.DATA_LOSS:
            return T.DATA_LOSS;

          default:
            return Gn("Unknown status code: " + t);
        }
    }

    /**
     * Converts an HTTP response's error status to the equivalent error code.
     *
     * @param status An HTTP error response status ("FAILED_PRECONDITION",
     * "UNKNOWN", etc.)
     * @returns The equivalent Code. Non-matching responses are mapped to
     *     Code.UNKNOWN.
     */ (Et = Tt || (Tt = {}))[Et.OK = 0] = "OK", Et[Et.CANCELLED = 1] = "CANCELLED", 
    Et[Et.UNKNOWN = 2] = "UNKNOWN", Et[Et.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", 
    Et[Et.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", Et[Et.NOT_FOUND = 5] = "NOT_FOUND", 
    Et[Et.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", Et[Et.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", 
    Et[Et.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", Et[Et.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", 
    Et[Et.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", Et[Et.ABORTED = 10] = "ABORTED", 
    Et[Et.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", Et[Et.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", 
    Et[Et.INTERNAL = 13] = "INTERNAL", Et[Et.UNAVAILABLE = 14] = "UNAVAILABLE", Et[Et.DATA_LOSS = 15] = "DATA_LOSS";

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var on = new x(j.F);

    function hn() {
        return on;
    }

    function cn() {
        return hn();
    }

    var an = new x(j.F);

    function fn() {
        return an;
    }

    var ln = new x(j.F);

    function dn() {
        return ln;
    }

    var vn = new B(j.F);

    function wn() {
        for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
        for (var i = vn, e = 0, r = t; e < r.length; e++) {
            var u = r[e];
            i = i.add(u);
        }
        return i;
    }

    var mn = new B(Kn);

    function pn() {
        return mn;
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * DocumentSet is an immutable (copy-on-write) collection that holds documents
     * in order specified by the provided comparator. We always add a document key
     * comparator on top of what is provided to guarantee document equality based on
     * the key.
     */ var bn = /** @class */ function() {
        /** The default ordering is by key if the comparator is omitted */
        function t(t) {
            // We are adding document key comparator to the end as it's the only
            // guaranteed unique property of a document.
            this.F = t ? function(n, i) {
                return t(n, i) || j.F(n.key, i.key);
            } : function(t, n) {
                return j.F(t.key, n.key);
            }, this.ui = fn(), this.si = new x(this.F);
        }
        /**
         * Returns an empty copy of the existing DocumentSet, using the same
         * comparator.
         */    return t.oi = function(n) {
            return new t(n.F);
        }, t.prototype.has = function(t) {
            return null != this.ui.get(t);
        }, t.prototype.get = function(t) {
            return this.ui.get(t);
        }, t.prototype.first = function() {
            return this.si.ot();
        }, t.prototype.last = function() {
            return this.si.ht();
        }, t.prototype.M = function() {
            return this.si.M();
        }, 
        /**
         * Returns the index of the provided key in the document set, or -1 if the
         * document key is not present in the set;
         */
        t.prototype.indexOf = function(t) {
            var n = this.ui.get(t);
            return n ? this.si.indexOf(n) : -1;
        }, Object.defineProperty(t.prototype, "size", {
            get: function() {
                return this.si.size;
            },
            enumerable: !0,
            configurable: !0
        }), 
        /** Iterates documents in order defined by "comparator" */
        t.prototype.forEach = function(t) {
            this.si.ct((function(n, i) {
                return t(n), !1;
            }));
        }, 
        /** Inserts or updates a document with the same key */
        t.prototype.add = function(t) {
            // First remove the element if we have it.
            var n = this.delete(t.key);
            return n.copy(n.ui.ut(t.key, t), n.si.ut(t, null));
        }, 
        /** Deletes a document with a given key */
        t.prototype.delete = function(t) {
            var n = this.get(t);
            return n ? this.copy(this.ui.remove(t), this.si.remove(n)) : this;
        }, t.prototype.isEqual = function(n) {
            if (!(n instanceof t)) return !1;
            if (this.size !== n.size) return !1;
            for (var i = this.si.ft(), e = n.si.ft(); i.gt(); ) {
                var r = i.bt().key, u = e.bt().key;
                if (!r.isEqual(u)) return !1;
            }
            return !0;
        }, t.prototype.toString = function() {
            var t = [];
            return this.forEach((function(n) {
                t.push(n.toString());
            })), 0 === t.length ? "DocumentSet ()" : "DocumentSet (\n  " + t.join("  \n") + "\n)";
        }, t.prototype.copy = function(n, i) {
            var e = new t;
            return e.F = this.F, e.ui = n, e.si = i, e;
        }, t;
    }(), gn = /** @class */ function() {
        function t() {
            this.hi = new x(j.F);
        }
        return t.prototype.track = function(t) {
            var n = t.doc.key, i = this.hi.get(n);
            i ? 
            // Merge the new change with the existing change.
            0 /* Added */ !== t.type && 3 /* Metadata */ === i.type ? this.hi = this.hi.ut(n, t) : 3 /* Metadata */ === t.type && 1 /* Removed */ !== i.type ? this.hi = this.hi.ut(n, {
                type: i.type,
                doc: t.doc
            }) : 2 /* Modified */ === t.type && 2 /* Modified */ === i.type ? this.hi = this.hi.ut(n, {
                type: 2 /* Modified */ ,
                doc: t.doc
            }) : 2 /* Modified */ === t.type && 0 /* Added */ === i.type ? this.hi = this.hi.ut(n, {
                type: 0 /* Added */ ,
                doc: t.doc
            }) : 1 /* Removed */ === t.type && 0 /* Added */ === i.type ? this.hi = this.hi.remove(n) : 1 /* Removed */ === t.type && 2 /* Modified */ === i.type ? this.hi = this.hi.ut(n, {
                type: 1 /* Removed */ ,
                doc: i.doc
            }) : 0 /* Added */ === t.type && 1 /* Removed */ === i.type ? this.hi = this.hi.ut(n, {
                type: 2 /* Modified */ ,
                doc: t.doc
            }) : 
            // This includes these cases, which don't make sense:
            // Added->Added
            // Removed->Removed
            // Modified->Added
            // Removed->Modified
            // Metadata->Added
            // Removed->Metadata
            Gn("unsupported combination of changes: " + JSON.stringify(t) + " after " + JSON.stringify(i)) : this.hi = this.hi.ut(n, t);
        }, t.prototype.ci = function() {
            var t = [];
            return this.hi.ct((function(n, i) {
                t.push(i);
            })), t;
        }, t;
    }(), yn = /** @class */ function() {
        function t(t, n, i, e, r, u, s, o) {
            this.query = t, this.docs = n, this.ai = i, this.docChanges = e, this.fi = r, this.fromCache = u, 
            this.li = s, this.di = o;
        }
        /** Returns a view snapshot as if all documents in the snapshot were added. */    return t.vi = function(n, i, e, r) {
            var u = [];
            return i.forEach((function(t) {
                u.push({
                    type: 0 /* Added */ ,
                    doc: t
                });
            })), new t(n, i, bn.oi(i), u, e, r, 
            /* syncStateChanged= */ !0, 
            /* excludesMetadataChanges= */ !1);
        }, Object.defineProperty(t.prototype, "hasPendingWrites", {
            get: function() {
                return !this.fi.M();
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.isEqual = function(t) {
            if (!(this.fromCache === t.fromCache && this.li === t.li && this.fi.isEqual(t.fi) && this.query.isEqual(t.query) && this.docs.isEqual(t.docs) && this.ai.isEqual(t.ai))) return !1;
            var n = this.docChanges, i = t.docChanges;
            if (n.length !== i.length) return !1;
            for (var e = 0; e < n.length; e++) if (n[e].type !== i[e].type || !n[e].doc.isEqual(i[e].doc)) return !1;
            return !0;
        }, t;
    }(), _n = /** @class */ function() {
        function t(
        /**
         * The snapshot version this event brings us up to, or MIN if not set.
         */
        t, 
        /**
         * A map from target to changes to the target. See TargetChange.
         */
        n, 
        /**
         * A set of targets that is known to be inconsistent. Listens for these
         * targets should be re-established without resume tokens.
         */
        i, 
        /**
         * A set of which documents have changed or been deleted, along with the
         * doc's new values (if not deleted).
         */
        e, 
        /**
         * A set of which document updates are due only to limbo resolution targets.
         */
        r) {
            this.ni = t, this.wi = n, this.mi = i, this.pi = e, this.bi = r;
        }
        /**
         * HACK: Views require RemoteEvents in order to determine whether the view is
         * CURRENT, but secondary tabs don't receive remote events. So this method is
         * used to create a synthesized RemoteEvent that can be used to apply a
         * CURRENT status change to a View, for queries executed in a different tab.
         */
        // PORTING NOTE: Multi-tab only
            return t.gi = function(n, i) {
            var e = new Map;
            return e.set(n, In.yi(n, i)), new t(k.MIN, e, pn(), hn(), wn());
        }, t;
    }(), In = /** @class */ function() {
        function t(
        /**
         * An opaque, server-assigned token that allows watching a query to be resumed
         * after disconnecting without retransmitting all the data that matches the
         * query. The resume token essentially identifies a point in time from which
         * the server should resume sending results.
         */
        t, 
        /**
         * The "current" (synced) status of this target. Note that "current"
         * has special meaning in the RPC protocol that implies that a target is
         * both up-to-date and consistent with the rest of the watch stream.
         */
        n, 
        /**
         * The set of documents that were newly assigned to this target as part of
         * this remote event.
         */
        i, 
        /**
         * The set of documents that were already assigned to this target but received
         * an update during this remote event.
         */
        e, 
        /**
         * The set of documents that were removed from this target as part of this
         * remote event.
         */
        r) {
            this.resumeToken = t, this._i = n, this.Ii = i, this.Ti = e, this.Ei = r;
        }
        /**
         * This method is used to create a synthesized TargetChanges that can be used to
         * apply a CURRENT status change to a View (for queries executed in a different
         * tab) or for new queries (to raise snapshots with correct CURRENT status).
         */    return t.yi = function(n, i) {
            return new t(K.Mt, i, wn(), wn(), wn());
        }, t;
    }(), Tn = function(
    /** The new document applies to all of these targets. */
    t, 
    /** The new document is removed from all of these targets. */
    n, 
    /** The key of the document for this change. */
    i, 
    /**
         * The new document or NoDocument if it was deleted. Is null if the
         * document went out of view without the server sending a new document.
         */
    e) {
        this.Di = t, this.removedTargetIds = n, this.key = i, this.Ri = e;
    }, En = function(t, n) {
        this.targetId = t, this.Si = n;
    }, Dn = function(
    /** What kind of change occurred to the watch target. */
    t, 
    /** The target IDs that were added/removed/set. */
    n, 
    /**
         * An opaque, server-assigned token that allows watching a target to be
         * resumed after disconnecting without retransmitting all the data that
         * matches the target. The resume token essentially identifies a point in
         * time from which the server should resume sending results.
         */
    i, 
    /** An RPC error indicating why the watch failed. */
    e) {
        void 0 === i && (i = K.Mt), void 0 === e && (e = null), this.state = t, this.targetIds = n, 
        this.resumeToken = i, this.cause = e;
    }, Rn = /** @class */ function() {
        function t() {
            /**
             * The number of pending responses (adds or removes) that we are waiting on.
             * We only consider targets active that have no pending responses.
             */
            this.Ai = 0, 
            /**
             * Keeps track of the document changes since the last raised snapshot.
             *
             * These changes are continuously updated as we receive document updates and
             * always reflect the current set of changes against the last issued snapshot.
             */
            this.Ci = Cn(), 
            /** See public getters for explanations of these fields. */
            this.Pi = K.Mt, this.Vi = !1, 
            /**
             * Whether this target state should be included in the next snapshot. We
             * initialize to true so that newly-added targets are included in the next
             * RemoteEvent.
             */
            this.ki = !0;
        }
        return Object.defineProperty(t.prototype, "_i", {
            /**
             * Whether this target has been marked 'current'.
             *
             * 'Current' has special meaning in the RPC protocol: It implies that the
             * Watch backend has sent us all changes up to the point at which the target
             * was added and that the target is consistent with the rest of the watch
             * stream.
             */
            get: function() {
                return this.Vi;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(t.prototype, "resumeToken", {
            /** The last resume token sent to us for this target. */
            get: function() {
                return this.Pi;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(t.prototype, "Ni", {
            /** Whether this target has pending target adds or target removes. */
            get: function() {
                return 0 !== this.Ai;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(t.prototype, "Oi", {
            /** Whether we have modified any state that should trigger a snapshot. */
            get: function() {
                return this.ki;
            },
            enumerable: !0,
            configurable: !0
        }), 
        /**
         * Applies the resume token to the TargetChange, but only when it has a new
         * value. Empty resumeTokens are discarded.
         */
        t.prototype.Fi = function(t) {
            t.Lt() > 0 && (this.ki = !0, this.Pi = t);
        }, 
        /**
         * Creates a target change from the current set of changes.
         *
         * To reset the document changes after raising this snapshot, call
         * `clearPendingChanges()`.
         */
        t.prototype.Ui = function() {
            var t = wn(), n = wn(), i = wn();
            return this.Ci.forEach((function(e, r) {
                switch (r) {
                  case 0 /* Added */ :
                    t = t.add(e);
                    break;

                  case 2 /* Modified */ :
                    n = n.add(e);
                    break;

                  case 1 /* Removed */ :
                    i = i.add(e);
                    break;

                  default:
                    Gn("Encountered invalid change type: " + r);
                }
            })), new In(this.Pi, this.Vi, t, n, i);
        }, 
        /**
         * Resets the document changes and sets `hasPendingChanges` to false.
         */
        t.prototype.ji = function() {
            this.ki = !1, this.Ci = Cn();
        }, t.prototype.xi = function(t, n) {
            this.ki = !0, this.Ci = this.Ci.ut(t, n);
        }, t.prototype.Li = function(t) {
            this.ki = !0, this.Ci = this.Ci.remove(t);
        }, t.prototype.Mi = function() {
            this.Ai += 1;
        }, t.prototype.qi = function() {
            this.Ai -= 1;
        }, t.prototype.Bi = function() {
            this.ki = !0, this.Vi = !0;
        }, t;
    }(), Sn = /** @class */ function() {
        function t(t) {
            this.Qi = t, 
            /** The internal state of all tracked targets. */
            this.Gi = new Map, 
            /** Keeps track of the documents to update since the last raised snapshot. */
            this.Wi = hn(), 
            /** A mapping of document keys to their set of target IDs. */
            this.zi = An(), 
            /**
             * A list of targets with existence filter mismatches. These targets are
             * known to be inconsistent and their listens needs to be re-established by
             * RemoteStore.
             */
            this.Ki = new B(Kn);
        }
        /**
         * Processes and adds the DocumentWatchChange to the current set of changes.
         */    return t.prototype.Ji = function(t) {
            for (var n = 0, i = t.Di; n < i.length; n++) {
                var e = i[n];
                t.Ri instanceof xt ? this.Hi(e, t.Ri) : t.Ri instanceof Lt && this.Yi(e, t.key, t.Ri);
            }
            for (var r = 0, u = t.removedTargetIds; r < u.length; r++) {
                e = u[r];
                this.Yi(e, t.key, t.Ri);
            }
        }, 
        /** Processes and adds the WatchTargetChange to the current set of changes. */
        t.prototype.Xi = function(t) {
            var n = this;
            this.$i(t, (function(i) {
                var e = n.Zi(i);
                switch (t.state) {
                  case 0 /* NoChange */ :
                    n.te(i) && e.Fi(t.resumeToken);
                    break;

                  case 1 /* Added */ :
                    // We need to decrement the number of pending acks needed from watch
                    // for this targetId.
                    e.qi(), e.Ni || 
                    // We have a freshly added target, so we need to reset any state
                    // that we had previously. This can happen e.g. when remove and add
                    // back a target for existence filter mismatches.
                    e.ji(), e.Fi(t.resumeToken);
                    break;

                  case 2 /* Removed */ :
                    // We need to keep track of removed targets to we can post-filter and
                    // remove any target changes.
                    // We need to decrement the number of pending acks needed from watch
                    // for this targetId.
                    e.qi(), e.Ni || n.removeTarget(i), Wn(!t.cause, "WatchChangeAggregator does not handle errored targets");
                    break;

                  case 3 /* Current */ :
                    n.te(i) && (e.Bi(), e.Fi(t.resumeToken));
                    break;

                  case 4 /* Reset */ :
                    n.te(i) && (
                    // Reset the target and synthesizes removes for all existing
                    // documents. The backend will re-add any documents that still
                    // match the target before it sends the next global snapshot.
                    n.ne(i), e.Fi(t.resumeToken));
                    break;

                  default:
                    Gn("Unknown target watch change state: " + t.state);
                }
            }));
        }, 
        /**
         * Iterates over all targetIds that the watch change applies to: either the
         * targetIds explicitly listed in the change or the targetIds of all currently
         * active targets.
         */
        t.prototype.$i = function(t, n) {
            t.targetIds.length > 0 ? t.targetIds.forEach(n) : this.Gi.forEach((function(t, i) {
                return n(i);
            }));
        }, 
        /**
         * Handles existence filters and synthesizes deletes for filter mismatches.
         * Targets that are invalidated by filter mismatches are added to
         * `pendingTargetResets`.
         */
        t.prototype.ie = function(t) {
            var n = t.targetId, i = t.Si.count, e = this.ee(n);
            if (e) {
                var r = e.target;
                if (r.Tn()) if (0 === i) {
                    // The existence filter told us the document does not exist. We deduce
                    // that this document does not exist and apply a deleted document to
                    // our updates. Without applying this deleted document there might be
                    // another query that will raise this document as part of a snapshot
                    // until it is resolved, essentially exposing inconsistency between
                    // queries.
                    var u = new j(r.path);
                    this.Yi(n, u, new Lt(u, k.V()));
                } else Wn(1 === i, "Single document existence filter with count: " + i); else this.re(n) !== i && (
                // Existence filter mismatch: We reset the mapping and raise a new
                // snapshot with `isFromCache:true`.
                this.ne(n), this.Ki = this.Ki.add(n));
            }
        }, 
        /**
         * Converts the currently accumulated state into a remote event at the
         * provided snapshot version. Resets the accumulated changes before returning.
         */
        t.prototype.ue = function(t) {
            var n = this, i = new Map;
            this.Gi.forEach((function(e, r) {
                var u = n.ee(r);
                if (u) {
                    if (e._i && u.target.Tn()) {
                        // Document queries for document that don't exist can produce an empty
                        // result set. To update our local cache, we synthesize a document
                        // delete if we have not previously received the document. This
                        // resolves the limbo state of the document, removing it from
                        // limboDocumentRefs.
                        // TODO(dimond): Ideally we would have an explicit lookup target
                        // instead resulting in an explicit delete message and we could
                        // remove this special logic.
                        var s = new j(u.target.path);
                        null !== n.Wi.get(s) || n.se(r, s) || n.Yi(r, s, new Lt(s, t));
                    }
                    e.Oi && (i.set(r, e.Ui()), e.ji());
                }
            }));
            var e = wn();
            // We extract the set of limbo-only document updates as the GC logic
            // special-cases documents that do not appear in the target cache.
            
            // TODO(gsoltis): Expand on this comment once GC is available in the JS
            // client.
                    this.zi.forEach((function(t, i) {
                var r = !0;
                i.Nt((function(t) {
                    var i = n.ee(t);
                    return !i || 2 /* LimboResolution */ === i.ti || (r = !1, !1);
                })), r && (e = e.add(t));
            }));
            var r = new _n(t, i, this.Ki, this.Wi, e);
            return this.Wi = hn(), this.zi = An(), this.Ki = new B(Kn), r;
        }, 
        /**
         * Adds the provided document to the internal list of document updates and
         * its document key to the given target's mapping.
         */
        // Visible for testing.
        t.prototype.Hi = function(t, n) {
            if (this.te(t)) {
                var i = this.se(t, n.key) ? 2 /* Modified */ : 0 /* Added */;
                this.Zi(t).xi(n.key, i), this.Wi = this.Wi.ut(n.key, n), this.zi = this.zi.ut(n.key, this.oe(n.key).add(t));
            }
        }, 
        /**
         * Removes the provided document from the target mapping. If the
         * document no longer matches the target, but the document's state is still
         * known (e.g. we know that the document was deleted or we received the change
         * that caused the filter mismatch), the new document can be provided
         * to update the remote document cache.
         */
        // Visible for testing.
        t.prototype.Yi = function(t, n, i) {
            if (this.te(t)) {
                var e = this.Zi(t);
                this.se(t, n) ? e.xi(n, 1 /* Removed */) : 
                // The document may have entered and left the target before we raised a
                // snapshot, so we can just ignore the change.
                e.Li(n), this.zi = this.zi.ut(n, this.oe(n).delete(t)), i && (this.Wi = this.Wi.ut(n, i));
            }
        }, t.prototype.removeTarget = function(t) {
            this.Gi.delete(t);
        }, 
        /**
         * Returns the current count of documents in the target. This includes both
         * the number of documents that the LocalStore considers to be part of the
         * target as well as any accumulated changes.
         */
        t.prototype.re = function(t) {
            var n = this.Zi(t).Ui();
            return this.Qi.he(t).size + n.Ii.size - n.Ei.size;
        }, 
        /**
         * Increment the number of acks needed from watch before we can consider the
         * server to be 'in-sync' with the client's active targets.
         */
        t.prototype.Mi = function(t) {
            this.Zi(t).Mi();
        }, t.prototype.Zi = function(t) {
            var n = this.Gi.get(t);
            return n || (n = new Rn, this.Gi.set(t, n)), n;
        }, t.prototype.oe = function(t) {
            var n = this.zi.get(t);
            return n || (n = new B(Kn), this.zi = this.zi.ut(t, n)), n;
        }, 
        /**
         * Verifies that the user is still interested in this target (by calling
         * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
         * from watch.
         */
        t.prototype.te = function(t) {
            var n = null !== this.ee(t);
            return n || qn("WatchChangeAggregator", "Detected inactive target", t), n;
        }, 
        /**
         * Returns the TargetData for an active target (i.e. a target that the user
         * is still interested in that has no outstanding target change requests).
         */
        t.prototype.ee = function(t) {
            var n = this.Gi.get(t);
            return n && n.Ni ? null : this.Qi.ce(t);
        }, 
        /**
         * Resets the state of a Watch target to its initial state (e.g. sets
         * 'current' to false, clears the resume token and removes its target mapping
         * from all documents).
         */
        t.prototype.ne = function(t) {
            var n = this;
            Wn(!this.Gi.get(t).Ni, "Should only reset active targets"), this.Gi.set(t, new Rn), 
            this.Qi.he(t).forEach((function(i) {
                n.Yi(t, i, /*updatedDocument=*/ null);
            }));
        }, 
        /**
         * Returns whether the LocalStore considers the document to be part of the
         * specified target.
         */
        t.prototype.se = function(t, n) {
            return this.Qi.he(t).has(n);
        }, t;
    }();

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * DocumentChangeSet keeps track of a set of changes to docs in a query, merging
     * duplicate events for the same doc.
     */ function An() {
        return new x(j.F);
    }

    function Cn() {
        return new x(j.F);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var Pn, Vn, kn = ((Pn = {})[Xt.ASCENDING.name] = "ASCENDING", Pn[Xt.DESCENDING.name] = "DESCENDING", 
    Pn), Nn = ((Vn = {})[Gt.LESS_THAN.name] = "LESS_THAN", Vn[Gt.LESS_THAN_OR_EQUAL.name] = "LESS_THAN_OR_EQUAL", 
    Vn[Gt.GREATER_THAN.name] = "GREATER_THAN", Vn[Gt.GREATER_THAN_OR_EQUAL.name] = "GREATER_THAN_OR_EQUAL", 
    Vn[Gt.EQUAL.name] = "EQUAL", Vn[Gt.ARRAY_CONTAINS.name] = "ARRAY_CONTAINS", Vn[Gt.IN.name] = "IN", 
    Vn[Gt.ARRAY_CONTAINS_ANY.name] = "ARRAY_CONTAINS_ANY", Vn);

    function On(t, n) {
        Wn(!J(t), n + " is missing");
    }

    /**
     * Generates JsonObject values for the Datastore API suitable for sending to
     * either GRPC stub methods or via the JSON/HTTP REST API.
     * TODO(klimt): We can remove the databaseId argument if we keep the full
     * resource name in documents.
     */ var Fn = /** @class */ function() {
        function t(t, n) {
            this.ae = t, this.options = n;
        }
        return t.prototype.fe = function(t) {
            var n = void 0 === t.code ? T.UNKNOWN : sn(t.code);
            return new E(n, t.message || "");
        }, 
        /**
         * Returns a value for a number (or null) that's appropriate to put into
         * a google.protobuf.Int32Value proto.
         * DO NOT USE THIS FOR ANYTHING ELSE.
         * This method cheats. It's typed as returning "number" because that's what
         * our generated proto interfaces say Int32Value must be. But GRPC actually
         * expects a { value: <number> } struct.
         */
        t.prototype.le = function(t) {
            return this.options.de || J(t) ? t : {
                value: t
            };
        }, 
        /**
         * Returns a number (or null) from a google.protobuf.Int32Value proto.
         */
        t.prototype.ve = function(t) {
            var n;
            return J(n = "object" == typeof t ? t.value : t) ? null : n;
        }, 
        /**
         * Returns an IntegerValue for `value`.
         */
        t.prototype.Wt = function(t) {
            return {
                integerValue: "" + t
            };
        }, 
        /**
         * Returns an DoubleValue for `value` that is encoded based the serializer's
         * `useProto3Json` setting.
         */
        t.prototype.zt = function(t) {
            if (this.options.de) {
                if (isNaN(t)) return {
                    doubleValue: "NaN"
                };
                if (t === 1 / 0) return {
                    doubleValue: "Infinity"
                };
                if (t === -1 / 0) return {
                    doubleValue: "-Infinity"
                };
            }
            return {
                doubleValue: H(t) ? "-0" : t
            };
        }, 
        /**
         * Returns a value for a number that's appropriate to put into a proto.
         * The return value is an IntegerValue if it can safely represent the value,
         * otherwise a DoubleValue is returned.
         */
        t.prototype.we = function(t) {
            return Y(t) ? this.Wt(t) : this.zt(t);
        }, 
        /**
         * Returns a value for a Date that's appropriate to put into a proto.
         */
        t.prototype.O = function(t) {
            return this.options.de ? new Date(1e3 * t.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "") + "." + ("000000000" + t.nanoseconds).slice(-9) + "Z" : {
                seconds: "" + t.seconds,
                nanos: t.nanoseconds
            };
        }, t.prototype.P = function(t) {
            var n = ot(t);
            return new V(n.seconds, n.nanos);
        }, 
        /**
         * Returns a value for bytes that's appropriate to put in a proto.
         *
         * Visible for testing.
         */
        t.prototype.me = function(t) {
            return this.options.de ? t.toBase64() : t.toUint8Array();
        }, 
        /**
         * Returns a ByteString based on the proto string value.
         */
        t.prototype.pe = function(t) {
            return this.options.de ? (Wn(void 0 === t || "string" == typeof t, "value must be undefined or a string when using proto3 Json"), 
            K.fromBase64String(t || "")) : (Wn(void 0 === t || t instanceof Uint8Array, "value must be undefined or Uint8Array"), 
            K.fromUint8Array(t || new Uint8Array));
        }, t.prototype.toVersion = function(t) {
            return this.O(t.O());
        }, t.prototype.fromVersion = function(t) {
            return Wn(!!t, "Trying to deserialize version that isn't set"), k.P(this.P(t));
        }, t.prototype.be = function(t, n) {
            return this.ge(n || this.ae).child("documents").child(t).J();
        }, t.prototype.ye = function(t) {
            var n = O.H(t);
            return Wn(Un(n), "Tried to deserialize invalid key " + n.toString()), n;
        }, t.prototype._e = function(t) {
            return this.be(t.path);
        }, t.prototype.it = function(t) {
            var n = this.ye(t);
            return Wn(n.get(1) === this.ae.projectId, "Tried to deserialize key from different project: " + n.get(1) + " vs " + this.ae.projectId), 
            Wn(!n.get(3) && !this.ae.database || n.get(3) === this.ae.database, "Tried to deserialize key from different database: " + n.get(3) + " vs " + this.ae.database), 
            new j(this.Ie(n));
        }, t.prototype.Te = function(t) {
            return this.be(t);
        }, t.prototype.Ee = function(t) {
            var n = this.ye(t);
            // In v1beta1 queries for collections at the root did not have a trailing
            // "/documents". In v1 all resource paths contain "/documents". Preserve the
            // ability to read the v1beta1 form for compatibility with queries persisted
            // in the local target cache.
                    return 4 === n.length ? O.Y : this.Ie(n);
        }, Object.defineProperty(t.prototype, "De", {
            get: function() {
                return new O([ "projects", this.ae.projectId, "databases", this.ae.database ]).J();
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.ge = function(t) {
            return new O([ "projects", t.projectId, "databases", t.database ]);
        }, t.prototype.Ie = function(t) {
            return Wn(t.length > 4 && "documents" === t.get(4), "tried to deserialize invalid key " + t.toString()), 
            t.j(5);
        }, 
        /** Creates an api.Document from key and fields (but no create/update time) */
        t.prototype.Re = function(t, n) {
            return {
                name: this._e(t),
                fields: n.proto.mapValue.fields
            };
        }, t.prototype.Se = function(t) {
            return Wn(!t.nn, "Can't serialize documents with mutations."), {
                name: this._e(t.key),
                fields: t.yn().mapValue.fields,
                updateTime: this.O(t.version.O())
            };
        }, t.prototype.Ae = function(t, n) {
            var i = this.it(t.name), e = this.fromVersion(t.updateTime), r = new Ft({
                mapValue: {
                    fields: t.fields
                }
            });
            return new xt(i, e, r, {
                hasCommittedMutations: !!n
            });
        }, t.prototype.Ce = function(t) {
            Wn(!!t.found, "Tried to deserialize a found document from a missing document."), 
            On(t.found.name, "doc.found.name"), On(t.found.updateTime, "doc.found.updateTime");
            var n = this.it(t.found.name), i = this.fromVersion(t.found.updateTime), e = new Ft({
                mapValue: {
                    fields: t.found.fields
                }
            });
            return new xt(n, i, e, {});
        }, t.prototype.Pe = function(t) {
            Wn(!!t.missing, "Tried to deserialize a missing document from a found document."), 
            Wn(!!t.readTime, "Tried to deserialize a missing document without a read time.");
            var n = this.it(t.missing), i = this.fromVersion(t.readTime);
            return new Lt(n, i);
        }, t.prototype.Ve = function(t) {
            return "found" in t ? this.Ce(t) : "missing" in t ? this.Pe(t) : Gn("invalid batch get response: " + JSON.stringify(t));
        }, t.prototype.ke = function(t) {
            var n;
            if ("targetChange" in t) {
                On(t.targetChange, "targetChange");
                // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'
                // if unset
                var i = this.Ne(t.targetChange.targetChangeType || "NO_CHANGE"), e = t.targetChange.targetIds || [], r = this.pe(t.targetChange.resumeToken), u = t.targetChange.cause, s = u && this.fe(u);
                n = new Dn(i, e, r, s || null);
            } else if ("documentChange" in t) {
                On(t.documentChange, "documentChange");
                var o = t.documentChange;
                On(o.document, "documentChange.name"), On(o.document.name, "documentChange.document.name"), 
                On(o.document.updateTime, "documentChange.document.updateTime");
                var h = this.it(o.document.name), c = this.fromVersion(o.document.updateTime), a = new Ft({
                    mapValue: {
                        fields: o.document.fields
                    }
                }), f = new xt(h, c, a, {}), l = o.targetIds || [], d = o.removedTargetIds || [];
                n = new Tn(l, d, f.key, f);
            } else if ("documentDelete" in t) {
                On(t.documentDelete, "documentDelete");
                var v = t.documentDelete;
                On(v.document, "documentDelete.document");
                h = this.it(v.document), c = v.readTime ? this.fromVersion(v.readTime) : k.V(), 
                f = new Lt(h, c), d = v.removedTargetIds || [];
                n = new Tn([], d, f.key, f);
            } else if ("documentRemove" in t) {
                On(t.documentRemove, "documentRemove");
                var w = t.documentRemove;
                On(w.document, "documentRemove");
                h = this.it(w.document), d = w.removedTargetIds || [];
                n = new Tn([], d, h, null);
            } else {
                if (!("filter" in t)) return Gn("Unknown change type " + JSON.stringify(t));
                // TODO(dimond): implement existence filter parsing with strategy.
                On(t.filter, "filter");
                var m = t.filter;
                On(m.targetId, "filter.targetId");
                var p = m.count || 0, b = new rn(p), g = m.targetId;
                n = new En(g, b);
            }
            return n;
        }, t.prototype.Ne = function(t) {
            return "NO_CHANGE" === t ? 0 /* NoChange */ : "ADD" === t ? 1 /* Added */ : "REMOVE" === t ? 2 /* Removed */ : "CURRENT" === t ? 3 /* Current */ : "RESET" === t ? 4 /* Reset */ : Gn("Got unexpected TargetChange.state: " + t);
        }, t.prototype.Oe = function(t) {
            // We have only reached a consistent snapshot for the entire stream if there
            // is a read_time set and it applies to all targets (i.e. the list of
            // targets is empty). The backend is guaranteed to send such responses.
            if (!("targetChange" in t)) return k.MIN;
            var n = t.targetChange;
            return n.targetIds && n.targetIds.length ? k.MIN : n.readTime ? this.fromVersion(n.readTime) : k.MIN;
        }, t.prototype.Fe = function(t) {
            var n, i = this;
            if (t instanceof Pt) n = {
                update: this.Re(t.key, t.value)
            }; else if (t instanceof Nt) n = {
                delete: this._e(t.key)
            }; else if (t instanceof Vt) n = {
                update: this.Re(t.key, t.data),
                updateMask: this.Ue(t.en)
            }; else if (t instanceof kt) n = {
                transform: {
                    document: this._e(t.key),
                    fieldTransforms: t.fieldTransforms.map((function(t) {
                        return i.je(t);
                    }))
                }
            }; else {
                if (!(t instanceof Ot)) return Gn("Unknown mutation type " + t.type);
                n = {
                    verify: this._e(t.key)
                };
            }
            return t.tn.Yt || (n.currentDocument = this.xe(t.tn)), n;
        }, t.prototype.Le = function(t) {
            var n = this, i = t.currentDocument ? this.Me(t.currentDocument) : At.NONE;
            if (t.update) {
                On(t.update.name, "name");
                var e = this.it(t.update.name), r = new Ft({
                    mapValue: {
                        fields: t.update.fields
                    }
                });
                if (t.updateMask) {
                    var u = this.qe(t.updateMask);
                    return new Vt(e, r, u, i);
                }
                return new Pt(e, r, i);
            }
            if (t.delete) {
                e = this.it(t.delete);
                return new Nt(e, i);
            }
            if (t.transform) {
                e = this.it(t.transform.document);
                var s = t.transform.fieldTransforms.map((function(t) {
                    return n.Be(t);
                }));
                return Wn(!0 === i.exists, 'Transforms only support precondition "exists == true"'), 
                new kt(e, s);
            }
            if (t.verify) {
                e = this.it(t.verify);
                return new Ot(e, i);
            }
            return Gn("unknown mutation proto: " + JSON.stringify(t));
        }, t.prototype.xe = function(t) {
            return Wn(!t.Yt, "Can't serialize an empty precondition"), void 0 !== t.updateTime ? {
                updateTime: this.toVersion(t.updateTime)
            } : void 0 !== t.exists ? {
                exists: t.exists
            } : Gn("Unknown precondition");
        }, t.prototype.Me = function(t) {
            return void 0 !== t.updateTime ? At.updateTime(this.fromVersion(t.updateTime)) : void 0 !== t.exists ? At.exists(t.exists) : At.NONE;
        }, t.prototype.Qe = function(t, n) {
            // NOTE: Deletes don't have an updateTime.
            var i = t.updateTime ? this.fromVersion(t.updateTime) : this.fromVersion(n);
            i.isEqual(k.MIN) && (
            // The Firestore Emulator currently returns an update time of 0 for
            // deletes of non-existing documents (rather than null). This breaks the
            // test "get deleted doc while offline with source=cache" as NoDocuments
            // with version 0 are filtered by IndexedDb's RemoteDocumentCache.
            // TODO(#2149): Remove this when Emulator is fixed
            i = this.fromVersion(n));
            var e = null;
            return t.transformResults && t.transformResults.length > 0 && (e = t.transformResults), 
            new St(i, e);
        }, t.prototype.Ge = function(t, n) {
            var i = this;
            return t && t.length > 0 ? (Wn(void 0 !== n, "Received a write result without a commit time"), 
            t.map((function(t) {
                return i.Qe(t, n);
            }))) : [];
        }, t.prototype.je = function(t) {
            var n = t.transform;
            if (n instanceof bt) return {
                fieldPath: t.field.J(),
                setToServerValue: "REQUEST_TIME"
            };
            if (n instanceof gt) return {
                fieldPath: t.field.J(),
                appendMissingElements: {
                    values: n.elements
                }
            };
            if (n instanceof yt) return {
                fieldPath: t.field.J(),
                removeAllFromArray: {
                    values: n.elements
                }
            };
            if (n instanceof _t) return {
                fieldPath: t.field.J(),
                increment: n.Gt
            };
            throw Gn("Unknown transform: " + t.transform);
        }, t.prototype.Be = function(t) {
            var n = null;
            if ("setToServerValue" in t) Wn("REQUEST_TIME" === t.setToServerValue, "Unknown server value transform proto: " + JSON.stringify(t)), 
            n = bt.instance; else if ("appendMissingElements" in t) {
                var i = t.appendMissingElements.values || [];
                n = new gt(i);
            } else if ("removeAllFromArray" in t) {
                i = t.removeAllFromArray.values || [];
                n = new yt(i);
            } else "increment" in t ? n = new _t(this, t.increment) : Gn("Unknown transform proto: " + JSON.stringify(t));
            var e = U.tt(t.fieldPath);
            return new Rt(e, n);
        }, t.prototype.We = function(t) {
            return {
                documents: [ this.Te(t.path) ]
            };
        }, t.prototype.ze = function(t) {
            var n = t.documents.length;
            Wn(1 === n, "DocumentsTarget contained other than 1 document: " + n);
            var i = t.documents[0];
            return Bt.Cn(this.Ee(i)).qn();
        }, t.prototype.Ke = function(t) {
            // Dissect the path into parent, collectionId, and optional key filter.
            var n = {
                structuredQuery: {}
            }, i = t.path;
            null !== t.collectionGroup ? (Wn(i.length % 2 == 0, "Collection Group queries should be within a document path or root."), 
            n.parent = this.Te(i), n.structuredQuery.from = [ {
                collectionId: t.collectionGroup,
                allDescendants: !0
            } ]) : (Wn(i.length % 2 != 0, "Document queries with filters are not supported."), 
            n.parent = this.Te(i.L()), n.structuredQuery.from = [ {
                collectionId: i.B()
            } ]);
            var e = this.Je(t.filters);
            e && (n.structuredQuery.where = e);
            var r = this.He(t.orderBy);
            r && (n.structuredQuery.orderBy = r);
            var u = this.le(t.limit);
            return null !== u && (n.structuredQuery.limit = u), t.startAt && (n.structuredQuery.startAt = this.Ye(t.startAt)), 
            t.endAt && (n.structuredQuery.endAt = this.Ye(t.endAt)), n;
        }, t.prototype.Xe = function(t) {
            var n = this.Ee(t.parent), i = t.structuredQuery, e = i.from ? i.from.length : 0, r = null;
            if (e > 0) {
                Wn(1 === e, "StructuredQuery.from with more than one collection is not supported.");
                var u = i.from[0];
                u.allDescendants ? r = u.collectionId : n = n.child(u.collectionId);
            }
            var s = [];
            i.where && (s = this.$e(i.where));
            var o = [];
            i.orderBy && (o = this.Ze(i.orderBy));
            var h = null;
            i.limit && (h = this.ve(i.limit));
            var c = null;
            i.startAt && (c = this.tr(i.startAt));
            var a = null;
            return i.endAt && (a = this.tr(i.endAt)), new Bt(n, r, o, s, h, "F" /* First */ , c, a).qn();
        }, t.prototype.nr = function(t) {
            var n = this.ir(t.ti);
            return null == n ? null : {
                "goog-listen-tags": n
            };
        }, t.prototype.ir = function(t) {
            switch (t) {
              case 0 /* Listen */ :
                return null;

              case 1 /* ExistenceFilterMismatch */ :
                return "existence-filter-mismatch";

              case 2 /* LimboResolution */ :
                return "limbo-document";

              default:
                return Gn("Unrecognized query purpose: " + t);
            }
        }, t.prototype.qn = function(t) {
            var n, i = t.target;
            return (n = i.Tn() ? {
                documents: this.We(i)
            } : {
                query: this.Ke(i)
            }).targetId = t.targetId, t.resumeToken.Lt() > 0 && (n.resumeToken = this.me(t.resumeToken)), 
            n;
        }, t.prototype.Je = function(t) {
            var n = this;
            if (0 !== t.length) {
                var i = t.map((function(t) {
                    return t instanceof Wt ? n.er(t) : Gn("Unrecognized filter: " + JSON.stringify(t));
                }));
                return 1 === i.length ? i[0] : {
                    compositeFilter: {
                        op: "AND",
                        filters: i
                    }
                };
            }
        }, t.prototype.$e = function(t) {
            var n = this;
            return t ? void 0 !== t.unaryFilter ? [ this.rr(t) ] : void 0 !== t.fieldFilter ? [ this.ur(t) ] : void 0 !== t.compositeFilter ? t.compositeFilter.filters.map((function(t) {
                return n.$e(t);
            })).reduce((function(t, n) {
                return t.concat(n);
            })) : Gn("Unknown filter: " + JSON.stringify(t)) : [];
        }, t.prototype.He = function(t) {
            var n = this;
            if (0 !== t.length) return t.map((function(t) {
                return n.sr(t);
            }));
        }, t.prototype.Ze = function(t) {
            var n = this;
            return t.map((function(t) {
                return n.or(t);
            }));
        }, t.prototype.Ye = function(t) {
            return {
                before: t.before,
                values: t.position
            };
        }, t.prototype.tr = function(t) {
            var n = !!t.before, i = t.values || [];
            return new $t(i, n);
        }, 
        // visible for testing
        t.prototype.hr = function(t) {
            return kn[t.name];
        }, 
        // visible for testing
        t.prototype.cr = function(t) {
            switch (t) {
              case "ASCENDING":
                return Xt.ASCENDING;

              case "DESCENDING":
                return Xt.DESCENDING;

              default:
                return;
            }
        }, 
        // visible for testing
        t.prototype.ar = function(t) {
            return Nn[t.name];
        }, t.prototype.lr = function(t) {
            switch (t) {
              case "EQUAL":
                return Gt.EQUAL;

              case "GREATER_THAN":
                return Gt.GREATER_THAN;

              case "GREATER_THAN_OR_EQUAL":
                return Gt.GREATER_THAN_OR_EQUAL;

              case "LESS_THAN":
                return Gt.LESS_THAN;

              case "LESS_THAN_OR_EQUAL":
                return Gt.LESS_THAN_OR_EQUAL;

              case "ARRAY_CONTAINS":
                return Gt.ARRAY_CONTAINS;

              case "IN":
                return Gt.IN;

              case "ARRAY_CONTAINS_ANY":
                return Gt.ARRAY_CONTAINS_ANY;

              case "OPERATOR_UNSPECIFIED":
                return Gn("Unspecified operator");

              default:
                return Gn("Unknown operator");
            }
        }, t.prototype.dr = function(t) {
            return {
                fieldPath: t.J()
            };
        }, t.prototype.vr = function(t) {
            return U.tt(t.fieldPath);
        }, 
        // visible for testing
        t.prototype.sr = function(t) {
            return {
                field: this.dr(t.field),
                direction: this.hr(t.dir)
            };
        }, t.prototype.or = function(t) {
            return new Zt(this.vr(t.field), this.cr(t.direction));
        }, t.prototype.ur = function(t) {
            return Wt.create(this.vr(t.fieldFilter.field), this.lr(t.fieldFilter.op), t.fieldFilter.value);
        }, 
        // visible for testing
        t.prototype.er = function(t) {
            if (t.op === Gt.EQUAL) {
                if (mt(t.value)) return {
                    unaryFilter: {
                        field: this.dr(t.field),
                        op: "IS_NAN"
                    }
                };
                if (wt(t.value)) return {
                    unaryFilter: {
                        field: this.dr(t.field),
                        op: "IS_NULL"
                    }
                };
            }
            return {
                fieldFilter: {
                    field: this.dr(t.field),
                    op: this.ar(t.op),
                    value: t.value
                }
            };
        }, t.prototype.rr = function(t) {
            switch (t.unaryFilter.op) {
              case "IS_NAN":
                var n = this.vr(t.unaryFilter.field);
                return Wt.create(n, Gt.EQUAL, {
                    doubleValue: NaN
                });

              case "IS_NULL":
                var i = this.vr(t.unaryFilter.field);
                return Wt.create(i, Gt.EQUAL, {
                    nullValue: "NULL_VALUE"
                });

              case "OPERATOR_UNSPECIFIED":
                return Gn("Unspecified filter");

              default:
                return Gn("Unknown filter");
            }
        }, t.prototype.Ue = function(t) {
            var n = [];
            return t.fields.forEach((function(t) {
                return n.push(t.J());
            })), {
                fieldPaths: n
            };
        }, t.prototype.qe = function(t) {
            var n = (t.fieldPaths || []).map((function(t) {
                return U.tt(t);
            }));
            return Dt.Jt(n);
        }, t;
    }();

    function Un(t) {
        // Resource names have at least 4 components (project ID, database ID)
        return t.length >= 4 && "projects" === t.get(0) && "databases" === t.get(2);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provides singleton helpers where setup code can inject a platform at runtime.
     * setPlatform needs to be set before Firestore is used and must be set exactly
     * once.
     */ var jn = /** @class */ function() {
        function t() {}
        return t.wr = function(n) {
            t.platform && Gn("Platform already defined"), t.platform = n;
        }, t.xt = function() {
            return t.platform || Gn("Platform not set"), t.platform;
        }, t;
    }(), xn = new index_esm.Logger("@firebase/firestore");

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Helper methods are needed because variables can't be exported as read/write
    function Ln() {
        return xn.logLevel;
    }

    function Mn(t) {
        xn.logLevel = t;
    }

    function qn(t) {
        for (var n = [], i = 1; i < arguments.length; i++) n[i - 1] = arguments[i];
        if (xn.logLevel <= index_esm.LogLevel.DEBUG) {
            var r = n.map(Qn);
            xn.error.apply(xn, tslib_es6.__spreadArrays([ "Firestore (" + _ + "): " + t ], r));
        }
    }

    function Bn(t) {
        for (var n = [], i = 1; i < arguments.length; i++) n[i - 1] = arguments[i];
        if (xn.logLevel <= index_esm.LogLevel.ERROR) {
            var r = n.map(Qn);
            xn.error.apply(xn, tslib_es6.__spreadArrays([ "Firestore (" + _ + "): " + t ], r));
        }
    }

    /**
     * Converts an additional log parameter to a string representation.
     */ function Qn(t) {
        if ("string" == typeof t) return t;
        var n = jn.xt();
        try {
            return n.mr(t);
        } catch (n) {
            // Converting to JSON failed, just log the object directly
            return t;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Unconditionally fails, throwing an Error with the given message.
     *
     * Returns any so it can be used in expressions:
     * @example
     * let futureVar = fail('not implemented yet');
     */ function Gn(t) {
        // Log the failure in addition to throw an exception, just in case the
        // exception is swallowed.
        var n = "FIRESTORE (" + _ + ") INTERNAL ASSERTION FAILED: " + t;
        // NOTE: We don't use FirestoreError here because these are internal failures
        // that cannot be handled by the user. (Also it would create a circular
        // dependency between the error and assert modules which doesn't work.)
        throw Bn(n), new Error(n);
    }

    /**
     * Fails if the given assertion condition is false, throwing an Error with the
     * given message if it did.
     */ function Wn(t, n) {
        t || Gn(n);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var zn = /** @class */ function() {
        function t() {}
        return t.pr = function() {
            for (
            // Alphanumeric characters
            var t = ""; t.length < 20; ) for (var n = jn.xt().randomBytes(40), i = 0, e = Array.from(n); i < e.length; i++) {
                var r = e[i];
                // Length of `chars` is 62. We only take bytes between 0 and 62*4-1
                // (both inclusive). The value is then evenly mapped to indices of `char`
                // via a modulo operation.
                            t.length < 20 && r <= 247 && (t += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(r % 62));
            }
            return Wn(20 === t.length, "Invalid auto ID: " + t), t;
        }, t;
    }();

    function Kn(t, n) {
        return t < n ? -1 : t > n ? 1 : 0;
    }

    function Jn(t, n, i) {
        return t.length === n.length && t.every((function(t, e) {
            return i(t, n[e]);
        }));
    }

    /**
     * Returns the immediate lexicographically-following string. This is useful to
     * construct an inclusive range for indexeddb iterators.
     */ function Hn(t) {
        // Return the input string, with an additional NUL byte appended.
        return t + "\0";
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var Yn = 
    /**
         * Constructs a DatabaseInfo using the provided host, databaseId and
         * persistenceKey.
         *
         * @param databaseId The database to use.
         * @param persistenceKey A unique identifier for this Firestore's local
         * storage (used in conjunction with the databaseId).
         * @param host The Firestore backend host to connect to.
         * @param ssl Whether to use SSL when connecting.
         * @param forceLongPolling Whether to use the forceLongPolling option
         * when using WebChannel as the network transport.
         */
    function(t, n, i, e, r) {
        this.ae = t, this.persistenceKey = n, this.host = i, this.ssl = e, this.forceLongPolling = r;
    }, Xn = /** @class */ function() {
        function t(t, n) {
            this.projectId = t, this.database = n || "(default)";
        }
        return Object.defineProperty(t.prototype, "br", {
            get: function() {
                return "(default)" === this.database;
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.isEqual = function(n) {
            return n instanceof t && n.projectId === this.projectId && n.database === this.database;
        }, t.prototype.k = function(t) {
            return Kn(this.projectId, t.projectId) || Kn(this.database, t.database);
        }, t;
    }(), $n = /** @class */ function() {
        /**
         * @param batchId The unique ID of this mutation batch.
         * @param localWriteTime The original write time of this mutation.
         * @param baseMutations Mutations that are used to populate the base
         * values when this mutation is applied locally. This can be used to locally
         * overwrite values that are persisted in the remote document cache. Base
         * mutations are never sent to the backend.
         * @param mutations The user-provided mutations in this mutation batch.
         * User-provided mutations are applied both locally and remotely on the
         * backend.
         */
        function t(t, n, i, e) {
            this.batchId = t, this.gr = n, this.baseMutations = i, this.mutations = e, Wn(e.length > 0, "Cannot create an empty mutation batch");
        }
        /**
         * Applies all the mutations in this MutationBatch to the specified document
         * to create a new remote document
         *
         * @param docKey The key of the document to apply mutations to.
         * @param maybeDoc The document to apply mutations to.
         * @param batchResult The result of applying the MutationBatch to the
         * backend.
         */    return t.prototype.Bt = function(t, n, i) {
            n && Wn(n.key.isEqual(t), "applyToRemoteDocument: key " + t + " should match maybeDoc key\n        " + n.key);
            var e = i.yr;
            Wn(e.length === this.mutations.length, "Mismatch between mutations length\n      (" + this.mutations.length + ") and mutation results length\n      (" + e.length + ").");
            for (var r = 0; r < this.mutations.length; r++) {
                var u = this.mutations[r];
                if (u.key.isEqual(t)) {
                    var s = e[r];
                    n = u.Bt(n, s);
                }
            }
            return n;
        }, 
        /**
         * Computes the local view of a document given all the mutations in this
         * batch.
         *
         * @param docKey The key of the document to apply mutations to.
         * @param maybeDoc The document to apply mutations to.
         */
        t.prototype.qt = function(t, n) {
            n && Wn(n.key.isEqual(t), "applyToLocalDocument: key " + t + " should match maybeDoc key\n        " + n.key);
            // First, apply the base state. This allows us to apply non-idempotent
            // transform against a consistent set of values.
                    for (var i = 0, e = this.baseMutations; i < e.length; i++) {
                (o = e[i]).key.isEqual(t) && (n = o.qt(n, n, this.gr));
            }
            // Second, apply all user-provided mutations.
            for (var r = n, u = 0, s = this.mutations; u < s.length; u++) {
                var o;
                (o = s[u]).key.isEqual(t) && (n = o.qt(n, r, this.gr));
            }
            return n;
        }, 
        /**
         * Computes the local view for all provided documents given the mutations in
         * this batch.
         */
        t.prototype._r = function(t) {
            var n = this, i = t;
            // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations
            // directly (as done in `applyToLocalView()`), we can reduce the complexity
            // to O(n).
                    return this.mutations.forEach((function(e) {
                var r = n.qt(e.key, t.get(e.key));
                r && (i = i.ut(e.key, r));
            })), i;
        }, t.prototype.keys = function() {
            return this.mutations.reduce((function(t, n) {
                return t.add(n.key);
            }), wn());
        }, t.prototype.isEqual = function(t) {
            return this.batchId === t.batchId && Jn(this.mutations, t.mutations, (function(t, n) {
                return t.isEqual(n);
            })) && Jn(this.baseMutations, t.baseMutations, (function(t, n) {
                return t.isEqual(n);
            }));
        }, t;
    }(), Zn = /** @class */ function() {
        function t(t, n, i, e, 
        /**
         * A pre-computed mapping from each mutated document to the resulting
         * version.
         */
        r) {
            this.batch = t, this.Ir = n, this.yr = i, this.streamToken = e, this.Tr = r;
        }
        /**
         * Creates a new MutationBatchResult for the given batch and results. There
         * must be one result for each mutation in the batch. This static factory
         * caches a document=>version mapping (docVersions).
         */    return t.from = function(n, i, e, r) {
            Wn(n.mutations.length === e.length, "Mutations sent " + n.mutations.length + " must equal results received " + e.length);
            for (var u = dn(), s = n.mutations, o = 0; o < s.length; o++) u = u.ut(s[o].key, e[o].version);
            return new t(n, i, e, r, u);
        }, t;
    }(), ti = /** @class */ function() {
        function t(t) {
            this.Er = t, 
            /**
             * The inner map for a key -> value pair. Due to the possibility of
             * collisions we keep a list of entries that we do a linear search through
             * to find an actual match. Note that collisions should be rare, so we still
             * expect near constant time lookups in practice.
             */
            this.Dr = {};
        }
        /** Get a value for this key, or undefined if it does not exist. */    return t.prototype.get = function(t) {
            var n = this.Er(t), i = this.Dr[n];
            if (void 0 !== i) for (var e = 0, r = i; e < r.length; e++) {
                var u = r[e], s = u[0], o = u[1];
                if (s.isEqual(t)) return o;
            }
        }, t.prototype.has = function(t) {
            return void 0 !== this.get(t);
        }, 
        /** Put this key and value in the map. */
        t.prototype.set = function(t, n) {
            var i = this.Er(t), e = this.Dr[i];
            if (void 0 !== e) {
                for (var r = 0; r < e.length; r++) if (e[r][0].isEqual(t)) return void (e[r] = [ t, n ]);
                e.push([ t, n ]);
            } else this.Dr[i] = [ [ t, n ] ];
        }, 
        /**
         * Remove this key from the map. Returns a boolean if anything was deleted.
         */
        t.prototype.delete = function(t) {
            var n = this.Er(t), i = this.Dr[n];
            if (void 0 === i) return !1;
            for (var e = 0; e < i.length; e++) if (i[e][0].isEqual(t)) return 1 === i.length ? delete this.Dr[n] : i.splice(e, 1), 
            !0;
            return !1;
        }, t.prototype.forEach = function(t) {
            W(this.Dr, (function(n, i) {
                for (var e = 0, r = i; e < r.length; e++) {
                    var u = r[e], s = u[0], o = u[1];
                    t(s, o);
                }
            }));
        }, t.prototype.M = function() {
            return z(this.Dr);
        }, t;
    }(), ni = /** @class */ function() {
        function t(t, n, i, e) {
            this.targetId = t, this.fromCache = n, this.Rr = i, this.Sr = e;
        }
        return t.Ar = function(n, i) {
            for (var e = wn(), r = wn(), u = 0, s = i.docChanges; u < s.length; u++) {
                var o = s[u];
                switch (o.type) {
                  case 0 /* Added */ :
                    e = e.add(o.doc.key);
                    break;

                  case 1 /* Removed */ :
                    r = r.add(o.doc.key);
     // do nothing
                            }
            }
            return new t(n, i.fromCache, e, r);
        }, t;
    }(), ii = /** @class */ function() {
        function t(t, n) {
            var i = this;
            this.previousValue = t, n && (n.Cr = function(t) {
                return i.Pr(t);
            }, this.Vr = function(t) {
                return n.kr(t);
            });
        }
        return t.prototype.Pr = function(t) {
            return this.previousValue = Math.max(t, this.previousValue), this.previousValue;
        }, t.prototype.next = function() {
            var t = ++this.previousValue;
            return this.Vr && this.Vr(t), t;
        }, t.Nr = -1, t;
    }(), ei = function() {
        var t = this;
        this.promise = new Promise((function(n, i) {
            t.resolve = n, t.reject = i;
        }));
    }, ri = /** @class */ function() {
        function t(t, n, i, e, r) {
            this.Or = t, this.Fr = n, this.Ur = i, this.op = e, this.jr = r, this.xr = new ei, 
            this.then = this.xr.promise.then.bind(this.xr.promise), this.catch = this.xr.promise.catch.bind(this.xr.promise), 
            // It's normal for the deferred promise to be canceled (due to cancellation)
            // and so we attach a dummy catch callback to avoid
            // 'UnhandledPromiseRejectionWarning' log spam.
            this.xr.promise.catch((function(t) {}));
        }
        /**
         * Creates and returns a DelayedOperation that has been scheduled to be
         * executed on the provided asyncQueue after the provided delayMs.
         *
         * @param asyncQueue The queue to schedule the operation on.
         * @param id A Timer ID identifying the type of operation this is.
         * @param delayMs The delay (ms) before the operation should be scheduled.
         * @param op The operation to run.
         * @param removalCallback A callback to be called synchronously once the
         *   operation is executed or canceled, notifying the AsyncQueue to remove it
         *   from its delayedOperations list.
         *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
         *   the DelayedOperation class public.
         */    return t.Lr = function(n, i, e, r, u) {
            var s = new t(n, i, Date.now() + e, r, u);
            return s.start(e), s;
        }, 
        /**
         * Starts the timer. This is called immediately after construction by
         * createAndSchedule().
         */
        t.prototype.start = function(t) {
            var n = this;
            this.Mr = setTimeout((function() {
                return n.qr();
            }), t);
        }, 
        /**
         * Queues the operation to run immediately (if it hasn't already been run or
         * canceled).
         */
        t.prototype.Br = function() {
            return this.qr();
        }, 
        /**
         * Cancels the operation if it hasn't already been executed or canceled. The
         * promise will be rejected.
         *
         * As long as the operation has not yet been run, calling cancel() provides a
         * guarantee that the operation will not be run.
         */
        t.prototype.cancel = function(t) {
            null !== this.Mr && (this.clearTimeout(), this.xr.reject(new E(T.CANCELLED, "Operation cancelled" + (t ? ": " + t : ""))));
        }, t.prototype.qr = function() {
            var t = this;
            this.Or.Qr((function() {
                return null !== t.Mr ? (t.clearTimeout(), t.op().then((function(n) {
                    return t.xr.resolve(n);
                }))) : Promise.resolve();
            }));
        }, t.prototype.clearTimeout = function() {
            null !== this.Mr && (this.jr(this), clearTimeout(this.Mr), this.Mr = null);
        }, t;
    }(), ui = /** @class */ function() {
        function t() {
            // The last promise in the queue.
            this.Gr = Promise.resolve(), 
            // Is this AsyncQueue being shut down? Once it is set to true, it will not
            // be changed again.
            this.Wr = !1, 
            // Operations scheduled to be queued in the future. Operations are
            // automatically removed after they are run or canceled.
            this.zr = [], 
            // visible for testing
            this.Kr = null, 
            // Flag set while there's an outstanding AsyncQueue operation, used for
            // assertion sanity-checks.
            this.Jr = !1, 
            // List of TimerIds to fast-forward delays for.
            this.Hr = [];
        }
        return Object.defineProperty(t.prototype, "Yr", {
            // Is this AsyncQueue being shut down? If true, this instance will not enqueue
            // any new operations, Promises from enqueue requests will not resolve.
            get: function() {
                return this.Wr;
            },
            enumerable: !0,
            configurable: !0
        }), 
        /**
         * Adds a new operation to the queue without waiting for it to complete (i.e.
         * we ignore the Promise result).
         */
        t.prototype.Qr = function(t) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.enqueue(t);
        }, 
        /**
         * Regardless if the queue has initialized shutdown, adds a new operation to the
         * queue without waiting for it to complete (i.e. we ignore the Promise result).
         */
        t.prototype.Xr = function(t) {
            this.$r(), 
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.Zr(t);
        }, 
        /**
         * Regardless if the queue has initialized shutdown, adds a new operation to the
         * queue.
         */
        t.prototype.tu = function(t) {
            return this.$r(), this.Zr(t);
        }, 
        /**
         * Adds a new operation to the queue and initialize the shut down of this queue.
         * Returns a promise that will be resolved when the promise returned by the new
         * operation is (with its value).
         * Once this method is called, the only possible way to request running an operation
         * is through `enqueueAndForgetEvenAfterShutdown`.
         */
        t.prototype.nu = function(t) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                return tslib_es6.__generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        return this.$r(), this.Wr ? [ 3 /*break*/ , 2 ] : (this.Wr = !0, [ 4 /*yield*/ , this.tu(t) ]);

                      case 1:
                        n.sent(), n.label = 2;

                      case 2:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Adds a new operation to the queue. Returns a promise that will be resolved
         * when the promise returned by the new operation is (with its value).
         */
        t.prototype.enqueue = function(t) {
            return this.$r(), this.Wr ? new Promise((function(t) {})) : this.Zr(t);
        }, t.prototype.Zr = function(t) {
            var n = this, i = this.Gr.then((function() {
                return n.Jr = !0, t().catch((function(t) {
                    n.Kr = t, n.Jr = !1;
                    var i = t.stack || t.message || "";
                    // Re-throw the error so that this.tail becomes a rejected Promise and
                    // all further attempts to chain (via .then) will just short-circuit
                    // and return the rejected Promise.
                    throw Bn("INTERNAL UNHANDLED ERROR: ", i), 
                    // Escape the promise chain and throw the error globally so that
                    // e.g. any global crash reporting library detects and reports it.
                    // (but not for simulated errors in our tests since this breaks mocha)
                    i.indexOf("Firestore Test Simulated Error") < 0 && setTimeout((function() {
                        throw t;
                    }), 0), t;
                })).then((function(t) {
                    return n.Jr = !1, t;
                }));
            }));
            return this.Gr = i, i;
        }, 
        /**
         * Schedules an operation to be queued on the AsyncQueue once the specified
         * `delayMs` has elapsed. The returned CancelablePromise can be used to cancel
         * the operation prior to its running.
         */
        t.prototype.iu = function(t, n, i) {
            var e = this;
            this.$r(), Wn(n >= 0, "Attempted to schedule an operation with a negative delay of " + n), 
            // Fast-forward delays for timerIds that have been overriden.
            this.Hr.indexOf(t) > -1 && (n = 0);
            var r = ri.Lr(this, t, n, i, (function(t) {
                return e.eu(t);
            }));
            return this.zr.push(r), r;
        }, t.prototype.$r = function() {
            this.Kr && Gn("AsyncQueue is already failed: " + (this.Kr.stack || this.Kr.message));
        }, 
        /**
         * Verifies there's an operation currently in-progress on the AsyncQueue.
         * Unfortunately we can't verify that the running code is in the promise chain
         * of that operation, so this isn't a foolproof check, but it should be enough
         * to catch some bugs.
         */
        t.prototype.ru = function() {
            Wn(this.Jr, "verifyOpInProgress() called when no op in progress on this queue.");
        }, 
        /**
         * Waits until all currently queued tasks are finished executing. Delayed
         * operations are not run.
         */
        t.prototype.uu = function() {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var t;
                return tslib_es6.__generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        return [ 4 /*yield*/ , t = this.Gr ];

                      case 1:
                        n.sent(), n.label = 2;

                      case 2:
                        if (t !== this.Gr) return [ 3 /*break*/ , 0 ];
                        n.label = 3;

                      case 3:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * For Tests: Determine if a delayed operation with a particular TimerId
         * exists.
         */
        t.prototype.su = function(t) {
            for (var n = 0, i = this.zr; n < i.length; n++) {
                if (i[n].Fr === t) return !0;
            }
            return !1;
        }, 
        /**
         * For Tests: Runs some or all delayed operations early.
         *
         * @param lastTimerId Delayed operations up to and including this TimerId will
         *  be drained. Throws if no such operation exists. Pass TimerId.All to run
         *  all delayed operations.
         * @returns a Promise that resolves once all operations have been run.
         */
        t.prototype.ou = function(t) {
            var n = this;
            // Note that draining may generate more delayed ops, so we do that first.
                    return this.uu().then((function() {
                Wn("all" /* All */ === t || n.su(t), "Attempted to drain to missing operation " + t), 
                // Run ops in the same order they'd run if they ran naturally.
                n.zr.sort((function(t, n) {
                    return t.Ur - n.Ur;
                }));
                for (var i = 0, e = n.zr; i < e.length; i++) {
                    var r = e[i];
                    if (r.Br(), "all" /* All */ !== t && r.Fr === t) break;
                }
                return n.uu();
            }));
        }, 
        /**
         * For Tests: Skip all subsequent delays for a timer id.
         */
        t.prototype.hu = function(t) {
            this.Hr.push(t);
        }, 
        /** Called once a DelayedOperation is run or canceled. */
        t.prototype.eu = function(t) {
            // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
            var n = this.zr.indexOf(t);
            Wn(n >= 0, "Delayed operation not found."), this.zr.splice(n, 1);
        }, t;
    }(), si = /** @class */ function() {
        function t(t) {
            var n = this;
            // NOTE: next/catchCallback will always point to our own wrapper functions,
            // not the user's raw next() or catch() callbacks.
                    this.cu = null, this.au = null, 
            // When the operation resolves, we'll set result or error and mark isDone.
            this.result = void 0, this.error = void 0, this.fu = !1, 
            // Set to true when .then() or .catch() are called and prevents additional
            // chaining.
            this.lu = !1, t((function(t) {
                n.fu = !0, n.result = t, n.cu && 
                // value should be defined unless T is Void, but we can't express
                // that in the type system.
                n.cu(t);
            }), (function(t) {
                n.fu = !0, n.error = t, n.au && n.au(t);
            }));
        }
        return t.prototype.catch = function(t) {
            return this.next(void 0, t);
        }, t.prototype.next = function(n, i) {
            var e = this;
            return this.lu && Gn("Called next() or catch() twice for PersistencePromise"), this.lu = !0, 
            this.fu ? this.error ? this.du(i, this.error) : this.vu(n, this.result) : new t((function(t, r) {
                e.cu = function(i) {
                    e.vu(n, i).next(t, r);
                }, e.au = function(n) {
                    e.du(i, n).next(t, r);
                };
            }));
        }, t.prototype.wu = function() {
            var t = this;
            return new Promise((function(n, i) {
                t.next(n, i);
            }));
        }, t.prototype.mu = function(n) {
            try {
                var i = n();
                return i instanceof t ? i : t.resolve(i);
            } catch (n) {
                return t.reject(n);
            }
        }, t.prototype.vu = function(n, i) {
            return n ? this.mu((function() {
                return n(i);
            })) : t.resolve(i);
        }, t.prototype.du = function(n, i) {
            return n ? this.mu((function() {
                return n(i);
            })) : t.reject(i);
        }, t.resolve = function(n) {
            return new t((function(t, i) {
                t(n);
            }));
        }, t.reject = function(n) {
            return new t((function(t, i) {
                i(n);
            }));
        }, t.pu = function(
        // Accept all Promise types in waitFor().
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        n) {
            return new t((function(t, i) {
                var e = 0, r = 0, u = !1;
                n.forEach((function(n) {
                    ++e, n.next((function() {
                        ++r, u && r === e && t();
                    }), (function(t) {
                        return i(t);
                    }));
                })), u = !0, r === e && t();
            }));
        }, 
        /**
         * Given an array of predicate functions that asynchronously evaluate to a
         * boolean, implements a short-circuiting `or` between the results. Predicates
         * will be evaluated until one of them returns `true`, then stop. The final
         * result will be whether any of them returned `true`.
         */
        t.bu = function(n) {
            for (var i = t.resolve(!1), e = function(n) {
                i = i.next((function(i) {
                    return i ? t.resolve(i) : n();
                }));
            }, r = 0, u = n; r < u.length; r++) {
                e(u[r]);
            }
            return i;
        }, t.forEach = function(t, n) {
            var i = this, e = [];
            return t.forEach((function(t, r) {
                e.push(n.call(i, t, r));
            })), this.pu(e);
        }, t;
    }();

    /** The default database name for a project. */
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function oi(t, n) {
        var i = t[0], e = t[1], r = n[0], u = n[1], s = Kn(i, r);
        return 0 === s ? Kn(e, u) : s;
    }

    /**
     * Used to calculate the nth sequence number. Keeps a rolling buffer of the
     * lowest n values passed to `addElement`, and finally reports the largest of
     * them in `maxValue`.
     */ var hi = /** @class */ function() {
        function t(t) {
            this.gu = t, this.buffer = new B(oi), this.yu = 0;
        }
        return t.prototype._u = function() {
            return ++this.yu;
        }, t.prototype.Iu = function(t) {
            var n = [ t, this._u() ];
            if (this.buffer.size < this.gu) this.buffer = this.buffer.add(n); else {
                var i = this.buffer.last();
                oi(n, i) < 0 && (this.buffer = this.buffer.delete(i).add(n));
            }
        }, Object.defineProperty(t.prototype, "maxValue", {
            get: function() {
                // Guaranteed to be non-empty. If we decide we are not collecting any
                // sequence numbers, nthSequenceNumber below short-circuits. If we have
                // decided that we are collecting n sequence numbers, it's because n is some
                // percentage of the existing sequence numbers. That means we should never
                // be in a situation where we are collecting sequence numbers but don't
                // actually have any.
                return this.buffer.last()[0];
            },
            enumerable: !0,
            configurable: !0
        }), t;
    }(), ci = {
        Tu: !1,
        Eu: 0,
        Du: 0,
        Ru: 0
    }, ai = /** @class */ function() {
        function t(
        // When we attempt to collect, we will only do so if the cache size is greater than this
        // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.
        t, 
        // The percentage of sequence numbers that we will attempt to collect
        n, 
        // A cap on the total number of sequence numbers that will be collected. This prevents
        // us from collecting a huge number of sequence numbers if the cache has grown very large.
        i) {
            this.Su = t, this.Au = n, this.Cu = i;
        }
        return t.Pu = function(n) {
            return new t(n, t.Vu, t.ku);
        }, t.Nu = -1, t.Ou = 1048576, t.Fu = 41943040, t.Vu = 10, t.ku = 1e3, t.Uu = new t(t.Fu, t.Vu, t.ku), 
        t.DISABLED = new t(t.Nu, 0, 0), t;
    }(), fi = /** @class */ function() {
        function t(t, n) {
            this.ju = t, this.Or = n, this.xu = !1, this.Lu = null;
        }
        return t.prototype.start = function(t) {
            Wn(null === this.Lu, "Cannot start an already started LruScheduler"), this.ju.params.Su !== ai.Nu && this.Mu(t);
        }, t.prototype.stop = function() {
            this.Lu && (this.Lu.cancel(), this.Lu = null);
        }, Object.defineProperty(t.prototype, "qu", {
            get: function() {
                return null !== this.Lu;
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.Mu = function(t) {
            var n = this;
            Wn(null === this.Lu, "Cannot schedule GC while a task is pending");
            var i = this.xu ? 3e5 : 6e4;
            qn("LruGarbageCollector", "Garbage collection scheduled in " + i + "ms"), this.Lu = this.Or.iu("lru_garbage_collection" /* LruGarbageCollection */ , i, (function() {
                return n.Lu = null, n.xu = !0, t.Bu(n.ju).then((function() {
                    return n.Mu(t);
                })).catch(pi);
            }));
        }, t;
    }(), li = /** @class */ function() {
        function t(t, n) {
            this.Qu = t, this.params = n;
        }
        /** Given a percentile of target to collect, returns the number of targets to collect. */    return t.prototype.Gu = function(t, n) {
            return this.Qu.Wu(t).next((function(t) {
                return Math.floor(n / 100 * t);
            }));
        }, 
        /** Returns the nth sequence number, counting in order from the smallest. */
        t.prototype.zu = function(t, n) {
            var i = this;
            if (0 === n) return si.resolve(ii.Nr);
            var e = new hi(n);
            return this.Qu.$i(t, (function(t) {
                return e.Iu(t.sequenceNumber);
            })).next((function() {
                return i.Qu.Ku(t, (function(t) {
                    return e.Iu(t);
                }));
            })).next((function() {
                return e.maxValue;
            }));
        }, 
        /**
         * Removes targets with a sequence number equal to or less than the given upper bound, and removes
         * document associations with those targets.
         */
        t.prototype.Ju = function(t, n, i) {
            return this.Qu.Ju(t, n, i);
        }, 
        /**
         * Removes documents that have a sequence number equal to or less than the upper bound and are not
         * otherwise pinned.
         */
        t.prototype.Hu = function(t, n) {
            return this.Qu.Hu(t, n);
        }, t.prototype.Yu = function(t, n) {
            var i = this;
            return this.params.Su === ai.Nu ? (qn("LruGarbageCollector", "Garbage collection skipped; disabled"), 
            si.resolve(ci)) : this.Xu(t).next((function(e) {
                return e < i.params.Su ? (qn("LruGarbageCollector", "Garbage collection skipped; Cache size " + e + " is lower than threshold " + i.params.Su), 
                ci) : i.$u(t, n);
            }));
        }, t.prototype.Xu = function(t) {
            return this.Qu.Xu(t);
        }, t.prototype.$u = function(t, n) {
            var i, e, r, u, s, h, c, a = this, f = Date.now();
            return this.Gu(t, this.params.Au).next((function(n) {
                // Cap at the configured max
                return n > a.params.Cu ? (qn("LruGarbageCollector", "Capping sequence numbers to collect down to the maximum of " + a.params.Cu + " from " + n), 
                e = a.params.Cu) : e = n, u = Date.now(), a.zu(t, e);
            })).next((function(e) {
                return i = e, s = Date.now(), a.Ju(t, i, n);
            })).next((function(n) {
                return r = n, h = Date.now(), a.Hu(t, i);
            })).next((function(t) {
                (c = Date.now(), Ln() <= index_esm.LogLevel.DEBUG) && qn("LruGarbageCollector", "LRU Garbage Collection\n\tCounted targets in " + (u - f) + "ms\n\tDetermined least recently used " + e + " in " + (s - u) + "ms\n\tRemoved " + r + " targets in " + (h - s) + "ms\n\tRemoved " + t + " documents in " + (c - h) + "ms\nTotal Duration: " + (c - f) + "ms");
                return si.resolve({
                    Tu: !0,
                    Eu: e,
                    Du: r,
                    Ru: t
                });
            }));
        }, t;
    }(), di = /** @class */ function() {
        function t() {
            // A set of outstanding references to a document sorted by key.
            this.Zu = new B(vi.bn), 
            // A set of outstanding references to a document sorted by target id.
            this.ts = new B(vi.ns);
        }
        /** Returns true if the reference set contains no references. */    return t.prototype.M = function() {
            return this.Zu.M();
        }, 
        /** Adds a reference to the given document key for the given ID. */
        t.prototype.es = function(t, n) {
            var i = new vi(t, n);
            this.Zu = this.Zu.add(i), this.ts = this.ts.add(i);
        }, 
        /** Add references to the given document keys for the given ID. */
        t.prototype.rs = function(t, n) {
            var i = this;
            t.forEach((function(t) {
                return i.es(t, n);
            }));
        }, 
        /**
         * Removes a reference to the given document key for the given
         * ID.
         */
        t.prototype.us = function(t, n) {
            this.ss(new vi(t, n));
        }, t.prototype.os = function(t, n) {
            var i = this;
            t.forEach((function(t) {
                return i.us(t, n);
            }));
        }, 
        /**
         * Clears all references with a given ID. Calls removeRef() for each key
         * removed.
         */
        t.prototype.hs = function(t) {
            var n = this, i = j.EMPTY, e = new vi(i, t), r = new vi(i, t + 1), u = [];
            return this.ts.kt([ e, r ], (function(t) {
                n.ss(t), u.push(t.key);
            })), u;
        }, t.prototype.cs = function() {
            var t = this;
            this.Zu.forEach((function(n) {
                return t.ss(n);
            }));
        }, t.prototype.ss = function(t) {
            this.Zu = this.Zu.delete(t), this.ts = this.ts.delete(t);
        }, t.prototype.as = function(t) {
            var n = j.EMPTY, i = new vi(n, t), e = new vi(n, t + 1), r = wn();
            return this.ts.kt([ i, e ], (function(t) {
                r = r.add(t.key);
            })), r;
        }, t.prototype.fs = function(t) {
            var n = new vi(t, 0), i = this.Zu.Ot(n);
            return null !== i && t.isEqual(i.key);
        }, t;
    }(), vi = /** @class */ function() {
        function t(t, n) {
            this.key = t, this.ls = n;
        }
        /** Compare by key then by ID */    return t.bn = function(t, n) {
            return j.F(t.key, n.key) || Kn(t.ls, n.ls);
        }, 
        /** Compare by ID then by key */
        t.ns = function(t, n) {
            return Kn(t.ls, n.ls) || j.F(t.key, n.key);
        }, t;
    }(), wi = /** @class */ function() {
        function t() {
            // A mapping of document key to the new cache entry that should be written (or null if any
            // existing cache entry should be removed).
            this.ds = new ti((function(t) {
                return t.toString();
            })), this.vs = !1;
        }
        return Object.defineProperty(t.prototype, "readTime", {
            get: function() {
                return Wn(void 0 !== this.ws, "Read time is not set. All removeEntry() calls must include a readTime if `trackRemovals` is used."), 
                this.ws;
            },
            set: function(t) {
                // Right now (for simplicity) we just track a single readTime for all the
                // added entries since we expect them to all be the same, but we could
                // rework to store per-entry readTimes if necessary.
                Wn(void 0 === this.ws || this.ws.isEqual(t), "All changes in a RemoteDocumentChangeBuffer must have the same read time"), 
                this.ws = t;
            },
            enumerable: !0,
            configurable: !0
        }), 
        /**
         * Buffers a `RemoteDocumentCache.addEntry()` call.
         *
         * You can only modify documents that have already been retrieved via
         * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
         */
        t.prototype.ms = function(t, n) {
            this.ps(), this.readTime = n, this.ds.set(t.key, t);
        }, 
        /**
         * Buffers a `RemoteDocumentCache.removeEntry()` call.
         *
         * You can only remove documents that have already been retrieved via
         * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
         */
        t.prototype.bs = function(t, n) {
            this.ps(), n && (this.readTime = n), this.ds.set(t, null);
        }, 
        /**
         * Looks up an entry in the cache. The buffered changes will first be checked,
         * and if no buffered change applies, this will forward to
         * `RemoteDocumentCache.getEntry()`.
         *
         * @param transaction The transaction in which to perform any persistence
         *     operations.
         * @param documentKey The key of the entry to look up.
         * @return The cached Document or NoDocument entry, or null if we have nothing
         * cached.
         */
        t.prototype.gs = function(t, n) {
            this.ps();
            var i = this.ds.get(n);
            return void 0 !== i ? si.resolve(i) : this.ys(t, n);
        }, 
        /**
         * Looks up several entries in the cache, forwarding to
         * `RemoteDocumentCache.getEntry()`.
         *
         * @param transaction The transaction in which to perform any persistence
         *     operations.
         * @param documentKeys The keys of the entries to look up.
         * @return A map of cached `Document`s or `NoDocument`s, indexed by key. If an
         *     entry cannot be found, the corresponding key will be mapped to a null
         *     value.
         */
        t.prototype.getEntries = function(t, n) {
            return this._s(t, n);
        }, 
        /**
         * Applies buffered changes to the underlying RemoteDocumentCache, using
         * the provided transaction.
         */
        t.prototype.apply = function(t) {
            return this.ps(), this.vs = !0, this.Is(t);
        }, 
        /** Helper to assert this.changes is not null  */
        t.prototype.ps = function() {
            Wn(!this.vs, "Changes have already been applied.");
        }, t;
    }(), mi = /** @class */ function() {
        function t(
        /** Manages our in-memory or durable persistence. */
        t, n, i) {
            this.persistence = t, this.Ts = n, 
            /**
             * The set of document references maintained by any local views.
             */
            this.Es = new di, 
            /**
             * Maps a targetID to data about its target.
             *
             * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
             * of `applyRemoteEvent()` idempotent.
             */
            this.Ds = new x(Kn), 
            /** Maps a target to its targetID. */
            // TODO(wuandy): Evaluate if TargetId can be part of Target.
            this.Rs = new ti((function(t) {
                return t.canonicalId();
            })), 
            /**
             * The read time of the last entry processed by `getNewDocumentChanges()`.
             *
             * PORTING NOTE: This is only used for multi-tab synchronization.
             */
            this.Ss = k.MIN, Wn(t.qu, "LocalStore was passed an unstarted persistence implementation"), 
            this.persistence.Cs.As(this.Es), this.Ps = t.Vs(i), this.ks = t.Ns(), this.Os = t.Fs(), 
            this.Us = new Pi(this.ks, this.Ps, this.persistence.js()), this.Ts.xs(this.Us);
        }
        /** Starts the LocalStore. */    return t.prototype.start = function() {
            return this.Ls();
        }, 
        /**
         * Tells the LocalStore that the currently authenticated user has changed.
         *
         * In response the local store switches the mutation queue to the new user and
         * returns any resulting document changes.
         */
        // PORTING NOTE: Android and iOS only return the documents affected by the
        // change.
        t.prototype.Ms = function(t) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var n, i, e, r = this;
                return tslib_es6.__generator(this, (function(u) {
                    switch (u.label) {
                      case 0:
                        return n = this.Ps, i = this.Us, [ 4 /*yield*/ , this.persistence.runTransaction("Handle user change", "readonly", (function(e) {
                            // Swap out the mutation queue, grabbing the pending mutation batches
                            // before and after.
                            var u;
                            return r.Ps.qs(e).next((function(s) {
                                return u = s, n = r.persistence.Vs(t), 
                                // Recreate our LocalDocumentsView using the new
                                // MutationQueue.
                                i = new Pi(r.ks, n, r.persistence.js()), n.qs(e);
                            })).next((function(t) {
                                for (var n = [], r = [], s = wn(), o = 0, h = u; o < h.length; o++) {
                                    var c = h[o];
                                    n.push(c.batchId);
                                    for (var a = 0, f = c.mutations; a < f.length; a++) {
                                        var l = f[a];
                                        s = s.add(l.key);
                                    }
                                }
                                for (var d = 0, v = t; d < v.length; d++) {
                                    c = v[d];
                                    r.push(c.batchId);
                                    for (var w = 0, m = c.mutations; w < m.length; w++) {
                                        l = m[w];
                                        s = s.add(l.key);
                                    }
                                }
                                // Return the set of all (potentially) changed documents and the list
                                // of mutation batch IDs that were affected by change.
                                                            return i.Bs(e, s).next((function(t) {
                                    return {
                                        Qs: t,
                                        Gs: n,
                                        Ws: r
                                    };
                                }));
                            }));
                        })) ];

                      case 1:
                        return e = u.sent(), this.Ps = n, this.Us = i, this.Ts.xs(this.Us), [ 2 /*return*/ , e ];
                    }
                }));
            }));
        }, 
        /* Accept locally generated Mutations and commit them to storage. */
        t.prototype.zs = function(t) {
            var n, i = this, e = V.now(), r = t.reduce((function(t, n) {
                return t.add(n.key);
            }), wn());
            return this.persistence.runTransaction("Locally write mutations", "readwrite", (function(u) {
                // Load and apply all existing mutations. This lets us compute the
                // current base state for all non-idempotent transforms before applying
                // any additional user-provided writes.
                return i.Us.Bs(u, r).next((function(r) {
                    n = r;
                    for (
                    // For non-idempotent mutations (such as `FieldValue.increment()`),
                    // we record the base state in a separate patch mutation. This is
                    // later used to guarantee consistent values and prevents flicker
                    // even if the backend sends us an update that already includes our
                    // transform.
                    var s = [], o = 0, h = t; o < h.length; o++) {
                        var c = h[o], a = c.in(n.get(c.key));
                        null != a && 
                        // NOTE: The base state should only be applied if there's some
                        // existing document to override, so use a Precondition of
                        // exists=true
                        s.push(new Vt(c.key, a, a.en(), At.exists(!0)));
                    }
                    return i.Ps.Ks(u, e, s, t);
                }));
            })).then((function(t) {
                var i = t._r(n);
                return {
                    batchId: t.batchId,
                    ds: i
                };
            }));
        }, 
        /** Returns the local view of the documents affected by a mutation batch. */
        // PORTING NOTE: Multi-tab only.
        t.prototype.Js = function(t) {
            var n = this;
            return this.persistence.runTransaction("Lookup mutation documents", "readonly", (function(i) {
                return n.Ps.Hs(i, t).next((function(t) {
                    return t ? n.Us.Bs(i, t) : si.resolve(null);
                }));
            }));
        }, 
        /**
         * Acknowledge the given batch.
         *
         * On the happy path when a batch is acknowledged, the local store will
         *
         *  + remove the batch from the mutation queue;
         *  + apply the changes to the remote document cache;
         *  + recalculate the latency compensated view implied by those changes (there
         *    may be mutations in the queue that affect the documents but haven't been
         *    acknowledged yet); and
         *  + give the changed documents back the sync engine
         *
         * @returns The resulting (modified) documents.
         */
        t.prototype.Ys = function(t) {
            var n = this;
            return this.persistence.runTransaction("Acknowledge batch", "readwrite-primary", (function(i) {
                var e = t.batch.keys(), r = n.ks.Xs({
                    $s: !0
                });
                return n.Ps.Ys(i, t.batch, t.streamToken).next((function() {
                    return n.Zs(i, t, r);
                })).next((function() {
                    return r.apply(i);
                })).next((function() {
                    return n.Ps.to(i);
                })).next((function() {
                    return n.Us.Bs(i, e);
                }));
            }));
        }, 
        /**
         * Remove mutations from the MutationQueue for the specified batch;
         * LocalDocuments will be recalculated.
         *
         * @returns The resulting modified documents.
         */
        t.prototype.no = function(t) {
            var n = this;
            return this.persistence.runTransaction("Reject batch", "readwrite-primary", (function(i) {
                var e;
                return n.Ps.io(i, t).next((function(t) {
                    return Wn(null !== t, "Attempt to reject nonexistent batch!"), e = t.keys(), n.Ps.eo(i, t);
                })).next((function() {
                    return n.Ps.to(i);
                })).next((function() {
                    return n.Us.Bs(i, e);
                }));
            }));
        }, 
        /**
         * Returns the largest (latest) batch id in mutation queue that is pending server response.
         * Returns `BATCHID_UNKNOWN` if the queue is empty.
         */
        t.prototype.ro = function() {
            var t = this;
            return this.persistence.runTransaction("Get highest unacknowledged batch id", "readonly", (function(n) {
                return t.Ps.ro(n);
            }));
        }, 
        /** Returns the last recorded stream token for the current user. */
        t.prototype.uo = function() {
            var t = this;
            return this.persistence.runTransaction("Get last stream token", "readonly", (function(n) {
                return t.Ps.uo(n);
            }));
        }, 
        /**
         * Sets the stream token for the current user without acknowledging any
         * mutation batch. This is usually only useful after a stream handshake or in
         * response to an error that requires clearing the stream token.
         */
        t.prototype.so = function(t) {
            var n = this;
            return this.persistence.runTransaction("Set last stream token", "readwrite-primary", (function(i) {
                return n.Ps.so(i, t);
            }));
        }, 
        /**
         * Returns the last consistent snapshot processed (used by the RemoteStore to
         * determine whether to buffer incoming snapshots from the backend).
         */
        t.prototype.oo = function() {
            var t = this;
            return this.persistence.runTransaction("Get last remote snapshot version", "readonly", (function(n) {
                return t.Os.oo(n);
            }));
        }, 
        /**
         * Update the "ground-state" (remote) documents. We assume that the remote
         * event reflects any write batches that have been acknowledged or rejected
         * (i.e. we do not re-apply local mutations to updates from this event).
         *
         * LocalDocuments are re-calculated if there are remaining mutations in the
         * queue.
         */
        t.prototype.ho = function(n) {
            var i = this, e = n.ni, r = this.Ds;
            return this.persistence.runTransaction("Apply remote event", "readwrite-primary", (function(u) {
                var s = i.ks.Xs({
                    $s: !0
                });
                // Reset newTargetDataByTargetMap in case this transaction gets re-run.
                            r = i.Ds;
                var o = [];
                n.wi.forEach((function(n, s) {
                    var h = r.get(s);
                    if (h) {
                        // Only update the remote keys if the target is still active. This
                        // ensures that we can persist the updated target data along with
                        // the updated assignment.
                        o.push(i.Os.co(u, n.Ei, s).next((function() {
                            return i.Os.ao(u, n.Ii, s);
                        })));
                        var c = n.resumeToken;
                        // Update the resume token if the change includes one.
                                            if (c.Lt() > 0) {
                            var a = h.ei(c, e).ii(u.fo);
                            r = r.ut(s, a), 
                            // Update the target data if there are target changes (or if
                            // sufficient time has passed since the last update).
                            t.lo(h, a, n) && o.push(i.Os.do(u, a));
                        }
                    }
                }));
                var h = hn(), c = wn();
                // HACK: The only reason we allow a null snapshot version is so that we
                // can synthesize remote events when we get permission denied errors while
                // trying to resolve the state of a locally cached document that is in
                // limbo.
                if (n.pi.forEach((function(t, n) {
                    c = c.add(t);
                })), 
                // Each loop iteration only affects its "own" doc, so it's safe to get all the remote
                // documents in advance in a single call.
                o.push(s.getEntries(u, c).next((function(t) {
                    n.pi.forEach((function(r, c) {
                        var a = t.get(r);
                        // Note: The order of the steps below is important, since we want
                        // to ensure that rejected limbo resolutions (which fabricate
                        // NoDocuments with SnapshotVersion.MIN) never add documents to
                        // cache.
                                            c instanceof Lt && c.version.isEqual(k.MIN) ? (
                        // NoDocuments with SnapshotVersion.MIN are used in manufactured
                        // events. We remove these documents from cache since we lost
                        // access.
                        s.bs(r, e), h = h.ut(r, c)) : null == a || c.version.k(a.version) > 0 || 0 === c.version.k(a.version) && a.hasPendingWrites ? (Wn(!k.MIN.isEqual(e), "Cannot add a document when the remote version is zero"), 
                        s.ms(c, e), h = h.ut(r, c)) : qn("LocalStore", "Ignoring outdated watch update for ", r, ". Current version:", a.version, " Watch version:", c.version), 
                        n.bi.has(r) && o.push(i.persistence.Cs.vo(u, r));
                    }));
                }))), !e.isEqual(k.MIN)) {
                    var a = i.Os.oo(u).next((function(t) {
                        return Wn(e.k(t) >= 0, "Watch stream reverted to previous snapshot?? " + e + " < " + t), 
                        i.Os.wo(u, u.fo, e);
                    }));
                    o.push(a);
                }
                return si.pu(o).next((function() {
                    return s.apply(u);
                })).next((function() {
                    return i.Us.mo(u, h);
                }));
            })).then((function(t) {
                return i.Ds = r, t;
            }));
        }, 
        /**
         * Returns true if the newTargetData should be persisted during an update of
         * an active target. TargetData should always be persisted when a target is
         * being released and should not call this function.
         *
         * While the target is active, TargetData updates can be omitted when nothing
         * about the target has changed except metadata like the resume token or
         * snapshot version. Occasionally it's worth the extra write to prevent these
         * values from getting too stale after a crash, but this doesn't have to be
         * too frequent.
         */
        t.lo = function(t, n, i) {
            // Always persist target data if we don't already have a resume token.
            return Wn(n.resumeToken.Lt() > 0, "Attempted to persist target data with no resume token"), 
            0 === t.resumeToken.Lt() || (n.ni.N() - t.ni.N() >= this.po || i.Ii.size + i.Ti.size + i.Ei.size > 0);
            // Don't allow resume token changes to be buffered indefinitely. This
            // allows us to be reasonably up-to-date after a crash and avoids needing
            // to loop over all active queries on shutdown. Especially in the browser
            // we may not get time to do anything interesting while the current tab is
            // closing.
            }, 
        /**
         * Notify local store of the changed views to locally pin documents.
         */
        t.prototype.bo = function(t) {
            for (var n = this, i = 0, e = t; i < e.length; i++) {
                var r = e[i], u = r.targetId;
                if (this.Es.rs(r.Rr, u), this.Es.os(r.Sr, u), !r.fromCache) {
                    var s = this.Ds.get(u);
                    Wn(null !== s, "Can't set limbo-free snapshot version for unknown target: " + u);
                    // Advance the last limbo free snapshot version
                    var o = s.ni, h = s.ri(o);
                    this.Ds = this.Ds.ut(u, h);
                }
            }
            return this.persistence.runTransaction("notifyLocalViewChanges", "readwrite", (function(i) {
                return si.forEach(t, (function(t) {
                    return si.forEach(t.Sr, (function(t) {
                        return n.persistence.Cs.us(i, t);
                    }));
                }));
            }));
        }, 
        /**
         * Gets the mutation batch after the passed in batchId in the mutation queue
         * or null if empty.
         * @param afterBatchId If provided, the batch to search after.
         * @returns The next mutation or null if there wasn't one.
         */
        t.prototype.yo = function(t) {
            var n = this;
            return this.persistence.runTransaction("Get next mutation batch", "readonly", (function(i) {
                return void 0 === t && (t = -1), n.Ps._o(i, t);
            }));
        }, 
        /**
         * Read the current value of a Document with a given key or null if not
         * found - used for testing.
         */
        t.prototype.Io = function(t) {
            var n = this;
            return this.persistence.runTransaction("read document", "readonly", (function(i) {
                return n.Us.To(i, t);
            }));
        }, 
        /**
         * Assigns the given target an internal ID so that its results can be pinned so
         * they don't get GC'd. A target must be allocated in the local store before
         * the store can be used to manage its view.
         *
         * Allocating an already allocated `Target` will return the existing `TargetData`
         * for that `Target`.
         */
        t.prototype.Eo = function(t) {
            var n = this;
            return this.persistence.runTransaction("Allocate target", "readwrite", (function(i) {
                var e;
                return n.Os.Do(i, t).next((function(r) {
                    return r ? (
                    // This target has been listened to previously, so reuse the
                    // previous targetID.
                    // TODO(mcg): freshen last accessed date?
                    e = r, si.resolve(e)) : n.Os.Ro(i).next((function(r) {
                        return e = new en(t, r, 0 /* Listen */ , i.fo), n.Os.So(i, e).next((function() {
                            return e;
                        }));
                    }));
                }));
            })).then((function(i) {
                return null === n.Ds.get(i.targetId) && (n.Ds = n.Ds.ut(i.targetId, i), n.Rs.set(t, i.targetId)), 
                i;
            }));
        }, 
        /**
         * Returns the TargetData as seen by the LocalStore, including updates that may
         * have not yet been persisted to the TargetCache.
         */
        // Visible for testing.
        t.prototype.Do = function(t, n) {
            var i = this.Rs.get(n);
            return void 0 !== i ? si.resolve(this.Ds.get(i)) : this.Os.Do(t, n);
        }, 
        /**
         * Unpin all the documents associated with the given target. If
         * `keepPersistedTargetData` is set to false and Eager GC enabled, the method
         * directly removes the associated target data from the target cache.
         *
         * Releasing a non-existing `Target` is a no-op.
         */
        // PORTING NOTE: `keepPersistedTargetData` is multi-tab only.
        t.prototype.Ao = function(t, n) {
            var i = this, e = this.Ds.get(t);
            Wn(null !== e, "Tried to release nonexistent target: " + t);
            var r = n ? "readwrite" : "readwrite-primary";
            return this.persistence.runTransaction("Release target", r, (function(r) {
                // References for documents sent via Watch are automatically removed
                // when we delete a target's data from the reference delegate.
                // Since this does not remove references for locally mutated documents,
                // we have to remove the target associations for these documents
                // manually.
                // This operation needs to be run inside the transaction since EagerGC
                // uses the local view references during the transaction's commit.
                // Fortunately, the operation is safe to be re-run in case the
                // transaction fails since there are no side effects if the target has
                // already been removed.
                var u = i.Es.hs(t);
                return n ? si.resolve() : si.forEach(u, (function(t) {
                    return i.persistence.Cs.us(r, t);
                })).next((function() {
                    i.persistence.Cs.removeTarget(r, e);
                }));
            })).then((function() {
                i.Ds = i.Ds.remove(t), i.Rs.delete(e.target);
            }));
        }, 
        /**
         * Runs the specified query against the local store and returns the results,
         * potentially taking advantage of query data from previous executions (such
         * as the set of remote keys).
         *
         * @param usePreviousResults Whether results from previous executions can
         * be used to optimize this query execution.
         */
        t.prototype.Co = function(t, n) {
            var i = this, e = k.MIN, r = wn();
            return this.persistence.runTransaction("Execute query", "readonly", (function(u) {
                return i.Do(u, t.qn()).next((function(t) {
                    if (t) return e = t.lastLimboFreeSnapshotVersion, i.Os.Po(u, t.targetId).next((function(t) {
                        r = t;
                    }));
                })).next((function() {
                    return i.Ts.Vo(u, t, n ? e : k.MIN, n ? r : wn());
                })).next((function(t) {
                    return {
                        documents: t,
                        ko: r
                    };
                }));
            }));
        }, 
        /**
         * Returns the keys of the documents that are associated with the given
         * target id in the remote table.
         */
        t.prototype.No = function(t) {
            var n = this;
            return this.persistence.runTransaction("Remote document keys", "readonly", (function(i) {
                return n.Os.Po(i, t);
            }));
        }, 
        // PORTING NOTE: Multi-tab only.
        t.prototype.Oo = function() {
            return this.persistence.Oo();
        }, 
        // PORTING NOTE: Multi-tab only.
        t.prototype.Fo = function(t) {
            this.Ps.Uo(t);
        }, 
        // PORTING NOTE: Multi-tab only.
        t.prototype.jo = function(t) {
            this.persistence.jo(t);
        }, t.prototype.Zs = function(t, n, i) {
            var e = this, r = n.batch, u = r.keys(), s = si.resolve();
            return u.forEach((function(e) {
                s = s.next((function() {
                    return i.gs(t, e);
                })).next((function(t) {
                    var u = t, s = n.Tr.get(e);
                    Wn(null !== s, "ackVersions should contain every doc in the write."), (!u || u.version.k(s) < 0) && ((u = r.Bt(e, u, n)) ? 
                    // We use the commitVersion as the readTime rather than the
                    // document's updateTime since the updateTime is not advanced
                    // for updates that do not modify the underlying document.
                    i.ms(u, n.Ir) : Wn(!t, "Mutation batch " + r + " applied to document " + t + " resulted in null"));
                }));
            })), s.next((function() {
                return e.Ps.eo(t, r);
            }));
        }, t.prototype.Bu = function(t) {
            var n = this;
            return this.persistence.runTransaction("Collect garbage", "readwrite-primary", (function(i) {
                return t.Yu(i, n.Ds);
            }));
        }, 
        // PORTING NOTE: Multi-tab only.
        t.prototype.xo = function(t) {
            var n = this, i = this.Ds.get(t);
            return i ? Promise.resolve(i.target) : this.persistence.runTransaction("Get target data", "readonly", (function(i) {
                return n.Os.ce(i, t).next((function(t) {
                    return t ? t.target : null;
                }));
            }));
        }, 
        /**
         * Returns the set of documents that have been updated since the last call.
         * If this is the first call, returns the set of changes since client
         * initialization. Further invocations will return document changes since
         * the point of rejection.
         */
        // PORTING NOTE: Multi-tab only.
        t.prototype.Lo = function() {
            var t = this;
            return this.persistence.runTransaction("Get new document changes", "readonly", (function(n) {
                return t.ks.Lo(n, t.Ss);
            })).then((function(n) {
                var i = n.Mo, e = n.readTime;
                return t.Ss = e, i;
            }));
        }, 
        /**
         * Reads the newest document change from persistence and forwards the internal
         * synchronization marker so that calls to `getNewDocumentChanges()`
         * only return changes that happened after client initialization.
         */
        // PORTING NOTE: Multi-tab only.
        t.prototype.Ls = function() {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var t, n = this;
                return tslib_es6.__generator(this, (function(i) {
                    switch (i.label) {
                      case 0:
                        return t = this, [ 4 /*yield*/ , this.persistence.runTransaction("Synchronize last document change read time", "readonly", (function(t) {
                            return n.ks.qo(t);
                        })) ];

                      case 1:
                        return t.Ss = i.sent(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * The maximum time to leave a resume token buffered without writing it out.
         * This value is arbitrary: it's long enough to avoid several writes
         * (possibly indefinitely if updates come more frequently than this) but
         * short enough that restarting after crashing will still have a pretty
         * recent resume token.
         */
        t.po = 3e8, t;
    }();

    /**
     * Verifies the error thrown by a LocalStore operation. If a LocalStore
     * operation fails because the primary lease has been taken by another client,
     * we ignore the error (the persistence layer will immediately call
     * `applyPrimaryLease` to propagate the primary state change). All other errors
     * are re-thrown.
     *
     * @param err An error returned by a LocalStore operation.
     * @return A Promise that resolves after we recovered, or the original error.
     */
    function pi(t) {
        return tslib_es6.__awaiter(this, void 0, void 0, (function() {
            return tslib_es6.__generator(this, (function(n) {
                if (t.code !== T.FAILED_PRECONDITION || t.message !== Ai) throw t;
                return qn("LocalStore", "Unexpectedly lost primary lease"), [ 2 /*return*/ ];
            }));
        }));
    }

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // The format of the LocalStorage key that stores the client state is:
    //     firestore_clients_<persistence_prefix>_<instance_key>
    /** Assembles the key for a client state in WebStorage */
    function bi(t, n) {
        return Wn(-1 === n.indexOf("_"), "Client key cannot contain '_', but was '" + n + "'"), 
        "firestore_clients_" + t + "_" + n;
    }

    // The format of the WebStorage key that stores the mutation state is:
    //     firestore_mutations_<persistence_prefix>_<batch_id>
    //     (for unauthenticated users)
    // or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>

    // 'user_uid' is last to avoid needing to escape '_' characters that it might
    // contain.
    /** Assembles the key for a mutation batch in WebStorage */
    function gi(t, n, i) {
        var e = "firestore_mutations_" + t + "_" + i;
        return n.t() && (e += "_" + n.uid), e;
    }

    // The format of the WebStorage key that stores a query target's metadata is:
    //     firestore_targets_<persistence_prefix>_<target_id>
    /** Assembles the key for a query state in WebStorage */
    function yi(t, n) {
        return "firestore_targets_" + t + "_" + n;
    }

    // The WebStorage prefix that stores the primary tab's online state. The
    // format of the key is:
    //     firestore_online_state_<persistence_prefix>
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _i = /** @class */ function() {
        function t(t, n, i, e) {
            this.user = t, this.batchId = n, this.state = i, this.error = e, Wn(void 0 !== e == ("rejected" === i), "MutationMetadata must contain an error iff state is 'rejected'");
        }
        /**
         * Parses a MutationMetadata from its JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */    return t.Bo = function(n, i, e) {
            var r = JSON.parse(e), u = "object" == typeof r && -1 !== [ "pending", "acknowledged", "rejected" ].indexOf(r.state) && (void 0 === r.error || "object" == typeof r.error), s = void 0;
            return u && r.error && (u = "string" == typeof r.error.message && "string" == typeof r.error.code) && (s = new E(r.error.code, r.error.message)), 
            u ? new t(n, i, r.state, s) : (Bn("SharedClientState", "Failed to parse mutation state for ID '" + i + "': " + e), 
            null);
        }, t.prototype.Qo = function() {
            var t = {
                state: this.state,
                updateTimeMs: Date.now()
            };
            return this.error && (t.error = {
                code: this.error.code,
                message: this.error.message
            }), JSON.stringify(t);
        }, t;
    }(), Ii = /** @class */ function() {
        function t(t, n, i) {
            this.targetId = t, this.state = n, this.error = i, Wn(void 0 !== i == ("rejected" === n), "QueryTargetMetadata must contain an error iff state is 'rejected'");
        }
        /**
         * Parses a QueryTargetMetadata from its JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */    return t.Bo = function(n, i) {
            var e = JSON.parse(i), r = "object" == typeof e && -1 !== [ "not-current", "current", "rejected" ].indexOf(e.state) && (void 0 === e.error || "object" == typeof e.error), u = void 0;
            return r && e.error && (r = "string" == typeof e.error.message && "string" == typeof e.error.code) && (u = new E(e.error.code, e.error.message)), 
            r ? new t(n, e.state, u) : (Bn("SharedClientState", "Failed to parse target state for ID '" + n + "': " + i), 
            null);
        }, t.prototype.Qo = function() {
            var t = {
                state: this.state,
                updateTimeMs: Date.now()
            };
            return this.error && (t.error = {
                code: this.error.code,
                message: this.error.message
            }), JSON.stringify(t);
        }, t;
    }(), Ti = /** @class */ function() {
        function t(t, n) {
            this.clientId = t, this.activeTargetIds = n;
        }
        /**
         * Parses a RemoteClientState from the JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */    return t.Bo = function(n, i) {
            for (var e = JSON.parse(i), r = "object" == typeof e && e.activeTargetIds instanceof Array, u = pn(), s = 0; r && s < e.activeTargetIds.length; ++s) r = Y(e.activeTargetIds[s]), 
            u = u.add(e.activeTargetIds[s]);
            return r ? new t(n, u) : (Bn("SharedClientState", "Failed to parse client data for instance '" + n + "': " + i), 
            null);
        }, t;
    }(), Ei = /** @class */ function() {
        function t(t, n) {
            this.clientId = t, this.onlineState = n;
        }
        /**
         * Parses a SharedOnlineState from its JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */    return t.Bo = function(n) {
            var i = JSON.parse(n);
            return "object" == typeof i && -1 !== [ "Unknown", "Online", "Offline" ].indexOf(i.onlineState) && "string" == typeof i.clientId ? new t(i.clientId, i.onlineState) : (Bn("SharedClientState", "Failed to parse online state: " + n), 
            null);
        }, t;
    }(), Di = /** @class */ function() {
        function t() {
            this.activeTargetIds = pn();
        }
        return t.prototype.Go = function(t) {
            this.activeTargetIds = this.activeTargetIds.add(t);
        }, t.prototype.Wo = function(t) {
            this.activeTargetIds = this.activeTargetIds.delete(t);
        }, 
        /**
         * Converts this entry into a JSON-encoded format we can use for WebStorage.
         * Does not encode `clientId` as it is part of the key in WebStorage.
         */
        t.prototype.Qo = function() {
            var t = {
                activeTargetIds: this.activeTargetIds.K(),
                updateTimeMs: Date.now()
            };
            return JSON.stringify(t);
        }, t;
    }(), Ri = /** @class */ function() {
        function t(n, i, e, r, u) {
            if (this.zo = n, this.platform = i, this.persistenceKey = e, this.Ko = r, this.Jo = null, 
            this.Ho = null, this.Cr = null, this.Yo = {}, this.Xo = this.$o.bind(this), this.qu = !1, 
            /**
             * Captures WebStorage events that occur before `start()` is called. These
             * events are replayed once `WebStorageSharedClientState` is started.
             */
            this.Zo = [], !t.th(this.platform)) throw new E(T.UNIMPLEMENTED, "LocalStorage is not available on this platform.");
            // Escape the special characters mentioned here:
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
                    var s = e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
            this.storage = this.platform.window.localStorage, this.currentUser = u, this.nh = bi(this.persistenceKey, this.Ko), 
            this.ih = 
            /** Assembles the key for the current sequence number. */
            function(t) {
                return "firestore_sequence_number_" + t;
            }(this.persistenceKey), this.Yo[this.Ko] = new Di, this.eh = new RegExp("^firestore_clients_" + s + "_([^_]*)$"), 
            this.rh = new RegExp("^firestore_mutations_" + s + "_(\\d+)(?:_(.*))?$"), this.uh = new RegExp("^firestore_targets_" + s + "_(\\d+)$"), 
            this.sh = 
            /** Assembles the key for the online state of the primary tab. */
            function(t) {
                return "firestore_online_state_" + t;
            }
            // The WebStorage key prefix for the key that stores the last sequence number allocated. The key
            // looks like 'firestore_sequence_number_<persistence_prefix>'.
            (this.persistenceKey), 
            // Rather than adding the storage observer during start(), we add the
            // storage observer during initialization. This ensures that we collect
            // events before other components populate their initial state (during their
            // respective start() calls). Otherwise, we might for example miss a
            // mutation that is added after LocalStore's start() processed the existing
            // mutations but before we observe WebStorage events.
            this.platform.window.addEventListener("storage", this.Xo);
        }
        /** Returns 'true' if WebStorage is available in the current environment. */    return t.th = function(t) {
            return !(!t.window || null == t.window.localStorage);
        }, t.prototype.start = function() {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var t, n, i, e, r, s, o, h, c, a, f, l = this;
                return tslib_es6.__generator(this, (function(u) {
                    switch (u.label) {
                      case 0:
                        return Wn(!this.qu, "WebStorageSharedClientState already started"), Wn(null !== this.Jo, "syncEngine property must be set before calling start()"), 
                        Wn(null !== this.Ho, "onlineStateHandler property must be set before calling start()"), 
                        [ 4 /*yield*/ , this.Jo.Oo() ];

                      case 1:
                        for (t = u.sent(), n = 0, i = t; n < i.length; n++) (e = i[n]) !== this.Ko && (r = this.getItem(bi(this.persistenceKey, e))) && (s = Ti.Bo(e, r)) && (this.Yo[s.clientId] = s);
                        for (this.oh(), (o = this.storage.getItem(this.sh)) && (h = this.hh(o)) && this.ah(h), 
                        c = 0, a = this.Zo; c < a.length; c++) f = a[c], this.$o(f);
                        return this.Zo = [], 
                        // Register a window unload hook to remove the client metadata entry from
                        // WebStorage even if `shutdown()` was not called.
                        this.platform.window.addEventListener("unload", (function() {
                            return l.shutdown();
                        })), this.qu = !0, [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.kr = function(t) {
            this.setItem(this.ih, JSON.stringify(t));
        }, t.prototype.fh = function() {
            var t = pn();
            return W(this.Yo, (function(n, i) {
                t = t.Ft(i.activeTargetIds);
            })), t;
        }, t.prototype.lh = function(t) {
            // This is not using `obj.forEach` since `forEach` doesn't support early
            // return.
            for (var n in this.Yo) if (this.Yo.hasOwnProperty(n) && this.Yo[n].activeTargetIds.has(t)) return !0;
            return !1;
        }, t.prototype.dh = function(t) {
            this.vh(t, "pending");
        }, t.prototype.wh = function(t, n, i) {
            this.vh(t, n, i), 
            // Once a final mutation result is observed by other clients, they no longer
            // access the mutation's metadata entry. Since WebStorage replays events
            // in order, it is safe to delete the entry right after updating it.
            this.mh(t);
        }, t.prototype.ph = function(t) {
            var n = "not-current";
            // Lookup an existing query state if the target ID was already registered
            // by another tab
                    if (this.lh(t)) {
                var i = this.storage.getItem(yi(this.persistenceKey, t));
                if (i) {
                    var e = Ii.Bo(t, i);
                    e && (n = e.state);
                }
            }
            return this.bh.Go(t), this.oh(), n;
        }, t.prototype.gh = function(t) {
            this.bh.Wo(t), this.oh();
        }, t.prototype.yh = function(t) {
            return this.bh.activeTargetIds.has(t);
        }, t.prototype._h = function(t) {
            this.removeItem(yi(this.persistenceKey, t));
        }, t.prototype.Ih = function(t, n, i) {
            this.Th(t, n, i);
        }, t.prototype.Ms = function(t, n, i) {
            var e = this;
            n.forEach((function(t) {
                e.mh(t);
            })), this.currentUser = t, i.forEach((function(t) {
                e.dh(t);
            }));
        }, t.prototype.Eh = function(t) {
            this.Dh(t);
        }, t.prototype.shutdown = function() {
            this.qu && (this.platform.window.removeEventListener("storage", this.Xo), this.removeItem(this.nh), 
            this.qu = !1);
        }, t.prototype.getItem = function(t) {
            var n = this.storage.getItem(t);
            return qn("SharedClientState", "READ", t, n), n;
        }, t.prototype.setItem = function(t, n) {
            qn("SharedClientState", "SET", t, n), this.storage.setItem(t, n);
        }, t.prototype.removeItem = function(t) {
            qn("SharedClientState", "REMOVE", t), this.storage.removeItem(t);
        }, t.prototype.$o = function(t) {
            var n = this;
            if (t.storageArea === this.storage) {
                if (qn("SharedClientState", "EVENT", t.key, t.newValue), t.key === this.nh) return void Bn("Received WebStorage notification for local change. Another client might have garbage-collected our state");
                this.zo.Qr((function() {
                    return tslib_es6.__awaiter(n, void 0, void 0, (function() {
                        var n, i, e, r, s, o;
                        return tslib_es6.__generator(this, (function(u) {
                            if (!this.qu) return this.Zo.push(t), [ 2 /*return*/ ];
                            if (null === t.key) return [ 2 /*return*/ ];
                            if (this.eh.test(t.key)) {
                                if (null == t.newValue) return i = this.Rh(t.key), [ 2 /*return*/ , this.Sh(i, null) ];
                                if (n = this.Ah(t.key, t.newValue)) return [ 2 /*return*/ , this.Sh(n.clientId, n) ];
                            } else if (this.rh.test(t.key)) {
                                if (null !== t.newValue && (e = this.Ch(t.key, t.newValue))) return [ 2 /*return*/ , this.Ph(e) ];
                            } else if (this.uh.test(t.key)) {
                                if (null !== t.newValue && (r = this.Vh(t.key, t.newValue))) return [ 2 /*return*/ , this.kh(r) ];
                            } else if (t.key === this.sh) {
                                if (null !== t.newValue && (s = this.hh(t.newValue))) return [ 2 /*return*/ , this.ah(s) ];
                            } else t.key === this.ih && (Wn(!!this.Cr, "Missing sequenceNumberHandler"), (o = function(t) {
                                var n = ii.Nr;
                                if (null != t) try {
                                    var i = JSON.parse(t);
                                    Wn("number" == typeof i, "Found non-numeric sequence number"), n = i;
                                } catch (t) {
                                    Bn("SharedClientState", "Failed to read sequence number from WebStorage", t);
                                }
                                return n;
                            }
                            /**
     * `MemorySharedClientState` is a simple implementation of SharedClientState for
     * clients using memory persistence. The state in this class remains fully
     * isolated and no synchronization is performed.
     */ (t.newValue)) !== ii.Nr && this.Cr(o));
                            return [ 2 /*return*/ ];
                        }));
                    }));
                }));
            }
        }, Object.defineProperty(t.prototype, "bh", {
            get: function() {
                return this.Yo[this.Ko];
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.oh = function() {
            this.setItem(this.nh, this.bh.Qo());
        }, t.prototype.vh = function(t, n, i) {
            var e = new _i(this.currentUser, t, n, i), r = gi(this.persistenceKey, this.currentUser, t);
            this.setItem(r, e.Qo());
        }, t.prototype.mh = function(t) {
            var n = gi(this.persistenceKey, this.currentUser, t);
            this.removeItem(n);
        }, t.prototype.Dh = function(t) {
            var n = {
                clientId: this.Ko,
                onlineState: t
            };
            this.storage.setItem(this.sh, JSON.stringify(n));
        }, t.prototype.Th = function(t, n, i) {
            var e = yi(this.persistenceKey, t), r = new Ii(t, n, i);
            this.setItem(e, r.Qo());
        }, 
        /**
         * Parses a client state key in WebStorage. Returns null if the key does not
         * match the expected key format.
         */
        t.prototype.Rh = function(t) {
            var n = this.eh.exec(t);
            return n ? n[1] : null;
        }, 
        /**
         * Parses a client state in WebStorage. Returns 'null' if the value could not
         * be parsed.
         */
        t.prototype.Ah = function(t, n) {
            var i = this.Rh(t);
            return Wn(null !== i, "Cannot parse client state key '" + t + "'"), Ti.Bo(i, n);
        }, 
        /**
         * Parses a mutation batch state in WebStorage. Returns 'null' if the value
         * could not be parsed.
         */
        t.prototype.Ch = function(t, n) {
            var i = this.rh.exec(t);
            Wn(null !== i, "Cannot parse mutation batch key '" + t + "'");
            var e = Number(i[1]), r = void 0 !== i[2] ? i[2] : null;
            return _i.Bo(new I(r), e, n);
        }, 
        /**
         * Parses a query target state from WebStorage. Returns 'null' if the value
         * could not be parsed.
         */
        t.prototype.Vh = function(t, n) {
            var i = this.uh.exec(t);
            Wn(null !== i, "Cannot parse query target key '" + t + "'");
            var e = Number(i[1]);
            return Ii.Bo(e, n);
        }, 
        /**
         * Parses an online state from WebStorage. Returns 'null' if the value
         * could not be parsed.
         */
        t.prototype.hh = function(t) {
            return Ei.Bo(t);
        }, t.prototype.Ph = function(t) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                return tslib_es6.__generator(this, (function(n) {
                    return t.user.uid !== this.currentUser.uid ? (qn("SharedClientState", "Ignoring mutation for non-active user " + t.user.uid), 
                    [ 2 /*return*/ ]) : [ 2 /*return*/ , this.Jo.Nh(t.batchId, t.state, t.error) ];
                }));
            }));
        }, t.prototype.kh = function(t) {
            return this.Jo.Oh(t.targetId, t.state, t.error);
        }, t.prototype.Sh = function(t, n) {
            var i = this, e = this.fh();
            n ? this.Yo[t] = n : delete this.Yo[t];
            var s = this.fh(), o = [], h = [];
            return s.forEach((function(t) {
                return tslib_es6.__awaiter(i, void 0, void 0, (function() {
                    return tslib_es6.__generator(this, (function(n) {
                        return e.has(t) || o.push(t), [ 2 /*return*/ ];
                    }));
                }));
            })), e.forEach((function(t) {
                return tslib_es6.__awaiter(i, void 0, void 0, (function() {
                    return tslib_es6.__generator(this, (function(n) {
                        return s.has(t) || h.push(t), [ 2 /*return*/ ];
                    }));
                }));
            })), this.Jo.Fh(o, h);
        }, t.prototype.ah = function(t) {
            // We check whether the client that wrote this online state is still active
            // by comparing its client ID to the list of clients kept active in
            // IndexedDb. If a client does not update their IndexedDb client state
            // within 5 seconds, it is considered inactive and we don't emit an online
            // state event.
            this.Yo[t.clientId] && this.Ho(t.onlineState);
        }, t;
    }();

    /**
     * Holds the state of a mutation batch, including its user ID, batch ID and
     * whether the batch is 'pending', 'acknowledged' or 'rejected'.
     */
    // Visible for testing
    var Si = /** @class */ function() {
        function t() {
            this.Uh = new Di, this.jh = {}, this.Jo = null, this.Ho = null, this.Cr = null;
        }
        return t.prototype.dh = function(t) {
            // No op.
        }, t.prototype.wh = function(t, n, i) {
            // No op.
        }, t.prototype.ph = function(t) {
            return this.Uh.Go(t), this.jh[t] || "not-current";
        }, t.prototype.Ih = function(t, n, i) {
            this.jh[t] = n;
        }, t.prototype.gh = function(t) {
            this.Uh.Wo(t);
        }, t.prototype.yh = function(t) {
            return this.Uh.activeTargetIds.has(t);
        }, t.prototype._h = function(t) {
            delete this.jh[t];
        }, t.prototype.fh = function() {
            return this.Uh.activeTargetIds;
        }, t.prototype.lh = function(t) {
            return this.Uh.activeTargetIds.has(t);
        }, t.prototype.start = function() {
            return this.Uh = new Di, Promise.resolve();
        }, t.prototype.Ms = function(t, n, i) {
            // No op.
        }, t.prototype.Eh = function(t) {
            // No op.
        }, t.prototype.shutdown = function() {}, t.prototype.kr = function(t) {}, t;
    }(), Ai = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.", Ci = /** @class */ function() {
        function t() {
            this.xh = [];
        }
        return t.prototype.Lh = function(t) {
            this.xh.push(t);
        }, t.prototype.Mh = function() {
            this.xh.forEach((function(t) {
                return t();
            }));
        }, t;
    }(), Pi = /** @class */ function() {
        function t(t, n, i) {
            this.qh = t, this.Ps = n, this.Bh = i;
        }
        /**
         * Get the local view of the document identified by `key`.
         *
         * @return Local view of the document or null if we don't have any cached
         * state for it.
         */    return t.prototype.To = function(t, n) {
            var i = this;
            return this.Ps.Qh(t, n).next((function(e) {
                return i.Gh(t, n, e);
            }));
        }, 
        /** Internal version of `getDocument` that allows reusing batches. */
        t.prototype.Gh = function(t, n, i) {
            return this.qh.gs(t, n).next((function(t) {
                for (var e = 0, r = i; e < r.length; e++) {
                    t = r[e].qt(n, t);
                }
                return t;
            }));
        }, 
        // Returns the view of the given `docs` as they would appear after applying
        // all mutations in the given `batches`.
        t.prototype.Wh = function(t, n, i) {
            var e = cn();
            return n.forEach((function(t, n) {
                for (var r = 0, u = i; r < u.length; r++) {
                    n = u[r].qt(t, n);
                }
                e = e.ut(t, n);
            })), e;
        }, 
        /**
         * Gets the local view of the documents identified by `keys`.
         *
         * If we don't have cached state for a document in `keys`, a NoDocument will
         * be stored for that key in the resulting set.
         */
        t.prototype.Bs = function(t, n) {
            var i = this;
            return this.qh.getEntries(t, n).next((function(n) {
                return i.mo(t, n);
            }));
        }, 
        /**
         * Similar to `getDocuments`, but creates the local view from the given
         * `baseDocs` without retrieving documents from the local store.
         */
        t.prototype.mo = function(t, n) {
            var i = this;
            return this.Ps.zh(t, n).next((function(e) {
                var r = i.Wh(t, n, e), u = hn();
                return r.forEach((function(t, n) {
                    // TODO(http://b/32275378): Don't conflate missing / deleted.
                    n || (n = new Lt(t, k.V())), u = u.ut(t, n);
                })), u;
            }));
        }, 
        /**
         * Performs a query against the local view of all documents.
         *
         * @param transaction The persistence transaction.
         * @param query The query to match documents against.
         * @param sinceReadTime If not set to SnapshotVersion.MIN, return only
         *     documents that have been read since this snapshot version (exclusive).
         */
        t.prototype.Vo = function(t, n, i) {
            return n.Tn() ? this.Kh(t, n.path) : n.Yn() ? this.Jh(t, n, i) : this.Hh(t, n, i);
        }, t.prototype.Kh = function(t, n) {
            // Just do a simple document lookup.
            return this.To(t, new j(n)).next((function(t) {
                var n = fn();
                return t instanceof xt && (n = n.ut(t.key, t)), n;
            }));
        }, t.prototype.Jh = function(t, n, i) {
            var e = this;
            Wn(n.path.M(), "Currently we only support collection group queries at the root.");
            var r = n.collectionGroup, u = fn();
            return this.Bh.Yh(t, r).next((function(s) {
                // Perform a collection query against each parent that contains the
                // collectionId and aggregate the results.
                return si.forEach(s, (function(s) {
                    var o = n.Ln(s.child(r));
                    return e.Hh(t, o, i).next((function(t) {
                        t.forEach((function(t, n) {
                            u = u.ut(t, n);
                        }));
                    }));
                })).next((function() {
                    return u;
                }));
            }));
        }, t.prototype.Hh = function(t, n, i) {
            var e, r, u = this;
            // Query the remote documents and overlay mutations.
                    return this.qh.Vo(t, n, i).next((function(i) {
                return e = i, u.Ps.Xh(t, n);
            })).next((function(n) {
                // It is possible that a PatchMutation can make a document match a query, even if
                // the version in the RemoteDocumentCache is not a match yet (waiting for server
                // to ack). To handle this, we find all document keys affected by the PatchMutations
                // that are not in `result` yet, and back fill them via `remoteDocumentCache.getEntries`,
                // otherwise those `PatchMutations` will be ignored because no base document can be found,
                // and lead to missing result for the query.
                return r = n, u.$h(t, r, e).next((function(t) {
                    e = t;
                    for (var n = 0, i = r; n < i.length; n++) for (var u = i[n], s = 0, o = u.mutations; s < o.length; s++) {
                        var h = o[s], c = h.key, a = e.get(c), f = h.qt(a, a, u.gr);
                        e = f instanceof xt ? e.ut(c, f) : e.remove(c);
                    }
                }));
            })).next((function() {
                // Finally, filter out any documents that don't actually match
                // the query.
                return e.forEach((function(t, i) {
                    n.matches(i) || (e = e.remove(t));
                })), e;
            }));
        }, t.prototype.$h = function(t, n, i) {
            for (var e = wn(), r = 0, u = n; r < u.length; r++) for (var s = 0, o = u[r].mutations; s < o.length; s++) {
                var h = o[s];
                h instanceof Vt && null === i.get(h.key) && (e = e.add(h.key));
            }
            var c = i;
            return this.qh.getEntries(t, e).next((function(t) {
                return t.forEach((function(t, n) {
                    null !== n && n instanceof xt && (c = c.ut(t, n));
                })), c;
            }));
        }, t;
    }(), Vi = /** @class */ function() {
        function t() {}
        return t.prototype.xs = function(t) {
            this.Zh = t;
        }, t.prototype.Vo = function(t, n, i, e) {
            var r = this;
            // Queries that match all documents don't benefit from using
            // IndexFreeQueries. It is more efficient to scan all documents in a
            // collection, rather than to perform individual lookups.
            return Wn(void 0 !== this.Zh, "setLocalDocumentsView() not called"), n.Mn() || i.isEqual(k.MIN) ? this.tc(t, n) : this.Zh.Bs(t, e).next((function(u) {
                var s = r.nc(n, u);
                return (n.Kn() || n.Jn()) && r.ic(n.Dn, s, e, i) ? r.tc(t, n) : (Ln() <= index_esm.LogLevel.DEBUG && qn("IndexFreeQueryEngine", "Re-using previous result from %s to execute query: %s", i.toString(), n.toString()), 
                r.Zh.Vo(t, n, i).next((function(t) {
                    // We merge `previousResults` into `updateResults`, since
                    // `updateResults` is already a DocumentMap. If a document is
                    // contained in both lists, then its contents are the same.
                    return s.forEach((function(n) {
                        t = t.ut(n.key, n);
                    })), t;
                })));
            }));
            // Queries that have never seen a snapshot without limbo free documents
            // should also be run as a full collection scan.
            }, 
        /** Applies the query filter and sorting to the provided documents.  */
        t.prototype.nc = function(t, n) {
            // Sort the documents and re-apply the query filter since previously
            // matching documents do not necessarily still match the query.
            var i = new B((function(n, i) {
                return t.Bn(n, i);
            }));
            return n.forEach((function(n, e) {
                e instanceof xt && t.matches(e) && (i = i.add(e));
            })), i;
        }, 
        /**
         * Determines if a limit query needs to be refilled from cache, making it
         * ineligible for index-free execution.
         *
         * @param sortedPreviousResults The documents that matched the query when it
         * was last synchronized, sorted by the query's comparator.
         * @param remoteKeys The document keys that matched the query at the last
         * snapshot.
         * @param limboFreeSnapshotVersion The version of the snapshot when the query
         * was last synchronized.
         */
        t.prototype.ic = function(t, n, i, e) {
            // The query needs to be refilled if a previously matching document no
            // longer matches.
            if (i.size !== n.size) return !0;
            // Limit queries are not eligible for index-free query execution if there is
            // a potential that an older document from cache now sorts before a document
            // that was previously part of the limit. This, however, can only happen if
            // the document at the edge of the limit goes out of limit.
            // If a document that is not the limit boundary sorts differently,
            // the boundary of the limit itself did not change and documents from cache
            // will continue to be "rejected" by this boundary. Therefore, we can ignore
            // any modifications that don't affect the last document.
                    var r = "F" /* First */ === t ? n.last() : n.first();
            return !!r && (r.hasPendingWrites || r.version.k(e) > 0);
        }, t.prototype.tc = function(t, n) {
            return Ln() <= index_esm.LogLevel.DEBUG && qn("IndexFreeQueryEngine", "Using full collection scan to execute query: %s", n.toString()), 
            this.Zh.Vo(t, n, k.MIN);
        }, t;
    }();

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Encodes a resource path into a IndexedDb-compatible string form.
     */
    function ki(t) {
        for (var n = "", i = 0; i < t.length; i++) n.length > 0 && (n = Oi(n)), n = Ni(t.get(i), n);
        return Oi(n);
    }

    /** Encodes a single segment of a resource path into the given result */ function Ni(t, n) {
        for (var i = n, e = t.length, r = 0; r < e; r++) {
            var u = t.charAt(r);
            switch (u) {
              case "\0":
                i += "";
                break;

              case "":
                i += "";
                break;

              default:
                i += u;
            }
        }
        return i;
    }

    /** Encodes a path separator into the given result */ function Oi(t) {
        return t + "";
    }

    /**
     * Decodes the given IndexedDb-compatible string form of a resource path into
     * a ResourcePath instance. Note that this method is not suitable for use with
     * decoding resource names from the server; those are One Platform format
     * strings.
     */ function Fi(t) {
        // Event the empty path must encode as a path of at least length 2. A path
        // with exactly 2 must be the empty path.
        var n = t.length;
        if (Wn(n >= 2, "Invalid path " + t), 2 === n) return Wn("" === t.charAt(0) && "" === t.charAt(1), "Non-empty path " + t + " had length 2"), 
        O.Y;
        // Escape characters cannot exist past the second-to-last position in the
        // source value.
            for (var i = n - 2, e = [], r = "", u = 0; u < n; ) {
            // The last two characters of a valid encoded path must be a separator, so
            // there must be an end to this segment.
            var s = t.indexOf("", u);
            switch ((s < 0 || s > i) && Gn('Invalid encoded resource path: "' + t + '"'), t.charAt(s + 1)) {
              case "":
                var o = t.substring(u, s), h = void 0;
                0 === r.length ? 
                // Avoid copying for the common case of a segment that excludes \0
                // and \001
                h = o : (h = r += o, r = ""), e.push(h);
                break;

              case "":
                r += t.substring(u, s), r += "\0";
                break;

              case "":
                // The escape character can be used in the output to encode itself.
                r += t.substring(u, s + 1);
                break;

              default:
                Gn('Invalid encoded resource path: "' + t + '"');
            }
            u = s + 2;
        }
        return new O(e);
    }

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An in-memory implementation of IndexManager.
     */ var Ui = /** @class */ function() {
        function t() {
            this.ec = new ji;
        }
        return t.prototype.rc = function(t, n) {
            return this.ec.add(n), si.resolve();
        }, t.prototype.Yh = function(t, n) {
            return si.resolve(this.ec.getEntries(n));
        }, t;
    }(), ji = /** @class */ function() {
        function t() {
            this.index = {};
        }
        // Returns false if the entry already existed.
            return t.prototype.add = function(t) {
            Wn(t.length % 2 == 1, "Expected a collection path.");
            var n = t.B(), i = t.L(), e = this.index[n] || new B(O.F), r = !e.has(i);
            return this.index[n] = e.add(i), r;
        }, t.prototype.has = function(t) {
            var n = t.B(), i = t.L(), e = this.index[n];
            return e && e.has(i);
        }, t.prototype.getEntries = function(t) {
            return (this.index[t] || new B(O.F)).K();
        }, t;
    }(), xi = /** @class */ function() {
        function t(t, n) {
            this.Bh = t, this.Cs = n, 
            /**
             * The set of all mutations that have been sent but not yet been applied to
             * the backend.
             */
            this.Ps = [], 
            /** Next value to use when assigning sequential IDs to each mutation batch. */
            this.uc = 1, 
            /** The last received stream token from the server, used to acknowledge which
             * responses the client has processed. Stream tokens are opaque checkpoint
             * markers whose only real value is their inclusion in the next request.
             */
            this.lastStreamToken = K.Mt, 
            /** An ordered mapping between documents and the mutations batch IDs. */
            this.sc = new B(vi.bn);
        }
        return t.prototype.oc = function(t) {
            return si.resolve(0 === this.Ps.length);
        }, t.prototype.Ys = function(t, n, i) {
            var e = n.batchId, r = this.hc(e, "acknowledged");
            Wn(0 === r, "Can only acknowledge the first batch in the mutation queue");
            // Verify that the batch in the queue is the one to be acknowledged.
            var u = this.Ps[r];
            return Wn(e === u.batchId, "Queue ordering failure: expected batch " + e + ", got batch " + u.batchId), 
            this.lastStreamToken = i, si.resolve();
        }, t.prototype.uo = function(t) {
            return si.resolve(this.lastStreamToken);
        }, t.prototype.so = function(t, n) {
            return this.lastStreamToken = n, si.resolve();
        }, t.prototype.Ks = function(t, n, i, e) {
            Wn(0 !== e.length, "Mutation batches should not be empty");
            var r = this.uc;
            (this.uc++, this.Ps.length > 0) && Wn(this.Ps[this.Ps.length - 1].batchId < r, "Mutation batchIDs must be monotonically increasing order");
            var u = new $n(r, n, i, e);
            this.Ps.push(u);
            // Track references by document key and index collection parents.
            for (var s = 0, o = e; s < o.length; s++) {
                var h = o[s];
                this.sc = this.sc.add(new vi(h.key, r)), this.Bh.rc(t, h.key.path.L());
            }
            return si.resolve(u);
        }, t.prototype.io = function(t, n) {
            return si.resolve(this.cc(n));
        }, t.prototype.Hs = function(t, n) {
            var i = this.cc(n);
            return Wn(null != i, "Failed to find local mutation batch."), si.resolve(i.keys());
        }, t.prototype._o = function(t, n) {
            var i = n + 1, e = this.ac(i), r = e < 0 ? 0 : e;
            // The requested batchId may still be out of range so normalize it to the
            // start of the queue.
                    return si.resolve(this.Ps.length > r ? this.Ps[r] : null);
        }, t.prototype.ro = function() {
            return si.resolve(0 === this.Ps.length ? -1 : this.uc - 1);
        }, t.prototype.qs = function(t) {
            return si.resolve(this.Ps.slice());
        }, t.prototype.Qh = function(t, n) {
            var i = this, e = new vi(n, 0), r = new vi(n, Number.POSITIVE_INFINITY), u = [];
            return this.sc.kt([ e, r ], (function(t) {
                Wn(n.isEqual(t.key), "Should only iterate over a single key's batches");
                var e = i.cc(t.ls);
                Wn(null !== e, "Batches in the index must exist in the main table"), u.push(e);
            })), si.resolve(u);
        }, t.prototype.zh = function(t, n) {
            var i = this, e = new B(Kn);
            return n.forEach((function(t) {
                var n = new vi(t, 0), r = new vi(t, Number.POSITIVE_INFINITY);
                i.sc.kt([ n, r ], (function(n) {
                    Wn(t.isEqual(n.key), "For each key, should only iterate over a single key's batches"), 
                    e = e.add(n.ls);
                }));
            })), si.resolve(this.fc(e));
        }, t.prototype.Xh = function(t, n) {
            Wn(!n.Yn(), "CollectionGroup queries should be handled in LocalDocumentsView");
            // Use the query path as a prefix for testing if a document matches the
            // query.
            var i = n.path, e = i.length + 1, r = i;
            j.nt(r) || (r = r.child(""));
            var u = new vi(new j(r), 0), s = new B(Kn);
            // Find unique batchIDs referenced by all documents potentially matching the
            // query.
                    return this.sc.Nt((function(t) {
                var n = t.key.path;
                return !!i.G(n) && (
                // Rows with document keys more than one segment longer than the query
                // path can't be matches. For example, a query on 'rooms' can't match
                // the document /rooms/abc/messages/xyx.
                // TODO(mcg): we'll need a different scanner when we implement
                // ancestor queries.
                n.length === e && (s = s.add(t.ls)), !0);
            }), u), si.resolve(this.fc(s));
        }, t.prototype.fc = function(t) {
            var n = this, i = [];
            // Construct an array of matching batches, sorted by batchID to ensure that
            // multiple mutations affecting the same document key are applied in order.
                    return t.forEach((function(t) {
                var e = n.cc(t);
                null !== e && i.push(e);
            })), i;
        }, t.prototype.eo = function(t, n) {
            var i = this;
            // Find the position of the first batch for removal. This need not be the
            // first entry in the queue.
                    Wn(0 === this.hc(n.batchId, "removed"), "Can only remove the first entry of the mutation queue"), 
            this.Ps.shift();
            var e = this.sc;
            return si.forEach(n.mutations, (function(r) {
                var u = new vi(r.key, n.batchId);
                return e = e.delete(u), i.Cs.lc(t, r.key);
            })).next((function() {
                i.sc = e;
            }));
        }, t.prototype.Uo = function(t) {
            // No-op since the memory mutation queue does not maintain a separate cache.
        }, t.prototype.fs = function(t, n) {
            var i = new vi(n, 0), e = this.sc.Ot(i);
            return si.resolve(n.isEqual(e && e.key));
        }, t.prototype.to = function(t) {
            return 0 === this.Ps.length && Wn(this.sc.M(), "Document leak -- detected dangling mutation references when queue is empty."), 
            si.resolve();
        }, 
        /**
         * Finds the index of the given batchId in the mutation queue and asserts that
         * the resulting index is within the bounds of the queue.
         *
         * @param batchId The batchId to search for
         * @param action A description of what the caller is doing, phrased in passive
         * form (e.g. "acknowledged" in a routine that acknowledges batches).
         */
        t.prototype.hc = function(t, n) {
            var i = this.ac(t);
            return Wn(i >= 0 && i < this.Ps.length, "Batches must exist to be " + n), i;
        }, 
        /**
         * Finds the index of the given batchId in the mutation queue. This operation
         * is O(1).
         *
         * @return The computed index of the batch with the given batchId, based on
         * the state of the queue. Note this index can be negative if the requested
         * batchId has already been remvoed from the queue or past the end of the
         * queue if the batchId is larger than the last added batch.
         */
        t.prototype.ac = function(t) {
            return 0 === this.Ps.length ? 0 : t - this.Ps[0].batchId;
            // Examine the front of the queue to figure out the difference between the
            // batchId and indexes in the array. Note that since the queue is ordered
            // by batchId, if the first batch has a larger batchId then the requested
            // batchId doesn't exist in the queue.
            }, 
        /**
         * A version of lookupMutationBatch that doesn't return a promise, this makes
         * other functions that uses this code easier to read and more efficent.
         */
        t.prototype.cc = function(t) {
            var n = this.ac(t);
            if (n < 0 || n >= this.Ps.length) return null;
            var i = this.Ps[n];
            return Wn(i.batchId === t, "If found batch must match"), i;
        }, t;
    }();

    /**
     * Internal implementation of the collection-parent index exposed by MemoryIndexManager.
     * Also used for in-memory caching by IndexedDbIndexManager and initial index population
     * in indexeddb_schema.ts
     */ var Li = /** @class */ function() {
        /**
         * @param sizer Used to assess the size of a document. For eager GC, this is expected to just
         * return 0 to avoid unnecessarily doing the work of calculating the size.
         */
        function t(t, n) {
            this.Bh = t, this.dc = n, 
            /** Underlying cache of documents and their read times. */
            this.docs = new x(j.F), 
            /** Size of all cached documents. */
            this.size = 0;
        }
        /**
         * Adds the supplied entry to the cache and updates the cache size as appropriate.
         *
         * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()`.
         */    return t.prototype.ms = function(t, n, i) {
            Wn(!i.isEqual(k.MIN), "Cannot add a document with a read time of zero");
            var e = n.key, r = this.docs.get(e), u = r ? r.size : 0, s = this.dc(n);
            return this.docs = this.docs.ut(e, {
                vc: n,
                size: s,
                readTime: i
            }), this.size += s - u, this.Bh.rc(t, e.path.L());
        }, 
        /**
         * Removes the specified entry from the cache and updates the cache size as appropriate.
         *
         * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()`.
         */
        t.prototype.bs = function(t) {
            var n = this.docs.get(t);
            n && (this.docs = this.docs.remove(t), this.size -= n.size);
        }, t.prototype.gs = function(t, n) {
            var i = this.docs.get(n);
            return si.resolve(i ? i.vc : null);
        }, t.prototype.getEntries = function(t, n) {
            var i = this, e = cn();
            return n.forEach((function(t) {
                var n = i.docs.get(t);
                e = e.ut(t, n ? n.vc : null);
            })), si.resolve(e);
        }, t.prototype.Vo = function(t, n, i) {
            Wn(!n.Yn(), "CollectionGroup queries should be handled in LocalDocumentsView");
            for (var e = fn(), r = new j(n.path.child("")), u = this.docs.lt(r)
            // Documents are ordered by key, so we can use a prefix scan to narrow down
            // the documents we need to match the query against.
            ; u.gt(); ) {
                var s = u.bt(), o = s.key, h = s.value, c = h.vc, a = h.readTime;
                if (!n.path.G(o.path)) break;
                a.k(i) <= 0 || c instanceof xt && n.matches(c) && (e = e.ut(c.key, c));
            }
            return si.resolve(e);
        }, t.prototype.wc = function(t, n) {
            return si.forEach(this.docs, (function(t) {
                return n(t);
            }));
        }, t.prototype.Lo = function(t, n) {
            throw new Error("getNewDocumentChanges() is not supported with MemoryPersistence");
        }, t.prototype.qo = function(t) {
            return si.resolve(k.MIN);
        }, t.prototype.Xs = function(n) {
            // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps
            // a separate changelog and does not need special handling for removals.
            return new t.mc(this);
        }, t.prototype.pc = function(t) {
            return si.resolve(this.size);
        }, 
        /**
         * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.
         */
        t.mc = /** @class */ function(t) {
            function i(n) {
                var i = t.call(this) || this;
                return i.bc = n, i;
            }
            return tslib_es6.__extends(i, t), i.prototype.Is = function(t) {
                var n = this, i = [];
                return this.ds.forEach((function(e, r) {
                    r ? i.push(n.bc.ms(t, r, n.readTime)) : n.bc.bs(e);
                })), si.pu(i);
            }, i.prototype.ys = function(t, n) {
                return this.bc.gs(t, n);
            }, i.prototype._s = function(t, n) {
                return this.bc.getEntries(t, n);
            }, i;
        }(wi), t;
    }(), Mi = /** @class */ function() {
        /**
         * Instantiates a new TargetIdGenerator. If a seed is provided, the generator
         * will use the seed value as the next target ID.
         */
        function t(t, n) {
            this.gc = t, Wn((1 & t) === t, "Generator ID " + t + " contains more than 1 reserved bits"), 
            this.yc(void 0 !== n ? n : this.gc);
        }
        return t.prototype.next = function() {
            var t = this._c;
            return this._c += 2, t;
        }, 
        /**
         * Returns the ID that follows the given ID. Subsequent calls to `next()`
         * use the newly returned target ID as their base.
         */
        // PORTING NOTE: Multi-tab only.
        t.prototype.after = function(t) {
            return this.yc(t + 2), this.next();
        }, t.prototype.yc = function(t) {
            Wn((1 & t) === this.gc, "Cannot supply target ID from different generator ID"), 
            this._c = t;
        }, t.Ic = function() {
            return new t(0 /* QueryCache */ , 2);
        }, t.Tc = function() {
            // Sync engine assigns target IDs for limbo document detection.
            return new t(1 /* SyncEngine */);
        }, t;
    }(), qi = /** @class */ function() {
        function t(t) {
            this.persistence = t, 
            /**
             * Maps a target to the data about that target
             */
            this.Ec = new ti((function(t) {
                return t.canonicalId();
            })), 
            /** The last received snapshot version. */
            this.lastRemoteSnapshotVersion = k.MIN, 
            /** The highest numbered target ID encountered. */
            this.highestTargetId = 0, 
            /** The highest sequence number encountered. */
            this.Dc = 0, 
            /**
             * A ordered bidirectional mapping between documents and the remote target
             * IDs.
             */
            this.Rc = new di, this.targetCount = 0, this.Sc = Mi.Ic();
        }
        return t.prototype.$i = function(t, n) {
            return this.Ec.forEach((function(t, i) {
                return n(i);
            })), si.resolve();
        }, t.prototype.oo = function(t) {
            return si.resolve(this.lastRemoteSnapshotVersion);
        }, t.prototype.Ac = function(t) {
            return si.resolve(this.Dc);
        }, t.prototype.Ro = function(t) {
            var n = this.Sc.after(this.highestTargetId);
            return this.highestTargetId = n, si.resolve(n);
        }, t.prototype.wo = function(t, n, i) {
            return i && (this.lastRemoteSnapshotVersion = i), n > this.Dc && (this.Dc = n), 
            si.resolve();
        }, t.prototype.Cc = function(t) {
            this.Ec.set(t.target, t);
            var n = t.targetId;
            n > this.highestTargetId && (this.highestTargetId = n), t.sequenceNumber > this.Dc && (this.Dc = t.sequenceNumber);
        }, t.prototype.So = function(t, n) {
            return Wn(!this.Ec.has(n.target), "Adding a target that already exists"), this.Cc(n), 
            this.targetCount += 1, si.resolve();
        }, t.prototype.do = function(t, n) {
            return Wn(this.Ec.has(n.target), "Updating a non-existent target"), this.Cc(n), 
            si.resolve();
        }, t.prototype.Pc = function(t, n) {
            return Wn(this.targetCount > 0, "Removing a target from an empty cache"), Wn(this.Ec.has(n.target), "Removing a non-existent target from the cache"), 
            this.Ec.delete(n.target), this.Rc.hs(n.targetId), this.targetCount -= 1, si.resolve();
        }, t.prototype.Ju = function(t, n, i) {
            var e = this, r = 0, u = [];
            return this.Ec.forEach((function(s, o) {
                o.sequenceNumber <= n && null === i.get(o.targetId) && (e.Ec.delete(s), u.push(e.Vc(t, o.targetId)), 
                r++);
            })), si.pu(u).next((function() {
                return r;
            }));
        }, t.prototype.kc = function(t) {
            return si.resolve(this.targetCount);
        }, t.prototype.Do = function(t, n) {
            var i = this.Ec.get(n) || null;
            return si.resolve(i);
        }, t.prototype.ce = function(t, n) {
            // This method is only needed for multi-tab and we can't implement it
            // efficiently without additional data structures.
            return Gn("Not yet implemented.");
        }, t.prototype.ao = function(t, n, i) {
            this.Rc.rs(n, i);
            var e = this.persistence.Cs, r = [];
            return e && n.forEach((function(n) {
                r.push(e.es(t, n));
            })), si.pu(r);
        }, t.prototype.co = function(t, n, i) {
            this.Rc.os(n, i);
            var e = this.persistence.Cs, r = [];
            return e && n.forEach((function(n) {
                r.push(e.us(t, n));
            })), si.pu(r);
        }, t.prototype.Vc = function(t, n) {
            return this.Rc.hs(n), si.resolve();
        }, t.prototype.Po = function(t, n) {
            var i = this.Rc.as(n);
            return si.resolve(i);
        }, t.prototype.fs = function(t, n) {
            return si.resolve(this.Rc.fs(n));
        }, t;
    }(), Bi = "You are using the memory-only build of Firestore. Persistence support is only available via the @firebase/firestore bundle or the firebase-firestore.js build.", Qi = /** @class */ function() {
        /**
         * The constructor accepts a factory for creating a reference delegate. This
         * allows both the delegate and this instance to have strong references to
         * each other without having nullable fields that would then need to be
         * checked or asserted on every access.
         */
        function t(t, n) {
            var i = this;
            this.clientId = t, this.Nc = {}, this.Oc = new ii(0), this.Fc = !1, this.Fc = !0, 
            this.Cs = n(this), this.Os = new qi(this);
            this.Bh = new Ui, this.qh = new Li(this.Bh, (function(t) {
                return i.Cs.Uc(t);
            }));
        }
        return t.prototype.shutdown = function() {
            // No durable state to ensure is closed on shutdown.
            return this.Fc = !1, Promise.resolve();
        }, Object.defineProperty(t.prototype, "qu", {
            get: function() {
                return this.Fc;
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.Oo = function() {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                return tslib_es6.__generator(this, (function(t) {
                    return [ 2 /*return*/ , [ this.clientId ] ];
                }));
            }));
        }, t.prototype.jc = function(t) {
            // All clients using memory persistence act as primary.
            return t(!0);
        }, t.prototype.xc = function() {
            // No op.
        }, t.prototype.jo = function(t) {
            // No op.
        }, t.prototype.js = function() {
            return this.Bh;
        }, t.prototype.Vs = function(t) {
            var n = this.Nc[t.i()];
            return n || (n = new xi(this.Bh, this.Cs), this.Nc[t.i()] = n), n;
        }, t.prototype.Fs = function() {
            return this.Os;
        }, t.prototype.Ns = function() {
            return this.qh;
        }, t.prototype.runTransaction = function(t, n, i) {
            var e = this;
            qn("MemoryPersistence", "Starting transaction:", t);
            var r = new Gi(this.Oc.next());
            return this.Cs.Lc(), i(r).next((function(t) {
                return e.Cs.Mc(r).next((function() {
                    return t;
                }));
            })).wu().then((function(t) {
                return r.Mh(), t;
            }));
        }, t.prototype.qc = function(t, n) {
            return si.bu(Object.values(this.Nc).map((function(i) {
                return function() {
                    return i.fs(t, n);
                };
            })));
        }, t;
    }(), Gi = /** @class */ function(t) {
        function i(n) {
            var i = t.call(this) || this;
            return i.fo = n, i;
        }
        return tslib_es6.__extends(i, t), i;
    }(Ci), Wi = /** @class */ function() {
        function t(t) {
            this.persistence = t, this.Bc = null, this.Qc = null;
        }
        return Object.defineProperty(t.prototype, "Gc", {
            get: function() {
                if (this.Qc) return this.Qc;
                throw Gn("orphanedDocuments is only valid during a transaction.");
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.As = function(t) {
            this.Bc = t;
        }, t.prototype.es = function(t, n) {
            return this.Gc.delete(n), si.resolve();
        }, t.prototype.us = function(t, n) {
            return this.Gc.add(n), si.resolve();
        }, t.prototype.lc = function(t, n) {
            return this.Gc.add(n), si.resolve();
        }, t.prototype.removeTarget = function(t, n) {
            var i = this, e = this.persistence.Fs();
            return e.Po(t, n.targetId).next((function(t) {
                t.forEach((function(t) {
                    return i.Gc.add(t);
                }));
            })).next((function() {
                return e.Pc(t, n);
            }));
        }, t.prototype.Lc = function() {
            this.Qc = new Set;
        }, t.prototype.Mc = function(t) {
            var n = this, i = this.persistence.Ns().Xs();
            // Remove newly orphaned documents.
                    return si.forEach(this.Gc, (function(e) {
                return n.Wc(t, e).next((function(t) {
                    t || i.bs(e);
                }));
            })).next((function() {
                return n.Qc = null, i.apply(t);
            }));
        }, t.prototype.vo = function(t, n) {
            var i = this;
            return this.Wc(t, n).next((function(t) {
                t ? i.Gc.delete(n) : i.Gc.add(n);
            }));
        }, t.prototype.Uc = function(t) {
            // For eager GC, we don't care about the document size, there are no size thresholds.
            return 0;
        }, t.prototype.Wc = function(t, n) {
            var i = this;
            return si.bu([ function() {
                return i.persistence.Fs().fs(t, n);
            }, function() {
                return i.persistence.qc(t, n);
            }, function() {
                return si.resolve(i.Bc.fs(n));
            } ]);
        }, t;
    }(), zi = /** @class */ function() {
        function t() {}
        return t.prototype.initialize = function(t, n, i, e, r, u) {
            if (u.zc) throw new E(T.FAILED_PRECONDITION, Bi);
            return this.clientId = e, Promise.resolve();
        }, t.prototype.Kc = function() {
            var t = !1;
            return {
                qu: t,
                start: function() {
                    return t = !0;
                },
                stop: function() {
                    return t = !1;
                }
            };
        }, t.prototype.Jc = function() {
            return Wn(!!this.clientId, "initialize() not called"), new Qi(this.clientId, (function(t) {
                return new Wi(t);
            }));
        }, t.prototype.Hc = function() {
            return new Si;
        }, t.prototype.clearPersistence = function() {
            throw new E(T.FAILED_PRECONDITION, Bi);
        }, t;
    }(), Ki = /** @class */ function() {
        function t(
        /**
         * The AsyncQueue to run backoff operations on.
         */
        t, 
        /**
         * The ID to use when scheduling backoff operations on the AsyncQueue.
         */
        n, 
        /**
         * The initial delay (used as the base delay on the first retry attempt).
         * Note that jitter will still be applied, so the actual delay could be as
         * little as 0.5*initialDelayMs.
         */
        i, 
        /**
         * The multiplier to use to determine the extended base delay after each
         * attempt.
         */
        e, 
        /**
         * The maximum base delay after which no further backoff is performed.
         * Note that jitter will still be applied, so the actual delay could be as
         * much as 1.5*maxDelayMs.
         */
        r) {
            void 0 === i && (i = 1e3), void 0 === e && (e = 1.5), void 0 === r && (r = 6e4), 
            this.zo = t, this.Fr = n, this.Yc = i, this.Xc = e, this.$c = r, this.Zc = 0, this.ta = null, 
            /** The last backoff attempt, as epoch milliseconds. */
            this.na = Date.now(), this.reset();
        }
        /**
         * Resets the backoff delay.
         *
         * The very next backoffAndWait() will have no delay. If it is called again
         * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
         * subsequent ones will increase according to the backoffFactor.
         */    return t.prototype.reset = function() {
            this.Zc = 0;
        }, 
        /**
         * Resets the backoff delay to the maximum delay (e.g. for use after a
         * RESOURCE_EXHAUSTED error).
         */
        t.prototype.ia = function() {
            this.Zc = this.$c;
        }, 
        /**
         * Returns a promise that resolves after currentDelayMs, and increases the
         * delay for any subsequent attempts. If there was a pending backoff operation
         * already, it will be canceled.
         */
        t.prototype.ea = function(t) {
            var n = this;
            // Cancel any pending backoff operation.
                    this.cancel();
            // First schedule using the current base (which may be 0 and should be
            // honored as such).
            var i = Math.floor(this.Zc + this.ra()), e = Math.max(0, Date.now() - this.na), r = Math.max(0, i - e);
            // Guard against lastAttemptTime being in the future due to a clock change.
                    this.Zc > 0 && qn("ExponentialBackoff", "Backing off for " + r + " ms (base delay: " + this.Zc + " ms, delay with jitter: " + i + " ms, last attempt: " + e + " ms ago)"), 
            this.ta = this.zo.iu(this.Fr, r, (function() {
                return n.na = Date.now(), t();
            })), 
            // Apply backoff factor to determine next delay and ensure it is within
            // bounds.
            this.Zc *= this.Xc, this.Zc < this.Yc && (this.Zc = this.Yc), this.Zc > this.$c && (this.Zc = this.$c);
        }, t.prototype.cancel = function() {
            null !== this.ta && (this.ta.cancel(), this.ta = null);
        }, 
        /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */
        t.prototype.ra = function() {
            return (Math.random() - .5) * this.Zc;
        }, t;
    }(), Ji = /** @class */ function() {
        function t(t, n, i, e, r, u) {
            this.zo = t, this.ua = i, this.connection = e, this.sa = r, this.listener = u, this.state = 0 /* Initial */ , 
            /**
             * A close count that's incremented every time the stream is closed; used by
             * getCloseGuardedDispatcher() to invalidate callbacks that happen after
             * close.
             */
            this.oa = 0, this.ha = null, this.stream = null, this.ca = new Ki(t, n);
        }
        /**
         * Returns true if start() has been called and no error has occurred. True
         * indicates the stream is open or in the process of opening (which
         * encompasses respecting backoff, getting auth tokens, and starting the
         * actual RPC). Use isOpen() to determine if the stream is open and ready for
         * outbound requests.
         */    return t.prototype.aa = function() {
            return 1 /* Starting */ === this.state || 2 /* Open */ === this.state || 4 /* Backoff */ === this.state;
        }, 
        /**
         * Returns true if the underlying RPC is open (the onOpen() listener has been
         * called) and the stream is ready for outbound requests.
         */
        t.prototype.fa = function() {
            return 2 /* Open */ === this.state;
        }, 
        /**
         * Starts the RPC. Only allowed if isStarted() returns false. The stream is
         * not immediately ready for use: onOpen() will be invoked when the RPC is
         * ready for outbound requests, at which point isOpen() will return true.
         *
         * When start returns, isStarted() will return true.
         */
        t.prototype.start = function() {
            3 /* Error */ !== this.state ? (Wn(0 /* Initial */ === this.state, "Already started"), 
            this.auth()) : this.la();
        }, 
        /**
         * Stops the RPC. This call is idempotent and allowed regardless of the
         * current isStarted() state.
         *
         * When stop returns, isStarted() and isOpen() will both return false.
         */
        t.prototype.stop = function() {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                return tslib_es6.__generator(this, (function(t) {
                    switch (t.label) {
                      case 0:
                        return this.aa() ? [ 4 /*yield*/ , this.close(0 /* Initial */) ] : [ 3 /*break*/ , 2 ];

                      case 1:
                        t.sent(), t.label = 2;

                      case 2:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * After an error the stream will usually back off on the next attempt to
         * start it. If the error warrants an immediate restart of the stream, the
         * sender can use this to indicate that the receiver should not back off.
         *
         * Each error will call the onClose() listener. That function can decide to
         * inhibit backoff if required.
         */
        t.prototype.da = function() {
            Wn(!this.aa(), "Can only inhibit backoff in a stopped state"), this.state = 0 /* Initial */ , 
            this.ca.reset();
        }, 
        /**
         * Marks this stream as idle. If no further actions are performed on the
         * stream for one minute, the stream will automatically close itself and
         * notify the stream's onClose() handler with Status.OK. The stream will then
         * be in a !isStarted() state, requiring the caller to start the stream again
         * before further use.
         *
         * Only streams that are in state 'Open' can be marked idle, as all other
         * states imply pending network operations.
         */
        t.prototype.va = function() {
            var t = this;
            // Starts the idle time if we are in state 'Open' and are not yet already
            // running a timer (in which case the previous idle timeout still applies).
                    this.fa() && null === this.ha && (this.ha = this.zo.iu(this.ua, 6e4, (function() {
                return t.wa();
            })));
        }, 
        /** Sends a message to the underlying stream. */
        t.prototype.ma = function(t) {
            this.pa(), this.stream.send(t);
        }, 
        /** Called by the idle timer when the stream should close due to inactivity. */
        t.prototype.wa = function() {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                return tslib_es6.__generator(this, (function(t) {
                    return this.fa() ? [ 2 /*return*/ , this.close(0 /* Initial */) ] : [ 2 /*return*/ ];
                }));
            }));
        }, 
        /** Marks the stream as active again. */
        t.prototype.pa = function() {
            this.ha && (this.ha.cancel(), this.ha = null);
        }, 
        /**
         * Closes the stream and cleans up as necessary:
         *
         * * closes the underlying GRPC stream;
         * * calls the onClose handler with the given 'error';
         * * sets internal stream state to 'finalState';
         * * adjusts the backoff timer based on the error
         *
         * A new stream can be opened by calling start().
         *
         * @param finalState the intended state of the stream after closing.
         * @param error the error the connection was closed with.
         */
        t.prototype.close = function(t, n) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                return tslib_es6.__generator(this, (function(i) {
                    switch (i.label) {
                      case 0:
                        // Notify the listener that the stream closed.
                        return Wn(this.aa(), "Only started streams should be closed."), Wn(3 /* Error */ === t || J(n), "Can't provide an error when not in an error state."), 
                        // Cancel any outstanding timers (they're guaranteed not to execute).
                        this.pa(), this.ca.cancel(), 
                        // Invalidates any stream-related callbacks (e.g. from auth or the
                        // underlying stream), guaranteeing they won't execute.
                        this.oa++, 3 /* Error */ !== t ? 
                        // If this is an intentional close ensure we don't delay our next connection attempt.
                        this.ca.reset() : n && n.code === T.RESOURCE_EXHAUSTED ? (
                        // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
                        Bn(n.toString()), Bn("Using maximum backoff delay to prevent overloading the backend."), 
                        this.ca.ia()) : n && n.code === T.UNAUTHENTICATED && 
                        // "unauthenticated" error means the token was rejected. Try force refreshing it in case it
                        // just expired.
                        this.sa.l(), 
                        // Clean up the underlying stream because we are no longer interested in events.
                        null !== this.stream && (this.ba(), this.stream.close(), this.stream = null), 
                        // This state must be assigned before calling onClose() to allow the callback to
                        // inhibit backoff or otherwise manipulate the state in its non-started state.
                        this.state = t, [ 4 /*yield*/ , this.listener.ga(n) ];

                      case 1:
                        // Notify the listener that the stream closed.
                        return i.sent(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Can be overridden to perform additional cleanup before the stream is closed.
         * Calling super.tearDown() is not required.
         */
        t.prototype.ba = function() {}, t.prototype.auth = function() {
            var t = this;
            Wn(0 /* Initial */ === this.state, "Must be in initial state to auth"), this.state = 1 /* Starting */;
            var n = this.ya(this.oa), i = this.oa;
            // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.
                    this.sa.getToken().then((function(n) {
                // Stream can be stopped while waiting for authentication.
                // TODO(mikelehen): We really should just use dispatchIfNotClosed
                // and let this dispatch onto the queue, but that opened a spec test can
                // of worms that I don't want to deal with in this PR.
                t.oa === i && 
                // Normally we'd have to schedule the callback on the AsyncQueue.
                // However, the following calls are safe to be called outside the
                // AsyncQueue since they don't chain asynchronous calls
                t._a(n);
            }), (function(i) {
                n((function() {
                    var n = new E(T.UNKNOWN, "Fetching auth token failed: " + i.message);
                    return t.Ia(n);
                }));
            }));
        }, t.prototype._a = function(t) {
            var n = this;
            Wn(1 /* Starting */ === this.state, "Trying to start stream in a non-starting state");
            var i = this.ya(this.oa);
            this.stream = this.Ta(t), this.stream.Ea((function() {
                i((function() {
                    return Wn(1 /* Starting */ === n.state, "Expected stream to be in state Starting, but was " + n.state), 
                    n.state = 2 /* Open */ , n.listener.Ea();
                }));
            })), this.stream.ga((function(t) {
                i((function() {
                    return n.Ia(t);
                }));
            })), this.stream.onMessage((function(t) {
                i((function() {
                    return n.onMessage(t);
                }));
            }));
        }, t.prototype.la = function() {
            var t = this;
            Wn(3 /* Error */ === this.state, "Should only perform backoff when in Error state"), 
            this.state = 4 /* Backoff */ , this.ca.ea((function() {
                return tslib_es6.__awaiter(t, void 0, void 0, (function() {
                    return tslib_es6.__generator(this, (function(t) {
                        return Wn(4 /* Backoff */ === this.state, "Backoff elapsed but state is now: " + this.state), 
                        this.state = 0 /* Initial */ , this.start(), Wn(this.aa(), "PersistentStream should have started"), 
                        [ 2 /*return*/ ];
                    }));
                }));
            }));
        }, 
        // Visible for tests
        t.prototype.Ia = function(t) {
            // In theory the stream could close cleanly, however, in our current model
            // we never expect this to happen because if we stop a stream ourselves,
            // this callback will never be called. To prevent cases where we retry
            // without a backoff accidentally, we set the stream to error in all cases.
            return Wn(this.aa(), "Can't handle server close on non-started stream"), qn("PersistentStream", "close with error: " + t), 
            this.stream = null, this.close(3 /* Error */ , t);
        }, 
        /**
         * Returns a "dispatcher" function that dispatches operations onto the
         * AsyncQueue but only runs them if closeCount remains unchanged. This allows
         * us to turn auth / stream callbacks into no-ops if the stream is closed /
         * re-opened, etc.
         */
        t.prototype.ya = function(t) {
            var n = this;
            return function(i) {
                n.zo.Qr((function() {
                    return n.oa === t ? i() : (qn("PersistentStream", "stream callback skipped by getCloseGuardedDispatcher."), 
                    Promise.resolve());
                }));
            };
        }, t;
    }(), Hi = /** @class */ function(t) {
        function i(n, i, e, r, u) {
            var s = t.call(this, n, "listen_stream_connection_backoff" /* ListenStreamConnectionBackoff */ , "listen_stream_idle" /* ListenStreamIdle */ , i, e, u) || this;
            return s.serializer = r, s;
        }
        return tslib_es6.__extends(i, t), i.prototype.Ta = function(t) {
            return this.connection.Da("Listen", t);
        }, i.prototype.onMessage = function(t) {
            // A successful response means the stream is healthy
            this.ca.reset();
            var n = this.serializer.ke(t), i = this.serializer.Oe(t);
            return this.listener.Ra(n, i);
        }, 
        /**
         * Registers interest in the results of the given target. If the target
         * includes a resumeToken it will be included in the request. Results that
         * affect the target will be streamed back as WatchChange messages that
         * reference the targetId.
         */
        i.prototype.watch = function(t) {
            var n = {};
            n.database = this.serializer.De, n.addTarget = this.serializer.qn(t);
            var i = this.serializer.nr(t);
            i && (n.labels = i), this.ma(n);
        }, 
        /**
         * Unregisters interest in the results of the target associated with the
         * given targetId.
         */
        i.prototype.Sa = function(t) {
            var n = {};
            n.database = this.serializer.De, n.removeTarget = t, this.ma(n);
        }, i;
    }(Ji), Yi = /** @class */ function(t) {
        function i(n, i, e, r, u) {
            var s = t.call(this, n, "write_stream_connection_backoff" /* WriteStreamConnectionBackoff */ , "write_stream_idle" /* WriteStreamIdle */ , i, e, u) || this;
            return s.serializer = r, s.Aa = !1, 
            /**
             * The last received stream token from the server, used to acknowledge which
             * responses the client has processed. Stream tokens are opaque checkpoint
             * markers whose only real value is their inclusion in the next request.
             *
             * PersistentWriteStream manages propagating this value from responses to the
             * next request.
             */
            s.lastStreamToken = K.Mt, s;
        }
        return tslib_es6.__extends(i, t), Object.defineProperty(i.prototype, "Ca", {
            /**
             * Tracks whether or not a handshake has been successfully exchanged and
             * the stream is ready to accept mutations.
             */
            get: function() {
                return this.Aa;
            },
            enumerable: !0,
            configurable: !0
        }), 
        // Override of PersistentStream.start
        i.prototype.start = function() {
            this.Aa = !1, t.prototype.start.call(this);
        }, i.prototype.ba = function() {
            this.Aa && this.Pa([]);
        }, i.prototype.Ta = function(t) {
            return this.connection.Da("Write", t);
        }, i.prototype.onMessage = function(t) {
            if (
            // Always capture the last stream token.
            Wn(!!t.streamToken, "Got a write response without a stream token"), this.lastStreamToken = this.serializer.pe(t.streamToken), 
            this.Aa) {
                // A successful first write response means the stream is healthy,
                // Note, that we could consider a successful handshake healthy, however,
                // the write itself might be causing an error we want to back off from.
                this.ca.reset();
                var n = this.serializer.Ge(t.writeResults, t.commitTime), i = this.serializer.fromVersion(t.commitTime);
                return this.listener.Va(i, n);
            }
            // The first response is always the handshake response
            return Wn(!t.writeResults || 0 === t.writeResults.length, "Got mutation results for handshake"), 
            this.Aa = !0, this.listener.ka();
        }, 
        /**
         * Sends an initial streamToken to the server, performing the handshake
         * required to make the StreamingWrite RPC work. Subsequent
         * calls should wait until onHandshakeComplete was called.
         */
        i.prototype.Na = function() {
            Wn(this.fa(), "Writing handshake requires an opened stream"), Wn(!this.Aa, "Handshake already completed");
            // TODO(dimond): Support stream resumption. We intentionally do not set the
            // stream token on the handshake, ignoring any stream token we might have.
            var t = {};
            t.database = this.serializer.De, this.ma(t);
        }, 
        /** Sends a group of mutations to the Firestore backend to apply. */
        i.prototype.Pa = function(t) {
            var n = this;
            Wn(this.fa(), "Writing mutations requires an opened stream"), Wn(this.Aa, "Handshake must be complete before writing mutations"), 
            Wn(this.lastStreamToken.Lt() > 0, "Trying to write mutation without a token");
            var i = {
                streamToken: this.serializer.me(this.lastStreamToken),
                writes: t.map((function(t) {
                    return n.serializer.Fe(t);
                }))
            };
            this.ma(i);
        }, i;
    }(Ji), Xi = /** @class */ function() {
        function t(t, n, i, e) {
            this.zo = t, this.connection = n, this.credentials = i, this.serializer = e;
        }
        return t.prototype.Oa = function(t) {
            return new Yi(this.zo, this.connection, this.credentials, this.serializer, t);
        }, t.prototype.Fa = function(t) {
            return new Hi(this.zo, this.connection, this.credentials, this.serializer, t);
        }, t.prototype.commit = function(t) {
            var n = this, i = {
                database: this.serializer.De,
                writes: t.map((function(t) {
                    return n.serializer.Fe(t);
                }))
            };
            return this.Ua("Commit", i).then((function(t) {
                return n.serializer.Ge(t.writeResults, t.commitTime);
            }));
        }, t.prototype.lookup = function(t) {
            var n = this, i = {
                database: this.serializer.De,
                documents: t.map((function(t) {
                    return n.serializer._e(t);
                }))
            };
            return this.ja("BatchGetDocuments", i).then((function(i) {
                var e = hn();
                i.forEach((function(t) {
                    var i = n.serializer.Ve(t);
                    e = e.ut(i.key, i);
                }));
                var r = [];
                return t.forEach((function(t) {
                    var n = e.get(t);
                    Wn(!!n, "Missing entity in write response for " + t), r.push(n);
                })), r;
            }));
        }, 
        /** Gets an auth token and invokes the provided RPC. */
        t.prototype.Ua = function(t, n) {
            var i = this;
            return this.credentials.getToken().then((function(e) {
                return i.connection.Ua(t, n, e);
            })).catch((function(t) {
                throw t.code === T.UNAUTHENTICATED && i.credentials.l(), t;
            }));
        }, 
        /** Gets an auth token and invokes the provided RPC with streamed results. */
        t.prototype.ja = function(t, n) {
            var i = this;
            return this.credentials.getToken().then((function(e) {
                return i.connection.ja(t, n, e);
            })).catch((function(t) {
                throw t.code === T.UNAUTHENTICATED && i.credentials.l(), t;
            }));
        }, t;
    }();

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Validates that no arguments were passed in the invocation of functionName.
     *
     * Forward the magic "arguments" variable as second parameter on which the
     * parameter validation is performed:
     * validateNoArgs('myFunction', arguments);
     */
    function $i(t, n) {
        if (0 !== n.length) throw new E(T.INVALID_ARGUMENT, "Function " + t + "() does not support arguments, but was called with " + be(n.length, "argument") + ".");
    }

    /**
     * Validates the invocation of functionName has the exact number of arguments.
     *
     * Forward the magic "arguments" variable as second parameter on which the
     * parameter validation is performed:
     * validateExactNumberOfArgs('myFunction', arguments, 2);
     */ function Zi(t, n, i) {
        if (n.length !== i) throw new E(T.INVALID_ARGUMENT, "Function " + t + "() requires " + be(i, "argument") + ", but was called with " + be(n.length, "argument") + ".");
    }

    /**
     * Validates the invocation of functionName has at least the provided number of
     * arguments (but can have many more).
     *
     * Forward the magic "arguments" variable as second parameter on which the
     * parameter validation is performed:
     * validateAtLeastNumberOfArgs('myFunction', arguments, 2);
     */ function te(t, n, i) {
        if (n.length < i) throw new E(T.INVALID_ARGUMENT, "Function " + t + "() requires at least " + be(i, "argument") + ", but was called with " + be(n.length, "argument") + ".");
    }

    /**
     * Validates the invocation of functionName has number of arguments between
     * the values provided.
     *
     * Forward the magic "arguments" variable as second parameter on which the
     * parameter validation is performed:
     * validateBetweenNumberOfArgs('myFunction', arguments, 2, 3);
     */ function ne(t, n, i, e) {
        if (n.length < i || n.length > e) throw new E(T.INVALID_ARGUMENT, "Function " + t + "() requires between " + i + " and " + e + " arguments, but was called with " + be(n.length, "argument") + ".");
    }

    /**
     * Validates the provided argument is an array and has as least the expected
     * number of elements.
     */ function ie(t, n, i, e) {
        if (!(n instanceof Array) || n.length < e) throw new E(T.INVALID_ARGUMENT, "Function " + t + "() requires its " + i + " argument to be an array with at least " + be(e, "element") + ".");
    }

    /**
     * Validates the provided positional argument has the native JavaScript type
     * using typeof checks.
     */ function ee(t, n, i, e) {
        ae(t, n, pe(i) + " argument", e);
    }

    /**
     * Validates the provided argument has the native JavaScript type using
     * typeof checks or is undefined.
     */ function re(t, n, i, e) {
        void 0 !== e && ee(t, n, i, e);
    }

    /**
     * Validates the provided named option has the native JavaScript type using
     * typeof checks.
     */ function ue(t, n, i, e) {
        ae(t, n, i + " option", e);
    }

    /**
     * Validates the provided named option has the native JavaScript type using
     * typeof checks or is undefined.
     */ function se(t, n, i, e) {
        void 0 !== e && ue(t, n, i, e);
    }

    function oe(t, n, i, e, r) {
        void 0 !== e && function(t, n, i, e, r) {
            if (!(e instanceof Array)) throw new E(T.INVALID_ARGUMENT, "Function " + t + "() requires its " + n + " option to be an array, but it was: " + le(e));
            for (var u = 0; u < e.length; ++u) if (!r(e[u])) throw new E(T.INVALID_ARGUMENT, "Function " + t + "() requires all " + n + " elements to be " + i + ", but the value at index " + u + " was: " + le(e[u]));
        }(t, n, i, e, r);
    }

    /**
     * Validates that the provided named option equals one of the expected values.
     */
    /**
     * Validates that the provided named option equals one of the expected values or
     * is undefined.
     */
    function he(t, n, i, e, r) {
        void 0 !== e && function(t, n, i, e, r) {
            for (var u = [], s = 0, o = r; s < o.length; s++) {
                var h = o[s];
                if (h === e) return;
                u.push(le(h));
            }
            var c = le(e);
            throw new E(T.INVALID_ARGUMENT, "Invalid value " + c + " provided to function " + t + '() for option "' + i + '". Acceptable values: ' + u.join(", "));
        }(t, 0, i, e, r);
    }

    /**
     * Validates that the provided argument is a valid enum.
     *
     * @param functionName Function making the validation call.
     * @param enums Array containing all possible values for the enum.
     * @param position Position of the argument in `functionName`.
     * @param argument Arugment to validate.
     */ function ce(t, n, i, e) {
        if (!n.some((function(t) {
            return t === e;
        }))) throw new E(T.INVALID_ARGUMENT, "Invalid value " + le(e) + " provided to function " + t + "() for its " + pe(i) + " argument. Acceptable values: " + n.join(", "));
    }

    /** Helper to validate the type of a provided input. */ function ae(t, n, i, e) {
        if (!("object" === n ? fe(e) : "non-empty string" === n ? "string" == typeof e && "" !== e : typeof e === n)) {
            var r = le(e);
            throw new E(T.INVALID_ARGUMENT, "Function " + t + "() requires its " + i + " to be of type " + n + ", but it was: " + r);
        }
    }

    /**
     * Returns true if it's a non-null object without a custom prototype
     * (i.e. excludes Array, Date, etc.).
     */ function fe(t) {
        return "object" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));
    }

    /** Returns a string describing the type / value of the provided input. */ function le(t) {
        if (void 0 === t) return "undefined";
        if (null === t) return "null";
        if ("string" == typeof t) return t.length > 20 && (t = t.substring(0, 20) + "..."), 
        JSON.stringify(t);
        if ("number" == typeof t || "boolean" == typeof t) return "" + t;
        if ("object" == typeof t) {
            if (t instanceof Array) return "an array";
            var n = 
            /** Hacky method to try to get the constructor name for an object. */
            function(t) {
                if (t.constructor) {
                    var n = /function\s+([^\s(]+)\s*\(/.exec(t.constructor.toString());
                    if (n && n.length > 1) return n[1];
                }
                return null;
            }
            /** Validates the provided argument is defined. */ (t);
            return n ? "a custom " + n + " object" : "an object";
        }
        return "function" == typeof t ? "a function" : Gn("Unknown wrong type: " + typeof t);
    }

    function de(t, n, i) {
        if (void 0 === i) throw new E(T.INVALID_ARGUMENT, "Function " + t + "() requires a valid " + pe(n) + " argument, but it was undefined.");
    }

    /**
     * Validates the provided positional argument is an object, and its keys and
     * values match the expected keys and types provided in optionTypes.
     */ function ve(t, n, i) {
        W(n, (function(n, e) {
            if (i.indexOf(n) < 0) throw new E(T.INVALID_ARGUMENT, "Unknown option '" + n + "' passed to function " + t + "(). Available options: " + i.join(", "));
        }));
    }

    /**
     * Helper method to throw an error that the provided argument did not pass
     * an instanceof check.
     */ function we(t, n, i, e) {
        var r = le(e);
        return new E(T.INVALID_ARGUMENT, "Function " + t + "() requires its " + pe(i) + " argument to be a " + n + ", but it was: " + r);
    }

    function me(t, n, i) {
        if (i <= 0) throw new E(T.INVALID_ARGUMENT, 'Function "' + t + '()" requires its ' + pe(n) + " argument to be a positive number, but it was: " + i + ".");
    }

    /** Converts a number to its english word representation */ function pe(t) {
        switch (t) {
          case 1:
            return "first";

          case 2:
            return "second";

          case 3:
            return "third";

          default:
            return t + "th";
        }
    }

    /**
     * Formats the given word as plural conditionally given the preceding number.
     */ function be(t, n) {
        return t + " " + n + (1 === t ? "" : "s");
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Helper function to prevent instantiation through the constructor.
     *
     * This method creates a new constructor that throws when it's invoked.
     * The prototype of that constructor is then set to the prototype of the hidden
     * "class" to expose all the prototype methods and allow for instanceof
     * checks.
     *
     * To also make all the static methods available, all properties of the
     * original constructor are copied to the new constructor.
     */ function ge(t, n) {
        function i() {
            var t = "This constructor is private.";
            throw n && (t += " ", t += n), new E(T.INVALID_ARGUMENT, t);
        }
        // Make sure instanceof checks work and all methods are exposed on the public
        // constructor
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return i.prototype = t.prototype, 
        // Copy any static methods/members
        Object.assign(i, t), i;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Helper function to assert Uint8Array is available at runtime. */ function ye() {
        if ("undefined" == typeof Uint8Array) throw new E(T.UNIMPLEMENTED, "Uint8Arrays are not available in this environment.");
    }

    /** Helper function to assert Base64 functions are available at runtime. */ function _e() {
        if (!jn.xt().xa) throw new E(T.UNIMPLEMENTED, "Blobs are unavailable in Firestore in this environment.");
    }

    /**
     * Immutable class holding a blob (binary data).
     * This class is directly exposed in the public API.
     *
     * Note that while you can't hide the constructor in JavaScript code, we are
     * using the hack above to make sure no-one outside this module can call it.
     */ var Ie = /** @class */ function() {
        function t(t) {
            _e(), this.La = t;
        }
        return t.fromBase64String = function(n) {
            Zi("Blob.fromBase64String", arguments, 1), ee("Blob.fromBase64String", "string", 1, n), 
            _e();
            try {
                return new t(K.fromBase64String(n));
            } catch (t) {
                throw new E(T.INVALID_ARGUMENT, "Failed to construct Blob from Base64 string: " + t);
            }
        }, t.fromUint8Array = function(n) {
            if (Zi("Blob.fromUint8Array", arguments, 1), ye(), !(n instanceof Uint8Array)) throw we("Blob.fromUint8Array", "Uint8Array", 1, n);
            return new t(K.fromUint8Array(n));
        }, t.prototype.toBase64 = function() {
            return Zi("Blob.toBase64", arguments, 0), _e(), this.La.toBase64();
        }, t.prototype.toUint8Array = function() {
            return Zi("Blob.toUint8Array", arguments, 0), ye(), this.La.toUint8Array();
        }, t.prototype.toString = function() {
            return "Blob(base64: " + this.toBase64() + ")";
        }, t.prototype.isEqual = function(t) {
            return this.La.isEqual(t.La);
        }, t;
    }(), Te = ge(Ie, "Use Blob.fromUint8Array() or Blob.fromBase64String() instead."), Ee = /** @class */ function() {
        /**
         * Creates a FieldPath from the provided field names. If more than one field
         * name is provided, the path will point to a nested field in a document.
         *
         * @param fieldNames A list of field names.
         */
        function t() {
            for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
            ie("FieldPath", t, "fieldNames", 1);
            for (var i = 0; i < t.length; ++i) if (ee("FieldPath", "string", i, t[i]), 0 === t[i].length) throw new E(T.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
            this.Ma = new U(t);
        }
        return t.documentId = function() {
            return t.qa;
        }, t.prototype.isEqual = function(n) {
            if (!(n instanceof t)) throw we("isEqual", "FieldPath", 1, n);
            return this.Ma.isEqual(n.Ma);
        }, 
        /**
         * Internal Note: The backend doesn't technically support querying by
         * document ID. Instead it queries by the entire document name (full path
         * included), but in the cases we currently support documentId(), the net
         * effect is the same.
         */
        t.qa = new t(U.Z().J()), t;
    }(), De = new RegExp("[~\\*/\\[\\]]");

    // Public instance that disallows construction at runtime. This constructor is
    // used when exporting Blob on firebase.firestore.Blob and will be called Blob
    // publicly. Internally we still use Blob which has a type checked private
    // constructor. Note that Blob and PublicBlob can be used interchangeably in
    // instanceof checks.
    // For our internal TypeScript code PublicBlob doesn't exist as a type, and so
    // we need to use Blob as type and export it too.
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An opaque base class for FieldValue sentinel objects in our public API,
     * with public static methods for creating said sentinel objects.
     */
    var Re = /** @class */ function() {
        function t(t) {
            this.Ba = t;
        }
        return t.delete = function() {
            return $i("FieldValue.delete", arguments), Se.instance;
        }, t.serverTimestamp = function() {
            return $i("FieldValue.serverTimestamp", arguments), Ae.instance;
        }, t.arrayUnion = function() {
            for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
            // NOTE: We don't actually parse the data until it's used in set() or
            // update() since we need access to the Firestore instance.
            return te("FieldValue.arrayUnion", arguments, 1), new Ce(t);
        }, t.arrayRemove = function() {
            for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
            // NOTE: We don't actually parse the data until it's used in set() or
            // update() since we need access to the Firestore instance.
            return te("FieldValue.arrayRemove", arguments, 1), new Pe(t);
        }, t.increment = function(t) {
            return ee("FieldValue.increment", "number", 1, t), Zi("FieldValue.increment", arguments, 1), 
            new Ve(t);
        }, t.prototype.isEqual = function(t) {
            return this === t;
        }, t;
    }(), Se = /** @class */ function(t) {
        function i() {
            return t.call(this, "FieldValue.delete") || this;
        }
        /** Singleton instance. */    return tslib_es6.__extends(i, t), i.instance = new i, i;
    }(Re), Ae = /** @class */ function(t) {
        function i() {
            return t.call(this, "FieldValue.serverTimestamp") || this;
        }
        /** Singleton instance. */    return tslib_es6.__extends(i, t), i.instance = new i, i;
    }(Re), Ce = /** @class */ function(t) {
        function i(n) {
            var i = t.call(this, "FieldValue.arrayUnion") || this;
            return i.Qa = n, i;
        }
        return tslib_es6.__extends(i, t), i;
    }(Re), Pe = /** @class */ function(t) {
        function i(n) {
            var i = t.call(this, "FieldValue.arrayRemove") || this;
            return i.Qa = n, i;
        }
        return tslib_es6.__extends(i, t), i;
    }(Re), Ve = /** @class */ function(t) {
        function i(n) {
            var i = t.call(this, "FieldValue.increment") || this;
            return i.Ga = n, i;
        }
        return tslib_es6.__extends(i, t), i;
    }(Re), ke = ge(Re, "Use FieldValue.<field>() instead."), Ne = /** @class */ function() {
        function t(t, n) {
            if (Zi("GeoPoint", arguments, 2), ee("GeoPoint", "number", 1, t), ee("GeoPoint", "number", 2, n), 
            !isFinite(t) || t < -90 || t > 90) throw new E(T.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + t);
            if (!isFinite(n) || n < -180 || n > 180) throw new E(T.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + n);
            this.Wa = t, this.za = n;
        }
        return Object.defineProperty(t.prototype, "latitude", {
            /**
             * Returns the latitude of this geo point, a number between -90 and 90.
             */
            get: function() {
                return this.Wa;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(t.prototype, "longitude", {
            /**
             * Returns the longitude of this geo point, a number between -180 and 180.
             */
            get: function() {
                return this.za;
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.isEqual = function(t) {
            return this.Wa === t.Wa && this.za === t.za;
        }, 
        /**
         * Actually private to JS consumers of our API, so this function is prefixed
         * with an underscore.
         */
        t.prototype.A = function(t) {
            return Kn(this.Wa, t.Wa) || Kn(this.za, t.za);
        }, t;
    }(), Oe = /^__.*__$/, Fe = /** @class */ function() {
        function t(t, n, i) {
            this.data = t, this.en = n, this.fieldTransforms = i;
        }
        return t.prototype.Ka = function(t, n) {
            var i = [];
            return null !== this.en ? i.push(new Vt(t, this.data, this.en, n)) : i.push(new Pt(t, this.data, n)), 
            this.fieldTransforms.length > 0 && i.push(new kt(t, this.fieldTransforms)), i;
        }, t;
    }(), Ue = /** @class */ function() {
        function t(t, n, i) {
            this.data = t, this.en = n, this.fieldTransforms = i;
        }
        return t.prototype.Ka = function(t, n) {
            var i = [ new Vt(t, this.data, this.en, n) ];
            return this.fieldTransforms.length > 0 && i.push(new kt(t, this.fieldTransforms)), 
            i;
        }, t;
    }();

    function je(t) {
        switch (t) {
          case 0 /* Set */ :
     // fall through
                  case 2 /* MergeSet */ :
     // fall through
                  case 1 /* Update */ :
            return !0;

          case 3 /* Argument */ :
          case 4 /* ArrayArgument */ :
            return !1;

          default:
            throw Gn("Unexpected case for UserDataSource: " + t);
        }
    }

    /** A "context" object passed around while parsing user data. */ var xe = /** @class */ function() {
        /**
         * Initializes a ParseContext with the given source and path.
         *
         * @param dataSource Indicates what kind of API method this data came from.
         * @param methodName The name of the method the user called to create this
         *     ParseContext.
         * @param path A path within the object being parsed. This could be an empty
         *     path (in which case the context represents the root of the data being
         *     parsed), or a nonempty path (indicating the context represents a nested
         *     location within the data).
         * @param arrayElement Whether or not this context corresponds to an element
         *     of an array.
         * @param fieldTransforms A mutable list of field transforms encountered while
         *     parsing the data.
         * @param fieldMask A mutable list of field paths encountered while parsing
         *     the data.
         *
         * TODO(b/34871131): We don't support array paths right now, so path can be
         * null to indicate the context represents any location within an array (in
         * which case certain features will not work and errors will be somewhat
         * compromised).
         */
        function t(t, n, i, e, r, u) {
            this.Ja = t, this.methodName = n, this.path = i, this.Ha = e, 
            // Minor hack: If fieldTransforms is undefined, we assume this is an
            // external call and we need to validate the entire path.
            void 0 === r && this.Ya(), this.Ha = void 0 !== e && e, this.fieldTransforms = r || [], 
            this.en = u || [];
        }
        return t.prototype.Xa = function(n) {
            var i = null == this.path ? null : this.path.child(n), e = new t(this.Ja, this.methodName, i, 
            /*arrayElement=*/ !1, this.fieldTransforms, this.en);
            return e.$a(n), e;
        }, t.prototype.Za = function(n) {
            var i = null == this.path ? null : this.path.child(n), e = new t(this.Ja, this.methodName, i, 
            /*arrayElement=*/ !1, this.fieldTransforms, this.en);
            return e.Ya(), e;
        }, t.prototype.tf = function(n) {
            // TODO(b/34871131): We don't support array paths right now; so make path
            // null.
            return new t(this.Ja, this.methodName, 
            /*path=*/ null, 
            /*arrayElement=*/ !0, this.fieldTransforms, this.en);
        }, t.prototype.nf = function(t) {
            var n = null === this.path || this.path.M() ? "" : " (found in field " + this.path.toString() + ")";
            return new E(T.INVALID_ARGUMENT, "Function " + this.methodName + "() called with invalid data. " + t + n);
        }, 
        /** Returns 'true' if 'fieldPath' was traversed when creating this context. */
        t.prototype.contains = function(t) {
            return void 0 !== this.en.find((function(n) {
                return t.G(n);
            })) || void 0 !== this.fieldTransforms.find((function(n) {
                return t.G(n.field);
            }));
        }, t.prototype.Ya = function() {
            // TODO(b/34871131): Remove null check once we have proper paths for fields
            // within arrays.
            if (null !== this.path) for (var t = 0; t < this.path.length; t++) this.$a(this.path.get(t));
        }, t.prototype.$a = function(t) {
            if (0 === t.length) throw this.nf("Document fields must not be empty");
            if (je(this.Ja) && Oe.test(t)) throw this.nf('Document fields cannot begin and end with "__"');
        }, t;
    }(), Le = function(t, n) {
        this.ae = t, this.key = n;
    }, Me = /** @class */ function() {
        function t(t, n) {
            this.serializer = t, this.if = n;
        }
        /** Parse document data from a non-merge set() call. */    return t.prototype.ef = function(t, n) {
            var i = new xe(0 /* Set */ , t, U.Y);
            Be("Data must be an object, but it was:", i, n);
            var e = this.rf(n, i);
            return new Fe(new Ft(e), 
            /* fieldMask= */ null, i.fieldTransforms);
        }, 
        /** Parse document data from a set() call with '{merge:true}'. */
        t.prototype.uf = function(t, n, i) {
            var e = new xe(2 /* MergeSet */ , t, U.Y);
            Be("Data must be an object, but it was:", e, n);
            var r, u, s = this.rf(n, e);
            if (i) {
                for (var o = new B(U.F), h = 0, c = i; h < c.length; h++) {
                    var a = c[h], f = void 0;
                    if (a instanceof Ee) f = a.Ma; else {
                        if ("string" != typeof a) throw Gn("Expected stringOrFieldPath to be a string or a FieldPath");
                        f = Ge(t, a);
                    }
                    if (!e.contains(f)) throw new E(T.INVALID_ARGUMENT, "Field '" + f + "' is specified in your field mask but missing from your input data.");
                    o = o.add(f);
                }
                r = Dt.Kt(o), u = e.fieldTransforms.filter((function(t) {
                    return r.Ht(t.field);
                }));
            } else r = Dt.Jt(e.en), u = e.fieldTransforms;
            return new Fe(new Ft(s), r, u);
        }, 
        /** Parse update data from an update() call. */
        t.prototype.sf = function(t, n) {
            var i = this, e = new xe(1 /* Update */ , t, U.Y);
            Be("Data must be an object, but it was:", e, n);
            var r = new B(U.F), u = Ft.ln();
            W(n, (function(n, s) {
                var o = Ge(t, n), h = e.Za(o);
                if ((s = i.hf(s, h)) instanceof Se) 
                // Add it to the field mask, but don't add anything to updateData.
                r = r.add(o); else {
                    var c = i.cf(s, h);
                    null != c && (r = r.add(o), u.set(o, c));
                }
            }));
            var s = Dt.Kt(r);
            return new Ue(u.on(), s, e.fieldTransforms);
        }, 
        /** Parse update data from a list of field/value arguments. */
        t.prototype.af = function(t, n, i, e) {
            var r = new xe(1 /* Update */ , t, U.Y), u = [ Qe(t, n) ], s = [ i ];
            if (e.length % 2 != 0) throw new E(T.INVALID_ARGUMENT, "Function " + t + "() needs to be called with an even number of arguments that alternate between field names and values.");
            for (var o = 0; o < e.length; o += 2) u.push(Qe(t, e[o])), s.push(e[o + 1]);
            var h = new B(U.F), c = Ft.ln();
            for (o = 0; o < u.length; ++o) {
                var a = u[o], f = r.Za(a), l = this.hf(s[o], f);
                if (l instanceof Se) 
                // Add it to the field mask, but don't add anything to updateData.
                h = h.add(a); else {
                    var d = this.cf(l, f);
                    null != d && (h = h.add(a), c.set(a, d));
                }
            }
            var v = Dt.Kt(h);
            return new Ue(c.on(), v, r.fieldTransforms);
        }, 
        /**
         * Parse a "query value" (e.g. value in a where filter or a value in a cursor
         * bound).
         *
         * @param allowArrays Whether the query value is an array that may directly
         * contain additional arrays (e.g. the operand of an `in` query).
         */
        t.prototype.ff = function(t, n, i) {
            void 0 === i && (i = !1);
            var e = new xe(i ? 4 /* ArrayArgument */ : 3 /* Argument */ , t, U.Y), r = this.cf(n, e);
            return Wn(null != r, "Parsed data should not be null."), Wn(0 === e.fieldTransforms.length, "Field transforms should have been disallowed."), 
            r;
        }, 
        /** Sends data through this.preConverter, handling any thrown errors. */
        t.prototype.hf = function(t, n) {
            try {
                return this.if(t);
            } catch (t) {
                var i = We(t);
                throw n.nf(i);
            }
        }, 
        /**
         * Internal helper for parsing user data.
         *
         * @param input Data to be parsed.
         * @param context A context object representing the current path being parsed,
         * the source of the data being parsed, etc.
         * @return The parsed value, or null if the value was a FieldValue sentinel
         * that should not be included in the resulting parsed data.
         */
        t.prototype.cf = function(t, n) {
            if (qe(t = this.hf(t, n))) return Be("Unsupported field value:", n, t), this.rf(t, n);
            if (t instanceof Re) 
            // FieldValues usually parse into transforms (except FieldValue.delete())
            // in which case we do not want to include this field in our parsed data
            // (as doing so will overwrite the field directly prior to the transform
            // trying to transform it). So we don't add this location to
            // context.fieldMask and we return null as our parsing result.
            return this.lf(t, n), null;
            if (
            // If context.path is null we are inside an array and we don't support
            // field mask paths more granular than the top-level array.
            n.path && n.en.push(n.path), t instanceof Array) {
                // TODO(b/34871131): Include the path containing the array in the error
                // message.
                // In the case of IN queries, the parsed data is an array (representing
                // the set of values to be included for the IN query) that may directly
                // contain additional arrays (each representing an individual field
                // value), so we disable this validation.
                if (n.Ha && 4 /* ArrayArgument */ !== n.Ja) throw n.nf("Nested arrays are not supported");
                return this.df(t, n);
            }
            return this.vf(t, n);
        }, t.prototype.rf = function(t, n) {
            var i = this, e = {};
            return z(t) ? 
            // If we encounter an empty object, we explicitly add it to the update
            // mask to ensure that the server creates a map entry.
            n.path && n.path.length > 0 && n.en.push(n.path) : W(t, (function(t, r) {
                var u = i.cf(r, n.Xa(t));
                null != u && (e[t] = u);
            })), {
                mapValue: {
                    fields: e
                }
            };
        }, t.prototype.df = function(t, n) {
            for (var i = [], e = 0, r = 0, u = t; r < u.length; r++) {
                var s = u[r], o = this.cf(s, n.tf(e));
                null == o && (
                // Just include nulls in the array for fields being replaced with a
                // sentinel.
                o = {
                    nullValue: "NULL_VALUE"
                }), i.push(o), e++;
            }
            return {
                arrayValue: {
                    values: i
                }
            };
        }, 
        /**
         * "Parses" the provided FieldValueImpl, adding any necessary transforms to
         * context.fieldTransforms.
         */
        t.prototype.lf = function(t, n) {
            // Sentinels are only supported with writes, and not within arrays.
            if (!je(n.Ja)) throw n.nf(t.Ba + "() can only be used with update() and set()");
            if (null === n.path) throw n.nf(t.Ba + "() is not currently supported inside arrays");
            if (t instanceof Se) {
                if (2 /* MergeSet */ !== n.Ja) throw 1 /* Update */ === n.Ja ? (Wn(n.path.length > 0, "FieldValue.delete() at the top level should have already been handled."), 
                n.nf("FieldValue.delete() can only appear at the top level of your update data")) : n.nf("FieldValue.delete() cannot be used with set() unless you pass {merge:true}");
                // No transform to add for a delete, but we need to add it to our
                // fieldMask so it gets deleted.
                n.en.push(n.path);
            } else if (t instanceof Ae) n.fieldTransforms.push(new Rt(n.path, bt.instance)); else if (t instanceof Ce) {
                var i = this.wf(t.Ba, t.Qa), e = new gt(i);
                n.fieldTransforms.push(new Rt(n.path, e));
            } else if (t instanceof Pe) {
                i = this.wf(t.Ba, t.Qa);
                var r = new yt(i);
                n.fieldTransforms.push(new Rt(n.path, r));
            } else if (t instanceof Ve) {
                var u = this.ff("FieldValue.increment", t.Ga), s = new _t(this.serializer, u);
                n.fieldTransforms.push(new Rt(n.path, s));
            } else Gn("Unknown FieldValue type: " + t);
        }, 
        /**
         * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)
         *
         * @return The parsed value
         */
        t.prototype.vf = function(t, n) {
            if (null === t) return {
                nullValue: "NULL_VALUE"
            };
            if ("number" == typeof t) return this.serializer.we(t);
            if ("boolean" == typeof t) return {
                booleanValue: t
            };
            if ("string" == typeof t) return {
                stringValue: t
            };
            if (t instanceof Date) {
                var i = V.fromDate(t);
                return {
                    timestampValue: this.serializer.O(i)
                };
            }
            if (t instanceof V) {
                // Firestore backend truncates precision down to microseconds. To ensure
                // offline mode works the same with regards to truncation, perform the
                // truncation immediately without waiting for the backend to do that.
                i = new V(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));
                return {
                    timestampValue: this.serializer.O(i)
                };
            }
            if (t instanceof Ne) return {
                geoPointValue: {
                    latitude: t.latitude,
                    longitude: t.longitude
                }
            };
            if (t instanceof Ie) return {
                bytesValue: this.serializer.me(t)
            };
            if (t instanceof Le) return {
                referenceValue: this.serializer.be(t.key.path, t.ae)
            };
            throw n.nf("Unsupported field value: " + le(t));
        }, t.prototype.wf = function(t, n) {
            var i = this;
            return n.map((function(n, e) {
                // Although array transforms are used with writes, the actual elements
                // being unioned or removed are not considered writes since they cannot
                // contain any FieldValue sentinels, etc.
                var r = new xe(3 /* Argument */ , t, U.Y);
                return i.cf(n, r.tf(e));
            }));
        }, t;
    }();

    /**
     * A placeholder object for DocumentReferences in this file, in order to
     * avoid a circular dependency. See the comments for `DataPreConverter` for
     * the full context.
     */
    /**
     * Checks whether an object looks like a JSON object that should be converted
     * into a struct. Normal class/prototype instances are considered to look like
     * JSON objects since they should be converted to a struct value. Arrays, Dates,
     * GeoPoints, etc. are not considered to look like JSON objects since they map
     * to specific FieldValue types other than ObjectValue.
     */
    function qe(t) {
        return !("object" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof V || t instanceof Ne || t instanceof Ie || t instanceof Le || t instanceof Re);
    }

    function Be(t, n, i) {
        if (!qe(i) || !fe(i)) {
            var e = le(i);
            throw "an object" === e ? n.nf(t + " a custom object") : n.nf(t + " " + e);
        }
    }

    /**
     * Helper that calls fromDotSeparatedString() but wraps any error thrown.
     */ function Qe(t, n) {
        if (n instanceof Ee) return n.Ma;
        if ("string" == typeof n) return Ge(t, n);
        throw new E(T.INVALID_ARGUMENT, "Function " + t + "() called with invalid data. Field path arguments must be of type string or FieldPath.");
    }

    /**
     * Wraps fromDotSeparatedString with an error message about the method that
     * was thrown.
     * @param methodName The publicly visible method name
     * @param path The dot-separated string form of a field path which will be split
     * on dots.
     */ function Ge(t, n) {
        try {
            /**
     * Parses a field path string into a FieldPath, treating dots as separators.
     */
            return function(t) {
                if (t.search(De) >= 0) throw new E(T.INVALID_ARGUMENT, "Invalid field path (" + t + "). Paths must not contain '~', '*', '/', '[', or ']'");
                try {
                    return new (Ee.bind.apply(Ee, tslib_es6.__spreadArrays([ void 0 ], t.split("."))));
                } catch (n) {
                    throw new E(T.INVALID_ARGUMENT, "Invalid field path (" + t + "). Paths must not be empty, begin with '.', end with '.', or contain '..'");
                }
            }(n).Ma;
        } catch (n) {
            var i = We(n);
            throw new E(T.INVALID_ARGUMENT, "Function " + t + "() called with invalid data. " + i);
        }
    }

    /**
     * Extracts the message from a caught exception, which should be an Error object
     * though JS doesn't guarantee that.
     */ function We(t) {
        return t instanceof Error ? t.message : t.toString();
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Internal transaction object responsible for accumulating the mutations to
     * perform and the base versions for any documents read.
     */ var ze = /** @class */ function() {
        function t(t) {
            this.mf = t, 
            // The version of each document that was read during this transaction.
            this.pf = dn(), this.mutations = [], this.bf = !1, 
            /**
             * A deferred usage error that occurred previously in this transaction that
             * will cause the transaction to fail once it actually commits.
             */
            this.gf = null, 
            /**
             * Set of documents that have been written in the transaction.
             *
             * When there's more than one write to the same key in a transaction, any
             * writes after the first are handled differently.
             */
            this.yf = new Set;
        }
        return t.prototype.lookup = function(t) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var n, i = this;
                return tslib_es6.__generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        if (this._f(), this.mutations.length > 0) throw new E(T.INVALID_ARGUMENT, "Firestore transactions require all reads to be executed before all writes.");
                        return [ 4 /*yield*/ , this.mf.lookup(t) ];

                      case 1:
                        return (n = e.sent()).forEach((function(t) {
                            t instanceof Lt || t instanceof xt ? i.If(t) : Gn("Document in a transaction was a " + t.constructor.name);
                        })), [ 2 /*return*/ , n ];
                    }
                }));
            }));
        }, t.prototype.set = function(t, n) {
            this.write(n.Ka(t, this.tn(t))), this.yf.add(t);
        }, t.prototype.update = function(t, n) {
            try {
                this.write(n.Ka(t, this.Tf(t)));
            } catch (t) {
                this.gf = t;
            }
            this.yf.add(t);
        }, t.prototype.delete = function(t) {
            this.write([ new Nt(t, this.tn(t)) ]), this.yf.add(t);
        }, t.prototype.commit = function() {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var t, n = this;
                return tslib_es6.__generator(this, (function(i) {
                    switch (i.label) {
                      case 0:
                        if (this._f(), this.gf) throw this.gf;
                        return t = this.pf, 
                        // For each mutation, note that the doc was written.
                        this.mutations.forEach((function(n) {
                            t = t.remove(n.key);
                        })), 
                        // For each document that was read but not written to, we want to perform
                        // a `verify` operation.
                        t.forEach((function(t, i) {
                            n.mutations.push(new Ot(t, n.tn(t)));
                        })), [ 4 /*yield*/ , this.mf.commit(this.mutations) ];

                      case 1:
                        return i.sent(), this.bf = !0, [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.If = function(t) {
            var n;
            if (t instanceof xt) n = t.version; else {
                if (!(t instanceof Lt)) throw Gn("Document in a transaction was a " + t.constructor.name);
                // For deleted docs, we must use baseVersion 0 when we overwrite them.
                n = k.V();
            }
            var i = this.pf.get(t.key);
            if (null !== i) {
                if (!n.isEqual(i)) 
                // This transaction will fail no matter what.
                throw new E(T.ABORTED, "Document version changed between two reads.");
            } else this.pf = this.pf.ut(t.key, n);
        }, 
        /**
         * Returns the version of this document when it was read in this transaction,
         * as a precondition, or no precondition if it was not read.
         */
        t.prototype.tn = function(t) {
            var n = this.pf.get(t);
            return !this.yf.has(t) && n ? At.updateTime(n) : At.NONE;
        }, 
        /**
         * Returns the precondition for a document if the operation is an update.
         */
        t.prototype.Tf = function(t) {
            var n = this.pf.get(t);
            // The first time a document is written, we want to take into account the
            // read time and existence
                    if (!this.yf.has(t) && n) {
                if (n.isEqual(k.V())) 
                // The document doesn't exist, so fail the transaction.
                // This has to be validated locally because you can't send a
                // precondition that a document does not exist without changing the
                // semantics of the backend write to be an insert. This is the reverse
                // of what we want, since we want to assert that the document doesn't
                // exist but then send the update and have it fail. Since we can't
                // express that to the backend, we have to validate locally.
                // Note: this can change once we can send separate verify writes in the
                // transaction.
                throw new E(T.INVALID_ARGUMENT, "Can't update a document that doesn't exist.");
                // Document exists, base precondition on document update time.
                            return At.updateTime(n);
            }
            // Document was not read, so we just use the preconditions for a blind
            // update.
            return At.exists(!0);
        }, t.prototype.write = function(t) {
            this._f(), this.mutations = this.mutations.concat(t);
        }, t.prototype._f = function() {
            Wn(!this.bf, "A transaction object cannot be used after its update callback has been invoked.");
        }, t;
    }(), Ke = /** @class */ function() {
        function t(t, n) {
            this.Or = t, this.Ho = n, 
            /** The current OnlineState. */
            this.state = "Unknown" /* Unknown */ , 
            /**
             * A count of consecutive failures to open the stream. If it reaches the
             * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
             * Offline.
             */
            this.Ef = 0, 
            /**
             * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
             * transition from OnlineState.Unknown to OnlineState.Offline without waiting
             * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
             */
            this.Df = null, 
            /**
             * Whether the client should log a warning message if it fails to connect to
             * the backend (initially true, cleared after a successful stream, or if we've
             * logged the message already).
             */
            this.Rf = !0;
        }
        /**
         * Called by RemoteStore when a watch stream is started (including on each
         * backoff attempt).
         *
         * If this is the first attempt, it sets the OnlineState to Unknown and starts
         * the onlineStateTimer.
         */    return t.prototype.Sf = function() {
            var t = this;
            0 === this.Ef && (this.Af("Unknown" /* Unknown */), Wn(null === this.Df, "onlineStateTimer shouldn't be started yet"), 
            this.Df = this.Or.iu("online_state_timeout" /* OnlineStateTimeout */ , 1e4, (function() {
                // NOTE: handleWatchStreamFailure() will continue to increment
                // watchStreamFailures even though we are already marked Offline,
                // but this is non-harmful.
                return t.Df = null, Wn("Unknown" /* Unknown */ === t.state, "Timer should be canceled if we transitioned to a different state."), 
                t.Cf("Backend didn't respond within 10 seconds."), t.Af("Offline" /* Offline */), 
                Promise.resolve();
            })));
        }, 
        /**
         * Updates our OnlineState as appropriate after the watch stream reports a
         * failure. The first failure moves us to the 'Unknown' state. We then may
         * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
         * actually transition to the 'Offline' state.
         */
        t.prototype.Pf = function(t) {
            "Online" /* Online */ === this.state ? (this.Af("Unknown" /* Unknown */), 
            // To get to OnlineState.Online, set() must have been called which would
            // have reset our heuristics.
            Wn(0 === this.Ef, "watchStreamFailures must be 0"), Wn(null === this.Df, "onlineStateTimer must be null")) : (this.Ef++, 
            this.Ef >= 1 && (this.Vf(), this.Cf("Connection failed 1 times. Most recent error: " + t.toString()), 
            this.Af("Offline" /* Offline */)));
        }, 
        /**
         * Explicitly sets the OnlineState to the specified state.
         *
         * Note that this resets our timers / failure counters, etc. used by our
         * Offline heuristics, so must not be used in place of
         * handleWatchStreamStart() and handleWatchStreamFailure().
         */
        t.prototype.set = function(t) {
            this.Vf(), this.Ef = 0, "Online" /* Online */ === t && (
            // We've connected to watch at least once. Don't warn the developer
            // about being offline going forward.
            this.Rf = !1), this.Af(t);
        }, t.prototype.Af = function(t) {
            t !== this.state && (this.state = t, this.Ho(t));
        }, t.prototype.Cf = function(t) {
            var n = "Could not reach Cloud Firestore backend. " + t + "\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.";
            this.Rf ? (Bn(n), this.Rf = !1) : qn("OnlineStateTracker", n);
        }, t.prototype.Vf = function() {
            null !== this.Df && (this.Df.cancel(), this.Df = null);
        }, t;
    }(), Je = /** @class */ function() {
        function t(
        /**
         * The local store, used to fill the write pipeline with outbound mutations.
         */
        t, 
        /** The client-side proxy for interacting with the backend. */
        n, i, e, s) {
            var o = this;
            this.kf = t, this.mf = n, 
            /**
             * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
             * LocalStore via fillWritePipeline() and have or will send to the write
             * stream.
             *
             * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
             * restart the write stream. When the stream is established the writes in the
             * pipeline will be sent in order.
             *
             * Writes remain in writePipeline until they are acknowledged by the backend
             * and thus will automatically be re-sent if the stream is interrupted /
             * restarted before they're acknowledged.
             *
             * Write responses from the backend are linked to their originating request
             * purely based on order, and so we can just shift() writes from the front of
             * the writePipeline as we receive responses.
             */
            this.Nf = [], 
            /**
             * A mapping of watched targets that the client cares about tracking and the
             * user has explicitly called a 'listen' for this target.
             *
             * These targets may or may not have been sent to or acknowledged by the
             * server. On re-establishing the listen stream, these targets should be sent
             * to the server. The targets removed with unlistens are removed eagerly
             * without waiting for confirmation from the listen stream.
             */
            this.Of = new Map, this.Ff = null, 
            /**
             * Set to true by enableNetwork() and false by disableNetwork() and indicates
             * the user-preferred network state.
             */
            this.networkEnabled = !1, this.isPrimary = !1, this.Uf = s, this.Uf.jf((function(t) {
                i.Qr((function() {
                    return tslib_es6.__awaiter(o, void 0, void 0, (function() {
                        return tslib_es6.__generator(this, (function(t) {
                            switch (t.label) {
                              case 0:
                                return this.xf() ? (qn("RemoteStore", "Restarting streams for network reachability change."), 
                                [ 4 /*yield*/ , this.Lf() ]) : [ 3 /*break*/ , 2 ];

                              case 1:
                                t.sent(), t.label = 2;

                              case 2:
                                return [ 2 /*return*/ ];
                            }
                        }));
                    }));
                }));
            })), this.Mf = new Ke(i, e), 
            // Create streams (but note they're not started yet).
            this.qf = this.mf.Fa({
                Ea: this.Bf.bind(this),
                ga: this.Qf.bind(this),
                Ra: this.Gf.bind(this)
            }), this.Wf = this.mf.Oa({
                Ea: this.zf.bind(this),
                ga: this.Kf.bind(this),
                ka: this.Jf.bind(this),
                Va: this.Va.bind(this)
            });
        }
        /**
         * Starts up the remote store, creating streams, restoring state from
         * LocalStore, etc.
         */    return t.prototype.start = function() {
            return this.enableNetwork();
        }, 
        /** Re-enables the network. Idempotent. */
        t.prototype.enableNetwork = function() {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var t;
                return tslib_es6.__generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        return this.networkEnabled = !0, this.xf() ? (t = this.Wf, [ 4 /*yield*/ , this.kf.uo() ]) : [ 3 /*break*/ , 3 ];

                      case 1:
                        // This will start the write stream if necessary.
                        return t.lastStreamToken = n.sent(), this.Hf() ? this.Yf() : this.Mf.set("Unknown" /* Unknown */), 
                        [ 4 /*yield*/ , this.Xf() ];

                      case 2:
                        // This will start the write stream if necessary.
                        n.sent(), n.label = 3;

                      case 3:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Temporarily disables the network. The network can be re-enabled using
         * enableNetwork().
         */
        t.prototype.disableNetwork = function() {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                return tslib_es6.__generator(this, (function(t) {
                    switch (t.label) {
                      case 0:
                        return this.networkEnabled = !1, [ 4 /*yield*/ , this.$f() ];

                      case 1:
                        return t.sent(), 
                        // Set the OnlineState to Offline so get()s return from cache, etc.
                        this.Mf.set("Offline" /* Offline */), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.$f = function() {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                return tslib_es6.__generator(this, (function(t) {
                    switch (t.label) {
                      case 0:
                        return [ 4 /*yield*/ , this.Wf.stop() ];

                      case 1:
                        return t.sent(), [ 4 /*yield*/ , this.qf.stop() ];

                      case 2:
                        return t.sent(), this.Nf.length > 0 && (qn("RemoteStore", "Stopping write stream with " + this.Nf.length + " pending writes"), 
                        this.Nf = []), this.Zf(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.shutdown = function() {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                return tslib_es6.__generator(this, (function(t) {
                    switch (t.label) {
                      case 0:
                        return qn("RemoteStore", "RemoteStore shutting down."), this.networkEnabled = !1, 
                        [ 4 /*yield*/ , this.$f() ];

                      case 1:
                        return t.sent(), this.Uf.shutdown(), 
                        // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
                        // triggering spurious listener events with cached data, etc.
                        this.Mf.set("Unknown" /* Unknown */), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Starts new listen for the given target. Uses resume token if provided. It
         * is a no-op if the target of given `TargetData` is already being listened to.
         */
        t.prototype.listen = function(t) {
            this.Of.has(t.targetId) || (
            // Mark this as something the client is currently listening for.
            this.Of.set(t.targetId, t), this.Hf() ? 
            // The listen will be sent in onWatchStreamOpen
            this.Yf() : this.qf.fa() && this.tl(t));
        }, 
        /**
         * Removes the listen from server. It is a no-op if the given target id is
         * not being listened to.
         */
        t.prototype.nl = function(t) {
            Wn(this.Of.has(t), "unlisten called on target no currently watched: " + t), this.Of.delete(t), 
            this.qf.fa() && this.il(t), 0 === this.Of.size && (this.qf.fa() ? this.qf.va() : this.xf() && 
            // Revert to OnlineState.Unknown if the watch stream is not open and we
            // have no listeners, since without any listens to send we cannot
            // confirm if the stream is healthy and upgrade to OnlineState.Online.
            this.Mf.set("Unknown" /* Unknown */));
        }, 
        /** {@link TargetMetadataProvider.getTargetDataForTarget} */
        t.prototype.ce = function(t) {
            return this.Of.get(t) || null;
        }, 
        /** {@link TargetMetadataProvider.getRemoteKeysForTarget} */
        t.prototype.he = function(t) {
            return this.Jo.he(t);
        }, 
        /**
         * We need to increment the the expected number of pending responses we're due
         * from watch so we wait for the ack to process any messages from this target.
         */
        t.prototype.tl = function(t) {
            this.Ff.Mi(t.targetId), this.qf.watch(t);
        }, 
        /**
         * We need to increment the expected number of pending responses we're due
         * from watch so we wait for the removal on the server before we process any
         * messages from this target.
         */
        t.prototype.il = function(t) {
            this.Ff.Mi(t), this.qf.Sa(t);
        }, t.prototype.Yf = function() {
            Wn(this.Hf(), "startWatchStream() called when shouldStartWatchStream() is false."), 
            this.Ff = new Sn(this), this.qf.start(), this.Mf.Sf();
        }, 
        /**
         * Returns whether the watch stream should be started because it's necessary
         * and has not yet been started.
         */
        t.prototype.Hf = function() {
            return this.xf() && !this.qf.aa() && this.Of.size > 0;
        }, t.prototype.xf = function() {
            return this.isPrimary && this.networkEnabled;
        }, t.prototype.Zf = function() {
            this.Ff = null;
        }, t.prototype.Bf = function() {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var t = this;
                return tslib_es6.__generator(this, (function(n) {
                    return this.Of.forEach((function(n, i) {
                        t.tl(n);
                    })), [ 2 /*return*/ ];
                }));
            }));
        }, t.prototype.Qf = function(t) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                return tslib_es6.__generator(this, (function(n) {
                    return void 0 === t && 
                    // Graceful stop (due to stop() or idle timeout). Make sure that's
                    // desirable.
                    Wn(!this.Hf(), "Watch stream was stopped gracefully while still needed."), this.Zf(), 
                    // If we still need the watch stream, retry the connection.
                    this.Hf() ? (this.Mf.Pf(t), this.Yf()) : 
                    // No need to restart watch stream because there are no active targets.
                    // The online state is set to unknown because there is no active attempt
                    // at establishing a connection
                    this.Mf.set("Unknown" /* Unknown */), [ 2 /*return*/ ];
                }));
            }));
        }, t.prototype.Gf = function(t, n) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var i;
                return tslib_es6.__generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        // Mark the client as online since we got a message from the server
                        return this.Mf.set("Online" /* Online */), t instanceof Dn && 2 /* Removed */ === t.state && t.cause ? [ 2 /*return*/ , this.el(t) ] : (t instanceof Tn ? this.Ff.Ji(t) : t instanceof En ? this.Ff.ie(t) : (Wn(t instanceof Dn, "Expected watchChange to be an instance of WatchTargetChange"), 
                        this.Ff.Xi(t)), n.isEqual(k.MIN) ? [ 3 /*break*/ , 3 ] : [ 4 /*yield*/ , this.kf.oo() ]);

                      case 1:
                        return i = e.sent(), n.k(i) >= 0 ? [ 4 /*yield*/ , this.rl(n) ] : [ 3 /*break*/ , 3 ];

                        // We have received a target change with a global snapshot if the snapshot
                        // version is not equal to SnapshotVersion.MIN.
                                          case 2:
                        // We have received a target change with a global snapshot if the snapshot
                        // version is not equal to SnapshotVersion.MIN.
                        e.sent(), e.label = 3;

                      case 3:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Takes a batch of changes from the Datastore, repackages them as a
         * RemoteEvent, and passes that on to the listener, which is typically the
         * SyncEngine.
         */
        t.prototype.rl = function(t) {
            var n = this;
            Wn(!t.isEqual(k.MIN), "Can't raise event for unknown SnapshotVersion");
            var i = this.Ff.ue(t);
            // Update in-memory resume tokens. LocalStore will update the
            // persistent view of these when applying the completed RemoteEvent.
                    // Finally raise remote event
            return i.wi.forEach((function(i, e) {
                if (i.resumeToken.Lt() > 0) {
                    var r = n.Of.get(e);
                    // A watched target might have been removed already.
                                    r && n.Of.set(e, r.ei(i.resumeToken, t));
                }
            })), 
            // Re-establish listens for the targets that have been invalidated by
            // existence filter mismatches.
            i.mi.forEach((function(t) {
                var i = n.Of.get(t);
                if (i) {
                    // Clear the resume token for the target, since we're in a known mismatch
                    // state.
                    n.Of.set(t, i.ei(K.Mt, i.ni)), 
                    // Cause a hard reset by unwatching and rewatching immediately, but
                    // deliberately don't send a resume token so that we get a full update.
                    n.il(t);
                    // Mark the target we send as being on behalf of an existence filter
                    // mismatch, but don't actually retain that in listenTargets. This ensures
                    // that we flag the first re-listen this way without impacting future
                    // listens of this target (that might happen e.g. on reconnect).
                    var e = new en(i.target, t, 1 /* ExistenceFilterMismatch */ , i.sequenceNumber);
                    n.tl(e);
                }
            })), this.Jo.ho(i);
        }, 
        /** Handles an error on a target */
        t.prototype.el = function(t) {
            var n = this;
            Wn(!!t.cause, "Handling target error without a cause");
            var i = t.cause, e = Promise.resolve();
            return t.targetIds.forEach((function(t) {
                e = e.then((function() {
                    return tslib_es6.__awaiter(n, void 0, void 0, (function() {
                        return tslib_es6.__generator(this, (function(n) {
                            // A watched target might have been removed already.
                            return this.Of.has(t) ? (this.Of.delete(t), this.Ff.removeTarget(t), [ 2 /*return*/ , this.Jo.ul(t, i) ]) : [ 2 /*return*/ ];
                        }));
                    }));
                }));
            })), e;
        }, 
        /**
         * Attempts to fill our write pipeline with writes from the LocalStore.
         *
         * Called internally to bootstrap or refill the write pipeline and by
         * SyncEngine whenever there are new mutations to process.
         *
         * Starts the write stream if necessary.
         */
        t.prototype.Xf = function() {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var t, n;
                return tslib_es6.__generator(this, (function(i) {
                    switch (i.label) {
                      case 0:
                        return this.sl() ? (t = this.Nf.length > 0 ? this.Nf[this.Nf.length - 1].batchId : -1, 
                        [ 4 /*yield*/ , this.kf.yo(t) ]) : [ 3 /*break*/ , 4 ];

                      case 1:
                        return null !== (n = i.sent()) ? [ 3 /*break*/ , 2 ] : (0 === this.Nf.length && this.Wf.va(), 
                        [ 3 /*break*/ , 4 ]);

                      case 2:
                        return this.ol(n), [ 4 /*yield*/ , this.Xf() ];

                      case 3:
                        i.sent(), i.label = 4;

                      case 4:
                        return this.hl() && this.cl(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Returns true if we can add to the write pipeline (i.e. the network is
         * enabled and the write pipeline is not full).
         */
        t.prototype.sl = function() {
            return this.xf() && this.Nf.length < 10;
        }, 
        // For testing
        t.prototype.al = function() {
            return this.Nf.length;
        }, 
        /**
         * Queues additional writes to be sent to the write stream, sending them
         * immediately if the write stream is established.
         */
        t.prototype.ol = function(t) {
            Wn(this.sl(), "addToWritePipeline called when pipeline is full"), this.Nf.push(t), 
            this.Wf.fa() && this.Wf.Ca && this.Wf.Pa(t.mutations);
        }, t.prototype.hl = function() {
            return this.xf() && !this.Wf.aa() && this.Nf.length > 0;
        }, t.prototype.cl = function() {
            Wn(this.hl(), "startWriteStream() called when shouldStartWriteStream() is false."), 
            this.Wf.start();
        }, t.prototype.zf = function() {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                return tslib_es6.__generator(this, (function(t) {
                    return this.Wf.Na(), [ 2 /*return*/ ];
                }));
            }));
        }, t.prototype.Jf = function() {
            var t = this;
            // Record the stream token.
                    return this.kf.so(this.Wf.lastStreamToken).then((function() {
                // Send the write pipeline now that the stream is established.
                for (var n = 0, i = t.Nf; n < i.length; n++) {
                    var e = i[n];
                    t.Wf.Pa(e.mutations);
                }
            })).catch(pi);
        }, t.prototype.Va = function(t, n) {
            var i = this;
            // This is a response to a write containing mutations and should be
            // correlated to the first write in our write pipeline.
                    Wn(this.Nf.length > 0, "Got result for empty write pipeline");
            var e = this.Nf.shift(), r = Zn.from(e, t, n, this.Wf.lastStreamToken);
            return this.Jo.fl(r).then((function() {
                // It's possible that with the completion of this mutation another
                // slot has freed up.
                return i.Xf();
            }));
        }, t.prototype.Kf = function(t) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var n = this;
                return tslib_es6.__generator(this, (function(i) {
                    // If the write stream closed due to an error, invoke the error callbacks if
                    // there are pending writes.
                    return void 0 === t && 
                    // Graceful stop (due to stop() or idle timeout). Make sure that's
                    // desirable.
                    Wn(!this.hl(), "Write stream was stopped gracefully while still needed."), t && this.Nf.length > 0 ? ([ 2 /*return*/ , (this.Wf.Ca ? this.ll(t) : this.dl(t)).then((function() {
                        // The write stream might have been started by refilling the write
                        // pipeline for failed writes
                        n.hl() && n.cl();
                    })) ]) : [ 2 /*return*/ ];
                }));
            }));
        }, t.prototype.dl = function(t) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                return tslib_es6.__generator(this, (function(n) {
                    // Reset the token if it's a permanent error, signaling the write stream is
                    // no longer valid. Note that the handshake does not count as a write: see
                    // comments on isPermanentWriteError for details.
                    return un(t.code) ? (qn("RemoteStore", "RemoteStore error before completed handshake; resetting stream token: ", this.Wf.lastStreamToken), 
                    this.Wf.lastStreamToken = K.Mt, [ 2 /*return*/ , this.kf.so(K.Mt).catch(pi) ]) : [ 2 /*return*/ ];
                }));
            }));
        }, t.prototype.ll = function(t) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var n, i = this;
                return tslib_es6.__generator(this, (function(e) {
                    // Only handle permanent errors here. If it's transient, just let the retry
                    // logic kick in.
                    return un(r = t.code) && r !== T.ABORTED ? (n = this.Nf.shift(), 
                    // In this case it's also unlikely that the server itself is melting
                    // down -- this was just a bad request so inhibit backoff on the next
                    // restart.
                    this.Wf.da(), [ 2 /*return*/ , this.Jo.vl(n.batchId, t).then((function() {
                        // It's possible that with the completion of this mutation
                        // another slot has freed up.
                        return i.Xf();
                    })) ]) : [ 2 /*return*/ ];
                    var r;
                    /**
     * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
     *
     * @returns The Code equivalent to the given status string or undefined if
     *     there is no match.
     */            }));
            }));
        }, t.prototype.wl = function() {
            return new ze(this.mf);
        }, t.prototype.Lf = function() {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                return tslib_es6.__generator(this, (function(t) {
                    switch (t.label) {
                      case 0:
                        return this.networkEnabled = !1, [ 4 /*yield*/ , this.$f() ];

                      case 1:
                        return t.sent(), this.Mf.set("Unknown" /* Unknown */), [ 4 /*yield*/ , this.enableNetwork() ];

                      case 2:
                        return t.sent(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.ml = function() {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                return tslib_es6.__generator(this, (function(t) {
                    switch (t.label) {
                      case 0:
                        return this.xf() ? (
                        // Tear down and re-create our network streams. This will ensure we get a fresh auth token
                        // for the new user and re-fill the write pipeline with new mutations from the LocalStore
                        // (since mutations are per-user).
                        qn("RemoteStore", "RemoteStore restarting streams for new credential"), [ 4 /*yield*/ , this.Lf() ]) : [ 3 /*break*/ , 2 ];

                      case 1:
                        t.sent(), t.label = 2;

                      case 2:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Toggles the network state when the client gains or loses its primary lease.
         */
        t.prototype.pl = function(t) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                return tslib_es6.__generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        return this.isPrimary = t, t && this.networkEnabled ? [ 4 /*yield*/ , this.enableNetwork() ] : [ 3 /*break*/ , 2 ];

                      case 1:
                        return n.sent(), [ 3 /*break*/ , 4 ];

                      case 2:
                        return t ? [ 3 /*break*/ , 4 ] : [ 4 /*yield*/ , this.$f() ];

                      case 3:
                        n.sent(), this.Mf.set("Unknown" /* Unknown */), n.label = 4;

                      case 4:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t;
    }(), He = function(t) {
        this.key = t;
    }, Ye = function(t) {
        this.key = t;
    }, Xe = /** @class */ function() {
        function t(t, 
        /** Documents included in the remote target */
        n) {
            this.query = t, this.bl = n, this.gl = null, 
            /**
             * A flag whether the view is current with the backend. A view is considered
             * current after it has seen the current flag from the backend and did not
             * lose consistency within the watch stream (e.g. because of an existence
             * filter mismatch).
             */
            this._i = !1, 
            /** Documents in the view but not in the remote target */
            this.yl = wn(), 
            /** Document Keys that have local changes */
            this.fi = wn(), this._l = new bn(t.Bn.bind(t));
        }
        return Object.defineProperty(t.prototype, "Il", {
            /**
             * The set of remote documents that the server has told us belongs to the target associated with
             * this view.
             */
            get: function() {
                return this.bl;
            },
            enumerable: !0,
            configurable: !0
        }), 
        /**
         * Iterates over a set of doc changes, applies the query limit, and computes
         * what the new results should be, what the changes were, and whether we may
         * need to go back to the local cache for more results. Does not make any
         * changes to the view.
         * @param docChanges The doc changes to apply to this view.
         * @param previousChanges If this is being called with a refill, then start
         *        with this set of docs and changes instead of the current view.
         * @return a new set of docs, changes, and refill flag.
         */
        t.prototype.Tl = function(t, n) {
            var i = this, e = n ? n.El : new gn, r = n ? n._l : this._l, u = n ? n.fi : this.fi, s = r, o = !1, h = this.query.Kn() && r.size === this.query.limit ? r.last() : null, c = this.query.Jn() && r.size === this.query.limit ? r.first() : null;
            // Drop documents out to meet limit/limitToLast requirement.
            if (t.ct((function(t, n) {
                var a = r.get(t), f = n instanceof xt ? n : null;
                f && (Wn(t.isEqual(f.key), "Mismatching keys found in document changes: " + t + " != " + f.key), 
                f = i.query.matches(f) ? f : null);
                var l = !!a && i.fi.has(a.key), d = !!f && (f.nn || 
                // We only consider committed mutations for documents that were
                // mutated during the lifetime of the view.
                i.fi.has(f.key) && f.hasCommittedMutations), v = !1;
                // Calculate change
                a && f ? a.data().isEqual(f.data()) ? l !== d && (e.track({
                    type: 3 /* Metadata */ ,
                    doc: f
                }), v = !0) : i.Dl(a, f) || (e.track({
                    type: 2 /* Modified */ ,
                    doc: f
                }), v = !0, (h && i.query.Bn(f, h) > 0 || c && i.query.Bn(f, c) < 0) && (
                // This doc moved from inside the limit to outside the limit.
                // That means there may be some other doc in the local cache
                // that should be included instead.
                o = !0)) : !a && f ? (e.track({
                    type: 0 /* Added */ ,
                    doc: f
                }), v = !0) : a && !f && (e.track({
                    type: 1 /* Removed */ ,
                    doc: a
                }), v = !0, (h || c) && (
                // A doc was removed from a full limit query. We'll need to
                // requery from the local cache to see if we know about some other
                // doc that should be in the results.
                o = !0));
                v && (f ? (s = s.add(f), u = d ? u.add(t) : u.delete(t)) : (s = s.delete(t), u = u.delete(t)));
            })), this.query.Kn() || this.query.Jn()) for (;s.size > this.query.limit; ) {
                var a = this.query.Kn() ? s.last() : s.first();
                s = s.delete(a.key), u = u.delete(a.key), e.track({
                    type: 1 /* Removed */ ,
                    doc: a
                });
            }
            return Wn(!o || !n, "View was refilled using docs that themselves needed refilling."), 
            {
                _l: s,
                El: e,
                ic: o,
                fi: u
            };
        }, t.prototype.Dl = function(t, n) {
            // We suppress the initial change event for documents that were modified as
            // part of a write acknowledgment (e.g. when the value of a server transform
            // is applied) as Watch will send us the same document again.
            // By suppressing the event, we only raise two user visible events (one with
            // `hasPendingWrites` and the final state of the document) instead of three
            // (one with `hasPendingWrites`, the modified document with
            // `hasPendingWrites` and the final state of the document).
            return t.nn && n.hasCommittedMutations && !n.nn;
        }, 
        /**
         * Updates the view with the given ViewDocumentChanges and optionally updates
         * limbo docs and sync state from the provided target change.
         * @param docChanges The set of changes to make to the view's docs.
         * @param updateLimboDocuments Whether to update limbo documents based on this
         *        change.
         * @param targetChange A target change to apply for computing limbo docs and
         *        sync state.
         * @return A new ViewChange with the given docs, changes, and sync state.
         */
        // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
        t.prototype.Is = function(t, n, i) {
            var e = this;
            Wn(!t.ic, "Cannot apply changes that need a refill");
            var r = this._l;
            this._l = t._l, this.fi = t.fi;
            // Sort changes based on type and query comparator
            var u = t.El.ci();
            u.sort((function(t, n) {
                return function(t, n) {
                    var i = function(t) {
                        switch (t) {
                          case 0 /* Added */ :
                            return 1;

                          case 2 /* Modified */ :
                          case 3 /* Metadata */ :
                            // A metadata change is converted to a modified change at the public
                            // api layer.  Since we sort by document key and then change type,
                            // metadata and modified changes must be sorted equivalently.
                            return 2;

                          case 1 /* Removed */ :
                            return 0;

                          default:
                            return Gn("Unknown ChangeType: " + t);
                        }
                    };
                    return i(t) - i(n);
                }
                /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ (t.type, n.type) || e.query.Bn(t.doc, n.doc);
            })), this.Rl(i);
            var s = n ? this.Sl() : [], o = 0 === this.yl.size && this._i ? 1 /* Synced */ : 0 /* Local */ , h = o !== this.gl;
            return this.gl = o, 0 !== u.length || h ? {
                snapshot: new yn(this.query, t._l, r, u, t.fi, 0 /* Local */ === o, h, 
                /* excludesMetadataChanges= */ !1),
                Al: s
            } : {
                Al: s
            };
        }, 
        /**
         * Applies an OnlineState change to the view, potentially generating a
         * ViewChange if the view's syncState changes as a result.
         */
        t.prototype.Cl = function(t) {
            return this._i && "Offline" /* Offline */ === t ? (
            // If we're offline, set `current` to false and then call applyChanges()
            // to refresh our syncState and generate a ViewChange as appropriate. We
            // are guaranteed to get a new TargetChange that sets `current` back to
            // true once the client is back online.
            this._i = !1, this.Is({
                _l: this._l,
                El: new gn,
                fi: this.fi,
                ic: !1
            }, 
            /* updateLimboDocuments= */ !1)) : {
                Al: []
            };
        }, 
        /**
         * Returns whether the doc for the given key should be in limbo.
         */
        t.prototype.Pl = function(t) {
            // If the remote end says it's part of this query, it's not in limbo.
            return !this.bl.has(t) && (
            // The local store doesn't think it's a result, so it shouldn't be in limbo.
            !!this._l.has(t) && !this._l.get(t).nn);
        }, 
        /**
         * Updates syncedDocuments, current, and limbo docs based on the given change.
         * Returns the list of changes to which docs are in limbo.
         */
        t.prototype.Rl = function(t) {
            var n = this;
            t && (t.Ii.forEach((function(t) {
                return n.bl = n.bl.add(t);
            })), t.Ti.forEach((function(t) {
                return Wn(n.bl.has(t), "Modified document " + t + " not found in view.");
            })), t.Ei.forEach((function(t) {
                return n.bl = n.bl.delete(t);
            })), this._i = t._i);
        }, t.prototype.Sl = function() {
            var t = this;
            // We can only determine limbo documents when we're in-sync with the server.
                    if (!this._i) return [];
            // TODO(klimt): Do this incrementally so that it's not quadratic when
            // updating many documents.
                    var n = this.yl;
            this.yl = wn(), this._l.forEach((function(n) {
                t.Pl(n.key) && (t.yl = t.yl.add(n.key));
            }));
            // Diff the new limbo docs with the old limbo docs.
            var i = [];
            return n.forEach((function(n) {
                t.yl.has(n) || i.push(new Ye(n));
            })), this.yl.forEach((function(t) {
                n.has(t) || i.push(new He(t));
            })), i;
        }, 
        /**
         * Update the in-memory state of the current view with the state read from
         * persistence.
         *
         * We update the query view whenever a client's primary status changes:
         * - When a client transitions from primary to secondary, it can miss
         *   LocalStorage updates and its query views may temporarily not be
         *   synchronized with the state on disk.
         * - For secondary to primary transitions, the client needs to update the list
         *   of `syncedDocuments` since secondary clients update their query views
         *   based purely on synthesized RemoteEvents.
         *
         * @param queryResult.documents - The documents that match the query according
         * to the LocalStore.
         * @param queryResult.remoteKeys - The keys of the documents that match the
         * query according to the backend.
         *
         * @return The ViewChange that resulted from this synchronization.
         */
        // PORTING NOTE: Multi-tab only.
        t.prototype.Vl = function(t) {
            this.bl = t.ko, this.yl = wn();
            var n = this.Tl(t.documents);
            return this.Is(n, /*updateLimboDocuments=*/ !0);
        }, 
        /**
         * Returns a view snapshot as if this query was just listened to. Contains
         * a document add for every existing document and the `fromCache` and
         * `hasPendingWrites` status of the already established view.
         */
        // PORTING NOTE: Multi-tab only.
        t.prototype.kl = function() {
            return yn.vi(this.query, this._l, this.fi, 0 /* Local */ === this.gl);
        }, t;
    }();

    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var $e = /** @class */ function() {
        function t(t, n, i, e) {
            this.Or = t, this.Nl = n, this.updateFunction = i, this.xr = e, this.Ol = 5, this.ca = new Ki(this.Or, "retry_transaction" /* RetryTransaction */);
        }
        /** Runs the transaction and sets the result on deferred. */    return t.prototype.run = function() {
            this.Fl();
        }, t.prototype.Fl = function() {
            var t = this;
            this.ca.ea((function() {
                return tslib_es6.__awaiter(t, void 0, void 0, (function() {
                    var t, n, i = this;
                    return tslib_es6.__generator(this, (function(e) {
                        return t = this.Nl.wl(), (n = this.Ul(t)) && n.then((function(n) {
                            i.Or.Qr((function() {
                                return t.commit().then((function() {
                                    i.xr.resolve(n);
                                })).catch((function(t) {
                                    i.jl(t);
                                }));
                            }));
                        })).catch((function(t) {
                            i.jl(t);
                        })), [ 2 /*return*/ ];
                    }));
                }));
            }));
        }, t.prototype.Ul = function(t) {
            try {
                var n = this.updateFunction(t);
                return !J(n) && n.catch && n.then ? n : (this.xr.reject(Error("Transaction callback must return a Promise")), 
                null);
            } catch (t) {
                // Do not retry errors thrown by user provided updateFunction.
                return this.xr.reject(t), null;
            }
        }, t.prototype.jl = function(t) {
            var n = this;
            this.Ol > 0 && this.xl(t) ? (this.Ol -= 1, this.Or.Qr((function() {
                return n.Fl(), Promise.resolve();
            }))) : this.xr.reject(t);
        }, t.prototype.xl = function(t) {
            if ("FirebaseError" === t.name) {
                // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and
                // non-matching document versions with ABORTED. These errors should be retried.
                var n = t.code;
                return "aborted" === n || "failed-precondition" === n || !un(n);
            }
            return !1;
        }, t;
    }(), Ze = function(
    /**
         * The query itself.
         */
    t, 
    /**
         * The target number created by the client that is used in the watch
         * stream to identify this query.
         */
    n, 
    /**
         * The view is responsible for computing the final merged truth of what
         * docs are in the query. It gets notified of local and remote changes,
         * and applies the query filters and limits to determine the most correct
         * possible results.
         */
    i) {
        this.query = t, this.targetId = n, this.view = i;
    }, tr = function(t) {
        this.key = t, 
        /**
             * Set to true once we've received a document. This is used in
             * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
             * decide whether it needs to manufacture a delete event for the target once
             * the target is CURRENT.
             */
        this.Ll = !1;
    }, nr = /** @class */ function() {
        function t(t, n, 
        // PORTING NOTE: Manages state synchronization in multi-tab environments.
        i, e, r) {
            this.kf = t, this.Nl = n, this.Ml = i, this.currentUser = e, this.ql = r, this.Bl = null, 
            this.Ql = new ti((function(t) {
                return t.canonicalId();
            })), this.Gl = new Map, 
            /**
             * The keys of documents that are in limbo for which we haven't yet started a
             * limbo resolution query.
             */
            this.Wl = [], 
            /**
             * Keeps track of the target ID for each document that is in limbo with an
             * active target.
             */
            this.zl = new x(j.F), 
            /**
             * Keeps track of the information about an active limbo resolution for each
             * active target ID that was started for the purpose of limbo resolution.
             */
            this.Kl = new Map, this.Jl = new di, 
            /** Stores user completion handlers, indexed by User and BatchId. */
            this.Hl = {}, 
            /** Stores user callbacks waiting for all pending writes to be acknowledged. */
            this.Yl = new Map, this.Xl = Mi.Tc(), 
            // The primary state is set to `true` or `false` immediately after Firestore
            // startup. In the interim, a client should only be considered primary if
            // `isPrimary` is true.
            this.isPrimary = void 0, this.onlineState = "Unknown" /* Unknown */;
        }
        return Object.defineProperty(t.prototype, "$l", {
            // Only used for testing.
            get: function() {
                return !0 === this.isPrimary;
            },
            enumerable: !0,
            configurable: !0
        }), 
        /** Subscribes to SyncEngine notifications. Has to be called exactly once. */
        t.prototype.subscribe = function(t) {
            Wn(null !== t, "SyncEngine listener cannot be null"), Wn(null === this.Bl, "SyncEngine already has a subscriber."), 
            this.Bl = t;
        }, 
        /**
         * Initiates the new listen, resolves promise when listen enqueued to the
         * server. All the subsequent view snapshots or errors are sent to the
         * subscribed handlers. Returns the targetId of the query.
         */
        t.prototype.listen = function(t) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var n, i, e, r, s;
                return tslib_es6.__generator(this, (function(u) {
                    switch (u.label) {
                      case 0:
                        return this.Zl("listen()"), (e = this.Ql.get(t)) ? (
                        // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
                        // already exists when EventManager calls us for the first time. This
                        // happens when the primary tab is already listening to this query on
                        // behalf of another tab and the user of the primary also starts listening
                        // to the query. EventManager will not have an assigned target ID in this
                        // case and calls `listen` to obtain this ID.
                        n = e.targetId, this.Ml.ph(n), i = e.view.kl(), [ 3 /*break*/ , 4 ]) : [ 3 /*break*/ , 1 ];

                      case 1:
                        return [ 4 /*yield*/ , this.kf.Eo(t.qn()) ];

                      case 2:
                        return r = u.sent(), s = this.Ml.ph(r.targetId), n = r.targetId, [ 4 /*yield*/ , this.td(t, n, "current" === s) ];

                      case 3:
                        i = u.sent(), this.isPrimary && this.Nl.listen(r), u.label = 4;

                      case 4:
                        return this.Bl.Ra([ i ]), [ 2 /*return*/ , n ];
                    }
                }));
            }));
        }, 
        /**
         * Registers a view for a previously unknown query and computes its initial
         * snapshot.
         */
        t.prototype.td = function(t, n, i) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var e, r, s, o, h, c;
                return tslib_es6.__generator(this, (function(u) {
                    switch (u.label) {
                      case 0:
                        return [ 4 /*yield*/ , this.kf.Co(t, 
                        /* usePreviousResults= */ !0) ];

                      case 1:
                        return e = u.sent(), r = new Xe(t, e.ko), s = r.Tl(e.documents), o = In.yi(n, i && "Offline" /* Offline */ !== this.onlineState), 
                        Wn(0 === (h = r.Is(s, 
                        /* updateLimboDocuments= */ !0 === this.isPrimary, o)).Al.length, "View returned limbo docs before target ack from the server."), 
                        Wn(!!h.snapshot, "applyChanges for new view should always return a snapshot"), c = new Ze(t, n, r), 
                        this.Ql.set(t, c), this.Gl.has(n) ? this.Gl.get(n).push(t) : this.Gl.set(n, [ t ]), 
                        [ 2 /*return*/ , h.snapshot ];
                    }
                }));
            }));
        }, 
        /**
         * Reconcile the list of synced documents in an existing view with those
         * from persistence.
         */
        // PORTING NOTE: Multi-tab only.
        t.prototype.nd = function(t) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var n, i;
                return tslib_es6.__generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        return [ 4 /*yield*/ , this.kf.Co(t.query, 
                        /* usePreviousResults= */ !0) ];

                      case 1:
                        return n = e.sent(), i = t.view.Vl(n), this.isPrimary && this.ed(t.targetId, i.Al), 
                        [ 2 /*return*/ , i ];
                    }
                }));
            }));
        }, 
        /** Stops listening to the query. */
        t.prototype.nl = function(t) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var n, i, e = this;
                return tslib_es6.__generator(this, (function(r) {
                    switch (r.label) {
                      case 0:
                        return this.Zl("unlisten()"), Wn(!!(n = this.Ql.get(t)), "Trying to unlisten on query not found:" + t), 
                        (i = this.Gl.get(n.targetId)).length > 1 ? (this.Gl.set(n.targetId, i.filter((function(n) {
                            return !n.isEqual(t);
                        }))), this.Ql.delete(t), [ 2 /*return*/ ]) : this.isPrimary ? (
                        // We need to remove the local query target first to allow us to verify
                        // whether any other client is still interested in this target.
                        this.Ml.gh(n.targetId), this.Ml.lh(n.targetId) ? [ 3 /*break*/ , 2 ] : [ 4 /*yield*/ , this.kf.Ao(n.targetId, /*keepPersistedTargetData=*/ !1).then((function() {
                            e.Ml._h(n.targetId), e.Nl.nl(n.targetId), e.rd(n.targetId);
                        })).catch(pi) ]) : [ 3 /*break*/ , 3 ];

                      case 1:
                        r.sent(), r.label = 2;

                      case 2:
                        return [ 3 /*break*/ , 5 ];

                      case 3:
                        return this.rd(n.targetId), [ 4 /*yield*/ , this.kf.Ao(n.targetId, 
                        /*keepPersistedTargetData=*/ !0) ];

                      case 4:
                        r.sent(), r.label = 5;

                      case 5:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Initiates the write of local mutation batch which involves adding the
         * writes to the mutation queue, notifying the remote store about new
         * mutations and raising events for any changes this write caused.
         *
         * The promise returned by this call is resolved when the above steps
         * have completed, *not* when the write was acked by the backend. The
         * userCallback is resolved once the write was acked/rejected by the
         * backend (or failed locally for any other reason).
         */
        t.prototype.write = function(t, n) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var i;
                return tslib_es6.__generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        return this.Zl("write()"), [ 4 /*yield*/ , this.kf.zs(t) ];

                      case 1:
                        return i = e.sent(), this.Ml.dh(i.batchId), this.ud(i.batchId, n), [ 4 /*yield*/ , this.sd(i.ds) ];

                      case 2:
                        return e.sent(), [ 4 /*yield*/ , this.Nl.Xf() ];

                      case 3:
                        return e.sent(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Takes an updateFunction in which a set of reads and writes can be performed
         * atomically. In the updateFunction, the client can read and write values
         * using the supplied transaction object. After the updateFunction, all
         * changes will be committed. If a retryable error occurs (ex: some other
         * client has changed any of the data referenced), then the updateFunction
         * will be called again after a backoff. If the updateFunction still fails
         * after all retries, then the transaction will be rejected.
         *
         * The transaction object passed to the updateFunction contains methods for
         * accessing documents and collections. Unlike other datastore access, data
         * accessed with the transaction will not reflect local changes that have not
         * been committed. For this reason, it is required that all reads are
         * performed before any writes. Transactions must be performed while online.
         *
         * The Deferred input is resolved when the transaction is fully committed.
         */
        t.prototype.runTransaction = function(t, n, i) {
            new $e(t, this.Nl, n, i).run();
        }, t.prototype.ho = function(t) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var n, i = this;
                return tslib_es6.__generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        this.Zl("applyRemoteEvent()"), e.label = 1;

                      case 1:
                        return e.trys.push([ 1, 4, , 6 ]), [ 4 /*yield*/ , this.kf.ho(t) ];

                      case 2:
                        return n = e.sent(), 
                        // Update `receivedDocument` as appropriate for any limbo targets.
                        t.wi.forEach((function(t, n) {
                            var e = i.Kl.get(n);
                            e && (
                            // Since this is a limbo resolution lookup, it's for a single document
                            // and it could be added, modified, or removed, but not a combination.
                            Wn(t.Ii.size + t.Ti.size + t.Ei.size <= 1, "Limbo resolution for single document contains multiple changes."), 
                            t.Ii.size > 0 ? e.Ll = !0 : t.Ti.size > 0 ? Wn(e.Ll, "Received change for limbo target document without add.") : t.Ei.size > 0 && (Wn(e.Ll, "Received remove for limbo target document without add."), 
                            e.Ll = !1));
                        })), [ 4 /*yield*/ , this.sd(n, t) ];

                      case 3:
                        return e.sent(), [ 3 /*break*/ , 6 ];

                      case 4:
                        return [ 4 /*yield*/ , pi(e.sent()) ];

                      case 5:
                        return e.sent(), [ 3 /*break*/ , 6 ];

                      case 6:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Applies an OnlineState change to the sync engine and notifies any views of
         * the change.
         */
        t.prototype.Cl = function(t, n) {
            // If we are the secondary client, we explicitly ignore the remote store's
            // online state (the local client may go offline, even though the primary
            // tab remains online) and only apply the primary tab's online state from
            // SharedClientState.
            if (this.isPrimary && 0 /* RemoteStore */ === n || !this.isPrimary && 1 /* SharedClientState */ === n) {
                this.Zl("applyOnlineStateChange()");
                var i = [];
                this.Ql.forEach((function(n, e) {
                    var r = e.view.Cl(t);
                    Wn(0 === r.Al.length, "OnlineState should not affect limbo documents."), r.snapshot && i.push(r.snapshot);
                })), this.Bl.od(t), this.Bl.Ra(i), this.onlineState = t, this.isPrimary && this.Ml.Eh(t);
            }
        }, t.prototype.ul = function(t, n) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var i, e, r, s, o, h = this;
                return tslib_es6.__generator(this, (function(u) {
                    switch (u.label) {
                      case 0:
                        return this.Zl("rejectListens()"), 
                        // PORTING NOTE: Multi-tab only.
                        this.Ml.Ih(t, "rejected", n), i = this.Kl.get(t), (e = i && i.key) ? (
                        // Since this query failed, we won't want to manually unlisten to it.
                        // So go ahead and remove it from bookkeeping.
                        this.zl = this.zl.remove(e), this.Kl.delete(t), this.hd(), r = (r = new x(j.F)).ut(e, new Lt(e, k.V())), 
                        s = wn().add(e), o = new _n(k.MIN, 
                        /* targetChanges= */ new Map, 
                        /* targetMismatches= */ new B(Kn), r, s), [ 2 /*return*/ , this.ho(o) ]) : [ 3 /*break*/ , 1 ];

                      case 1:
                        return [ 4 /*yield*/ , this.kf.Ao(t, /* keepPersistedTargetData */ !1).then((function() {
                            return h.rd(t, n);
                        })).catch(pi) ];

                      case 2:
                        u.sent(), u.label = 3;

                      case 3:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        // PORTING NOTE: Multi-tab only
        t.prototype.Nh = function(t, n, i) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var e;
                return tslib_es6.__generator(this, (function(r) {
                    switch (r.label) {
                      case 0:
                        return this.Zl("applyBatchState()"), [ 4 /*yield*/ , this.kf.Js(t) ];

                      case 1:
                        return null === (e = r.sent()) ? (
                        // A throttled tab may not have seen the mutation before it was completed
                        // and removed from the mutation queue, in which case we won't have cached
                        // the affected documents. In this case we can safely ignore the update
                        // since that means we didn't apply the mutation locally at all (if we
                        // had, we would have cached the affected documents), and so we will just
                        // see any resulting document changes via normal remote document updates
                        // as applicable.
                        qn("SyncEngine", "Cannot apply mutation batch with id: " + t), [ 2 /*return*/ ]) : "pending" !== n ? [ 3 /*break*/ , 3 ] : [ 4 /*yield*/ , this.Nl.Xf() ];

                      case 2:
                        // If we are the primary client, we need to send this write to the
                        // backend. Secondary clients will ignore these writes since their remote
                        // connection is disabled.
                        return r.sent(), [ 3 /*break*/ , 4 ];

                      case 3:
                        "acknowledged" === n || "rejected" === n ? (
                        // NOTE: Both these methods are no-ops for batches that originated from
                        // other clients.
                        this.ad(t, i || null), this.kf.Fo(t)) : Gn("Unknown batchState: " + n), r.label = 4;

                      case 4:
                        return [ 4 /*yield*/ , this.sd(e) ];

                      case 5:
                        return r.sent(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.fl = function(t) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var n, i;
                return tslib_es6.__generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        this.Zl("applySuccessfulWrite()"), n = t.batch.batchId, 
                        // The local store may or may not be able to apply the write result and
                        // raise events immediately (depending on whether the watcher is caught
                        // up), so we raise user callbacks first so that they consistently happen
                        // before listen events.
                        this.ad(n, /*error=*/ null), this.fd(n), e.label = 1;

                      case 1:
                        return e.trys.push([ 1, 4, , 6 ]), [ 4 /*yield*/ , this.kf.Ys(t) ];

                      case 2:
                        return i = e.sent(), this.Ml.wh(n, "acknowledged"), [ 4 /*yield*/ , this.sd(i) ];

                      case 3:
                        return e.sent(), [ 3 /*break*/ , 6 ];

                      case 4:
                        return [ 4 /*yield*/ , pi(e.sent()) ];

                      case 5:
                        return e.sent(), [ 3 /*break*/ , 6 ];

                      case 6:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.vl = function(t, n) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var i;
                return tslib_es6.__generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        this.Zl("rejectFailedWrite()"), 
                        // The local store may or may not be able to apply the write result and
                        // raise events immediately (depending on whether the watcher is caught up),
                        // so we raise user callbacks first so that they consistently happen before
                        // listen events.
                        this.ad(t, n), this.fd(t), e.label = 1;

                      case 1:
                        return e.trys.push([ 1, 4, , 6 ]), [ 4 /*yield*/ , this.kf.no(t) ];

                      case 2:
                        return i = e.sent(), this.Ml.wh(t, "rejected", n), [ 4 /*yield*/ , this.sd(i) ];

                      case 3:
                        return e.sent(), [ 3 /*break*/ , 6 ];

                      case 4:
                        return [ 4 /*yield*/ , pi(e.sent()) ];

                      case 5:
                        return e.sent(), [ 3 /*break*/ , 6 ];

                      case 6:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Registers a user callback that resolves when all pending mutations at the moment of calling
         * are acknowledged .
         */
        t.prototype.ld = function(t) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var n, i;
                return tslib_es6.__generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        return this.Nl.xf() || qn("SyncEngine", "The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled."), 
                        [ 4 /*yield*/ , this.kf.ro() ];

                      case 1:
                        return -1 === (n = e.sent()) ? (
                        // Trigger the callback right away if there is no pending writes at the moment.
                        t.resolve(), [ 2 /*return*/ ]) : ((i = this.Yl.get(n) || []).push(t), this.Yl.set(n, i), 
                        [ 2 /*return*/ ]);
                    }
                }));
            }));
        }, 
        /**
         * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,
         * if there are any.
         */
        t.prototype.fd = function(t) {
            (this.Yl.get(t) || []).forEach((function(t) {
                t.resolve();
            })), this.Yl.delete(t);
        }, 
        /** Reject all outstanding callbacks waiting for pending writes to complete. */
        t.prototype.dd = function(t) {
            this.Yl.forEach((function(n) {
                n.forEach((function(n) {
                    n.reject(new E(T.CANCELLED, t));
                }));
            })), this.Yl.clear();
        }, t.prototype.ud = function(t, n) {
            var i = this.Hl[this.currentUser.i()];
            i || (i = new x(Kn)), i = i.ut(t, n), this.Hl[this.currentUser.i()] = i;
        }, 
        /**
         * Resolves or rejects the user callback for the given batch and then discards
         * it.
         */
        t.prototype.ad = function(t, n) {
            var i = this.Hl[this.currentUser.i()];
            // NOTE: Mutations restored from persistence won't have callbacks, so it's
            // okay for there to be no callback for this ID.
                    if (i) {
                var e = i.get(t);
                e && (Wn(t === i.ot(), "Mutation callbacks processed out-of-order?"), n ? e.reject(n) : e.resolve(), 
                i = i.remove(t)), this.Hl[this.currentUser.i()] = i;
            }
        }, t.prototype.rd = function(t, n) {
            var i = this;
            void 0 === n && (n = null), this.Ml.gh(t), Wn(this.Gl.has(t) && 0 !== this.Gl.get(t).length, "There are no queries mapped to target id " + t);
            for (var e = 0, r = this.Gl.get(t); e < r.length; e++) {
                var u = r[e];
                this.Ql.delete(u), n && this.Bl.vd(u, n);
            }
            if (this.Gl.delete(t), this.isPrimary) {
                var s = this.Jl.as(t);
                this.Jl.hs(t), s.forEach((function(t) {
                    i.Jl.fs(t) || 
                    // We removed the last reference for this key
                    i.wd(t);
                }));
            }
        }, t.prototype.wd = function(t) {
            // It's possible that the target already got removed because the query failed. In that case,
            // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.
            var n = this.zl.get(t);
            null !== n && (this.Nl.nl(n), this.zl = this.zl.remove(t), this.Kl.delete(n), this.hd());
        }, t.prototype.ed = function(t, n) {
            for (var i = 0, e = n; i < e.length; i++) {
                var r = e[i];
                if (r instanceof He) this.Jl.es(r.key, t), this.md(r); else if (r instanceof Ye) {
                    qn("SyncEngine", "Document no longer in limbo: " + r.key), this.Jl.us(r.key, t), 
                    this.Jl.fs(r.key) || 
                    // We removed the last reference for this key
                    this.wd(r.key);
                } else Gn("Unknown limbo change: " + JSON.stringify(r));
            }
        }, t.prototype.md = function(t) {
            var n = t.key;
            this.zl.get(n) || (qn("SyncEngine", "New document in limbo: " + n), this.Wl.push(n), 
            this.hd());
        }, 
        /**
         * Starts listens for documents in limbo that are enqueued for resolution,
         * subject to a maximum number of concurrent resolutions.
         *
         * Without bounding the number of concurrent resolutions, the server can fail
         * with "resource exhausted" errors which can lead to pathological client
         * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.
         */
        t.prototype.hd = function() {
            for (;this.Wl.length > 0 && this.zl.size < this.ql; ) {
                var t = this.Wl.shift(), n = this.Xl.next();
                this.Kl.set(n, new tr(t)), this.zl = this.zl.ut(t, n), this.Nl.listen(new en(Bt.Cn(t.path).qn(), n, 2 /* LimboResolution */ , ii.Nr));
            }
        }, 
        // Visible for testing
        t.prototype.pd = function() {
            return this.zl;
        }, 
        // Visible for testing
        t.prototype.bd = function() {
            return this.Wl;
        }, t.prototype.sd = function(t, n) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var i, e, r, s = this;
                return tslib_es6.__generator(this, (function(u) {
                    switch (u.label) {
                      case 0:
                        return i = [], e = [], r = [], this.Ql.forEach((function(u, o) {
                            r.push(Promise.resolve().then((function() {
                                var n = o.view.Tl(t);
                                return n.ic ? s.kf.Co(o.query, /* usePreviousResults= */ !1).then((function(t) {
                                    var i = t.documents;
                                    return o.view.Tl(i, n);
                                })) : n;
                                // The query has a limit and some docs were removed, so we need
                                // to re-run the query against the local store to make sure we
                                // didn't lose any good docs that had been past the limit.
                                                    })).then((function(t) {
                                var r = n && n.wi.get(o.targetId), u = o.view.Is(t, 
                                /* updateLimboDocuments= */ !0 === s.isPrimary, r);
                                if (s.ed(o.targetId, u.Al), u.snapshot) {
                                    s.isPrimary && s.Ml.Ih(o.targetId, u.snapshot.fromCache ? "not-current" : "current"), 
                                    i.push(u.snapshot);
                                    var h = ni.Ar(o.targetId, u.snapshot);
                                    e.push(h);
                                }
                            })));
                        })), [ 4 /*yield*/ , Promise.all(r) ];

                      case 1:
                        return u.sent(), this.Bl.Ra(i), [ 4 /*yield*/ , this.kf.bo(e) ];

                      case 2:
                        return u.sent(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.Zl = function(t) {
            Wn(null !== this.Bl, "Trying to call " + t + " before calling subscribe().");
        }, t.prototype.ml = function(t) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var n, i;
                return tslib_es6.__generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        return n = !this.currentUser.isEqual(t), this.currentUser = t, n ? (
                        // Fails tasks waiting for pending writes requested by previous user.
                        this.dd("'waitForPendingWrites' promise is rejected due to a user change."), [ 4 /*yield*/ , this.kf.Ms(t) ]) : [ 3 /*break*/ , 3 ];

                      case 1:
                        return i = e.sent(), 
                        // TODO(b/114226417): Consider calling this only in the primary tab.
                        this.Ml.Ms(t, i.Gs, i.Ws), [ 4 /*yield*/ , this.sd(i.Qs) ];

                      case 2:
                        e.sent(), e.label = 3;

                      case 3:
                        return [ 4 /*yield*/ , this.Nl.ml() ];

                      case 4:
                        return e.sent(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        // PORTING NOTE: Multi-tab only
        t.prototype.pl = function(t) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var n, i, e, r, s, o, h = this;
                return tslib_es6.__generator(this, (function(u) {
                    switch (u.label) {
                      case 0:
                        return !0 !== t || !0 === this.isPrimary ? [ 3 /*break*/ , 3 ] : (this.isPrimary = !0, 
                        [ 4 /*yield*/ , this.Nl.pl(!0) ]);

                      case 1:
                        return u.sent(), s = this.Ml.fh(), [ 4 /*yield*/ , this.gd(s.K()) ];

                      case 2:
                        for (n = u.sent(), i = 0, e = n; i < e.length; i++) r = e[i], this.Nl.listen(r);
                        return [ 3 /*break*/ , 7 ];

                      case 3:
                        return !1 !== t || !1 === this.isPrimary ? [ 3 /*break*/ , 7 ] : (this.isPrimary = !1, 
                        s = [], o = Promise.resolve(), this.Gl.forEach((function(t, n) {
                            h.Ml.yh(n) ? s.push(n) : o = o.then((function() {
                                return h.rd(n), h.kf.Ao(n, 
                                /*keepPersistedTargetData=*/ !0);
                            })), h.Nl.nl(n);
                        })), [ 4 /*yield*/ , o ]);

                      case 4:
                        return u.sent(), [ 4 /*yield*/ , this.gd(s) ];

                      case 5:
                        return u.sent(), this.yd(), [ 4 /*yield*/ , this.Nl.pl(!1) ];

                      case 6:
                        u.sent(), u.label = 7;

                      case 7:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        // PORTING NOTE: Multi-tab only.
        t.prototype.yd = function() {
            var t = this;
            this.Kl.forEach((function(n, i) {
                t.Nl.nl(i);
            })), this.Jl.cs(), this.Kl = new Map, this.zl = new x(j.F);
        }, 
        /**
         * Reconcile the query views of the provided query targets with the state from
         * persistence. Raises snapshots for any changes that affect the local
         * client and returns the updated state of all target's query data.
         */
        // PORTING NOTE: Multi-tab only.
        t.prototype.gd = function(t) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var n, i, e, r, s, o, h, c, a, f, l, d, v;
                return tslib_es6.__generator(this, (function(u) {
                    switch (u.label) {
                      case 0:
                        n = [], i = [], e = 0, r = t, u.label = 1;

                      case 1:
                        return e < r.length ? (s = r[e], o = void 0, (h = this.Gl.get(s)) && 0 !== h.length ? [ 4 /*yield*/ , this.kf.Ao(s, 
                        /*keepPersistedTargetData=*/ !0) ] : [ 3 /*break*/ , 8 ]) : [ 3 /*break*/ , 14 ];

                      case 2:
                        // For queries that have a local View, we need to update their state
                        // in LocalStore (as the resume token and the snapshot version
                        // might have changed) and reconcile their views with the persisted
                        // state (the list of syncedDocuments may have gotten out of sync).
                        return u.sent(), [ 4 /*yield*/ , this.kf.Eo(h[0].qn()) ];

                      case 3:
                        o = u.sent(), c = 0, a = h, u.label = 4;

                      case 4:
                        return c < a.length ? (f = a[c], Wn(!!(l = this.Ql.get(f)), "No query view found for " + f), 
                        [ 4 /*yield*/ , this.nd(l) ]) : [ 3 /*break*/ , 7 ];

                      case 5:
                        (d = u.sent()).snapshot && i.push(d.snapshot), u.label = 6;

                      case 6:
                        return c++, [ 3 /*break*/ , 4 ];

                      case 7:
                        return [ 3 /*break*/ , 12 ];

                      case 8:
                        return Wn(!0 === this.isPrimary, "A secondary tab should never have an active target without an active query."), 
                        [ 4 /*yield*/ , this.kf.xo(s) ];

                      case 9:
                        return Wn(!!(v = u.sent()), "Target for id " + s + " not found"), [ 4 /*yield*/ , this.kf.Eo(v) ];

                      case 10:
                        return o = u.sent(), [ 4 /*yield*/ , this.td(this._d(v), s, 
                        /*current=*/ !1) ];

                      case 11:
                        u.sent(), u.label = 12;

                      case 12:
                        n.push(o), u.label = 13;

                      case 13:
                        return e++, [ 3 /*break*/ , 1 ];

                      case 14:
                        return this.Bl.Ra(i), [ 2 /*return*/ , n ];
                    }
                }));
            }));
        }, 
        /**
         * Creates a `Query` object from the specified `Target`. There is no way to
         * obtain the original `Query`, so we synthesize a `Query` from the `Target`
         * object.
         *
         * The synthesized result might be different from the original `Query`, but
         * since the synthesized `Query` should return the same results as the
         * original one (only the presentation of results might differ), the potential
         * difference will not cause issues.
         */
        // PORTING NOTE: Multi-tab only
        t.prototype._d = function(t) {
            return new Bt(t.path, t.collectionGroup, t.orderBy, t.filters, t.limit, "F" /* First */ , t.startAt, t.endAt);
        }, 
        // PORTING NOTE: Multi-tab only
        t.prototype.Oo = function() {
            return this.kf.Oo();
        }, 
        // PORTING NOTE: Multi-tab only
        t.prototype.Oh = function(t, n, i) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var e, r;
                return tslib_es6.__generator(this, (function(u) {
                    switch (u.label) {
                      case 0:
                        if (this.isPrimary) 
                        // If we receive a target state notification via WebStorage, we are
                        // either already secondary or another tab has taken the primary lease.
                        return qn("SyncEngine", "Ignoring unexpected query state notification."), [ 2 /*return*/ ];
                        if (!this.Gl.has(t)) return [ 3 /*break*/ , 7 ];
                        switch (n) {
                          case "current":
                          case "not-current":
                            return [ 3 /*break*/ , 1 ];

                          case "rejected":
                            return [ 3 /*break*/ , 4 ];
                        }
                        return [ 3 /*break*/ , 6 ];

                      case 1:
                        return [ 4 /*yield*/ , this.kf.Lo() ];

                      case 2:
                        return e = u.sent(), r = _n.gi(t, "current" === n), [ 4 /*yield*/ , this.sd(e, r) ];

                      case 3:
                        return u.sent(), [ 3 /*break*/ , 7 ];

                      case 4:
                        return [ 4 /*yield*/ , this.kf.Ao(t, 
                        /* keepPersistedTargetData */ !0) ];

                      case 5:
                        return u.sent(), this.rd(t, i), [ 3 /*break*/ , 7 ];

                      case 6:
                        Gn("Unexpected target state: " + n), u.label = 7;

                      case 7:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        // PORTING NOTE: Multi-tab only
        t.prototype.Fh = function(t, n) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var i, e, r, s, o, h, c, a, f, l = this;
                return tslib_es6.__generator(this, (function(d) {
                    switch (d.label) {
                      case 0:
                        if (!this.isPrimary) return [ 2 /*return*/ ];
                        i = 0, e = t, d.label = 1;

                      case 1:
                        return i < e.length ? (f = e[i], Wn(!this.Gl.has(f), "Trying to add an already active target"), 
                        [ 4 /*yield*/ , this.kf.xo(f) ]) : [ 3 /*break*/ , 6 ];

                      case 2:
                        return Wn(!!(r = d.sent()), "Query data for active target " + f + " not found"), 
                        [ 4 /*yield*/ , this.kf.Eo(r) ];

                      case 3:
                        return s = d.sent(), [ 4 /*yield*/ , this.td(this._d(r), s.targetId, 
                        /*current=*/ !1) ];

                      case 4:
                        d.sent(), this.Nl.listen(s), d.label = 5;

                      case 5:
                        return i++, [ 3 /*break*/ , 1 ];

                      case 6:
                        o = function(t) {
                            return tslib_es6.__generator(this, (function(n) {
                                switch (n.label) {
                                  case 0:
                                    // Check that the target is still active since the target might have been
                                    // removed if it has been rejected by the backend.
                                    return h.Gl.has(t) ? [ 4 /*yield*/ , h.kf.Ao(t, /* keepPersistedTargetData */ !1).then((function() {
                                        l.Nl.nl(t), l.rd(t);
                                    })).catch(pi) ] : [ 2 /*return*/ , "continue" ];

                                    // Release queries that are still active.
                                                                  case 1:
                                    // Release queries that are still active.
                                    return n.sent(), [ 2 /*return*/ ];
                                }
                            }));
                        }, h = this, c = 0, a = n, d.label = 7;

                      case 7:
                        return c < a.length ? (f = a[c], [ 5 /*yield**/ , o(f) ]) : [ 3 /*break*/ , 10 ];

                      case 8:
                        d.sent(), d.label = 9;

                      case 9:
                        return c++, [ 3 /*break*/ , 7 ];

                      case 10:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        // PORTING NOTE: Multi-tab only. In other clients, LocalStore is unaware of
        // the online state.
        t.prototype.enableNetwork = function() {
            return this.kf.jo(!0), this.Nl.enableNetwork();
        }, 
        // PORTING NOTE: Multi-tab only. In other clients, LocalStore is unaware of
        // the online state.
        t.prototype.disableNetwork = function() {
            return this.kf.jo(!1), this.Nl.disableNetwork();
        }, t.prototype.he = function(t) {
            var n = this.Kl.get(t);
            if (n && n.Ll) return wn().add(n.key);
            var i = wn(), e = this.Gl.get(t);
            if (!e) return i;
            for (var r = 0, u = e; r < u.length; r++) {
                var s = u[r], o = this.Ql.get(s);
                Wn(!!o, "No query view found for " + s), i = i.Ft(o.view.Il);
            }
            return i;
        }, t;
    }(), ir = function() {
        this.Id = null, this.targetId = 0, this.listeners = [];
    }, er = /** @class */ function() {
        function t(t) {
            this.Jo = t, this.Td = new ti((function(t) {
                return t.canonicalId();
            })), this.onlineState = "Unknown" /* Unknown */ , this.Ed = new Set, this.Jo.subscribe(this);
        }
        return t.prototype.listen = function(t) {
            var n = t.query, i = !1, e = this.Td.get(n);
            (e || (i = !0, e = new ir, this.Td.set(n, e)), e.listeners.push(t), Wn(!t.Cl(this.onlineState), "applyOnlineStateChange() shouldn't raise an event for brand-new listeners."), 
            e.Id) && (t.Dd(e.Id) && this.Rd());
            return i ? this.Jo.listen(n).then((function(t) {
                return e.targetId = t, t;
            })) : Promise.resolve(e.targetId);
        }, t.prototype.nl = function(t) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var n, i, e, r;
                return tslib_es6.__generator(this, (function(u) {
                    return n = t.query, i = !1, (e = this.Td.get(n)) && (r = e.listeners.indexOf(t)) >= 0 && (e.listeners.splice(r, 1), 
                    i = 0 === e.listeners.length), i ? (this.Td.delete(n), [ 2 /*return*/ , this.Jo.nl(n) ]) : [ 2 /*return*/ ];
                }));
            }));
        }, t.prototype.Ra = function(t) {
            for (var n = !1, i = 0, e = t; i < e.length; i++) {
                var r = e[i], u = r.query, s = this.Td.get(u);
                if (s) {
                    for (var o = 0, h = s.listeners; o < h.length; o++) {
                        h[o].Dd(r) && (n = !0);
                    }
                    s.Id = r;
                }
            }
            n && this.Rd();
        }, t.prototype.vd = function(t, n) {
            var i = this.Td.get(t);
            if (i) for (var e = 0, r = i.listeners; e < r.length; e++) {
                r[e].onError(n);
            }
            // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()
            // after an error.
                    this.Td.delete(t);
        }, t.prototype.od = function(t) {
            this.onlineState = t;
            var n = !1;
            this.Td.forEach((function(i, e) {
                for (var r = 0, u = e.listeners; r < u.length; r++) {
                    // Run global snapshot listeners if a consistent snapshot has been emitted.
                    u[r].Cl(t) && (n = !0);
                }
            })), n && this.Rd();
        }, t.prototype.Sd = function(t) {
            this.Ed.add(t), 
            // Immediately fire an initial event, indicating all existing listeners
            // are in-sync.
            t.next();
        }, t.prototype.Ad = function(t) {
            this.Ed.delete(t);
        }, 
        // Call all global snapshot listeners that have been set.
        t.prototype.Rd = function() {
            this.Ed.forEach((function(t) {
                t.next();
            }));
        }, t;
    }(), rr = /** @class */ function() {
        function t(t, n, i) {
            this.query = t, this.Cd = n, 
            /**
             * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
             * observer. This flag is set to true once we've actually raised an event.
             */
            this.Pd = !1, this.Vd = null, this.onlineState = "Unknown" /* Unknown */ , this.options = i || {};
        }
        /**
         * Applies the new ViewSnapshot to this listener, raising a user-facing event
         * if applicable (depending on what changed, whether the user has opted into
         * metadata-only changes, etc.). Returns true if a user-facing event was
         * indeed raised.
         */    return t.prototype.Dd = function(t) {
            if (Wn(t.docChanges.length > 0 || t.li, "We got a new snapshot with no changes?"), 
            !this.options.includeMetadataChanges) {
                for (
                // Remove the metadata only changes.
                var n = [], i = 0, e = t.docChanges; i < e.length; i++) {
                    var r = e[i];
                    3 /* Metadata */ !== r.type && n.push(r);
                }
                t = new yn(t.query, t.docs, t.ai, n, t.fi, t.fromCache, t.li, 
                /* excludesMetadataChanges= */ !0);
            }
            var u = !1;
            return this.Pd ? this.kd(t) && (this.Cd.next(t), u = !0) : this.Nd(t, this.onlineState) && (this.Od(t), 
            u = !0), this.Vd = t, u;
        }, t.prototype.onError = function(t) {
            this.Cd.error(t);
        }, 
        /** Returns whether a snapshot was raised. */
        t.prototype.Cl = function(t) {
            this.onlineState = t;
            var n = !1;
            return this.Vd && !this.Pd && this.Nd(this.Vd, t) && (this.Od(this.Vd), n = !0), 
            n;
        }, t.prototype.Nd = function(t, n) {
            // Always raise the first event when we're synced
            if (Wn(!this.Pd, "Determining whether to raise first event but already had first event"), 
            !t.fromCache) return !0;
            // NOTE: We consider OnlineState.Unknown as online (it should become Offline
            // or Online if we wait long enough).
                    var i = "Offline" /* Offline */ !== n;
            // Don't raise the event if we're online, aren't synced yet (checked
            // above) and are waiting for a sync.
                    return this.options.Fd && i ? (Wn(t.fromCache, "Waiting for sync, but snapshot is not from cache"), 
            !1) : !t.docs.M() || "Offline" /* Offline */ === n;
            // Raise data from cache if we have any documents or we are offline
            }, t.prototype.kd = function(t) {
            // We don't need to handle includeDocumentMetadataChanges here because
            // the Metadata only changes have already been stripped out if needed.
            // At this point the only changes we will see are the ones we should
            // propagate.
            if (t.docChanges.length > 0) return !0;
            var n = this.Vd && this.Vd.hasPendingWrites !== t.hasPendingWrites;
            return !(!t.li && !n) && !0 === this.options.includeMetadataChanges;
            // Generally we should have hit one of the cases above, but it's possible
            // to get here if there were only metadata docChanges and they got
            // stripped out.
            }, t.prototype.Od = function(t) {
            Wn(!this.Pd, "Trying to raise initial events for second time"), t = yn.vi(t.query, t.docs, t.fi, t.fromCache), 
            this.Pd = !0, this.Cd.next(t);
        }, t;
    }(), ur = /** @class */ function() {
        function t(t, n, i, 
        /**
         * Asynchronous queue responsible for all of our internal processing. When
         * we get incoming work from the user (via public API) or the network
         * (incoming GRPC messages), we should always schedule onto this queue.
         * This ensures all of our work is properly serialized (e.g. we don't
         * start processing a new operation while the previous one is waiting for
         * an async I/O to complete).
         */
        e) {
            this.platform = t, this.Ud = n, this.credentials = i, this.Or = e, this.clientId = zn.pr();
        }
        /**
         * Starts up the FirestoreClient, returning only whether or not enabling
         * persistence succeeded.
         *
         * The intent here is to "do the right thing" as far as users are concerned.
         * Namely, in cases where offline persistence is requested and possible,
         * enable it, but otherwise fall back to persistence disabled. For the most
         * part we expect this to succeed one way or the other so we don't expect our
         * users to actually wait on the firestore.enablePersistence Promise since
         * they generally won't care.
         *
         * Of course some users actually do care about whether or not persistence
         * was successfully enabled, so the Promise returned from this method
         * indicates this outcome.
         *
         * This presents a problem though: even before enablePersistence resolves or
         * rejects, users may have made calls to e.g. firestore.collection() which
         * means that the FirestoreClient in there will be available and will be
         * enqueuing actions on the async queue.
         *
         * Meanwhile any failure of an operation on the async queue causes it to
         * panic and reject any further work, on the premise that unhandled errors
         * are fatal.
         *
         * Consequently the fallback is handled internally here in start, and if the
         * fallback succeeds we signal success to the async queue even though the
         * start() itself signals failure.
         *
         * @param persistenceProvider Provider that returns the persistence
         *    implementation.
         * @param persistenceSettings Settings object to configure offline
         *     persistence.
         * @returns A deferred result indicating the user-visible result of enabling
         *     offline persistence. This method will reject this if IndexedDB fails to
         *     start for any reason. If usePersistence is false this is
         *     unconditionally resolved.
         */    return t.prototype.start = function(t, n) {
            var i = this;
            this.jd();
            // We defer our initialization until we get the current user from
            // setChangeListener(). We block the async queue until we got the initial
            // user and the initialization is completed. This will prevent any scheduled
            // work from happening before initialization is completed.
            // If initializationDone resolved then the FirestoreClient is in a usable
            // state.
            var e = new ei, r = new ei, u = !1;
            // If usePersistence is true, certain classes of errors while starting are
            // recoverable but only by falling back to persistence disabled.
            
            // If there's an error in the first case but not in recovery we cannot
            // reject the promise blocking the async queue because this will cause the
            // async queue to panic.
                    // Return only the result of enabling persistence. Note that this does not
            // need to await the completion of initializationDone because the result of
            // this method should not reflect any other kind of failure to start.
            return this.credentials.v((function(s) {
                u ? i.Or.Qr((function() {
                    return i.ml(s);
                })) : (u = !0, i.xd(t, n, s, r).then((function() {
                    return i.Ld(s);
                })).then(e.resolve, e.reject));
            })), 
            // Block the async queue until initialization is done
            this.Or.Qr((function() {
                return e.promise;
            })), r.promise;
        }, 
        /** Enables the network connection and requeues all pending operations. */
        t.prototype.enableNetwork = function() {
            var t = this;
            return this.jd(), this.Or.enqueue((function() {
                return t.Jo.enableNetwork();
            }));
        }, 
        /**
         * Initializes persistent storage, attempting to use IndexedDB if
         * usePersistence is true or memory-only if false.
         *
         * If IndexedDB fails because it's already open in another tab or because the
         * platform can't possibly support our implementation then this method rejects
         * the persistenceResult and falls back on memory-only persistence.
         *
         * @param persistenceProvider The provider that provides either IndexedDb or
         *     memory-backed persistence
         * @param persistenceSettings Settings object to configure offline persistence
         * @param user The initial user
         * @param persistenceResult A deferred result indicating the user-visible
         *     result of enabling offline persistence. This method will reject this if
         *     IndexedDB fails to start for any reason. If usePersistence is false
         *     this is unconditionally resolved.
         * @returns a Promise indicating whether or not initialization should
         *     continue, i.e. that one of the persistence implementations actually
         *     succeeded.
         */
        t.prototype.xd = function(t, n, i, e) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var r;
                return tslib_es6.__generator(this, (function(u) {
                    switch (u.label) {
                      case 0:
                        return u.trys.push([ 0, 2, , 3 ]), [ 4 /*yield*/ , t.initialize(this.Or, this.Ud, this.platform, this.clientId, i, n) ];

                      case 1:
                        return u.sent(), this.persistence = t.Jc(), this.Md = t.Kc(), this.Ml = t.Hc(), 
                        e.resolve(), [ 3 /*break*/ , 3 ];

                      case 2:
                        // An unknown failure on the first stage shuts everything down.
                        if (r = u.sent(), 
                        // Regardless of whether or not the retry succeeds, from an user
                        // perspective, offline persistence has failed.
                        e.reject(r), !this.qd(r)) throw r;
                        return console.warn("Error enabling offline persistence. Falling back to persistence disabled: " + r), 
                        [ 2 /*return*/ , this.xd(new zi, {
                            zc: !1
                        }, i, e) ];

                      case 3:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Decides whether the provided error allows us to gracefully disable
         * persistence (as opposed to crashing the client).
         */
        t.prototype.qd = function(t) {
            return "FirebaseError" === t.name ? t.code === T.FAILED_PRECONDITION || t.code === T.UNIMPLEMENTED : !("undefined" != typeof DOMException && t instanceof DOMException) || (
            // When the browser is out of quota we could get either quota exceeded
            // or an aborted error depending on whether the error happened during
            // schema migration.
            22 === t.code || 20 === t.code || 
            // Firefox Private Browsing mode disables IndexedDb and returns
            // INVALID_STATE for any usage.
            11 === t.code);
        }, 
        /**
         * Checks that the client has not been terminated. Ensures that other methods on
         * this class cannot be called after the client is terminated.
         */
        t.prototype.jd = function() {
            if (this.Or.Yr) throw new E(T.FAILED_PRECONDITION, "The client has already been terminated.");
        }, 
        /**
         * Initializes the rest of the FirestoreClient, assuming the initial user
         * has been obtained from the credential provider and some persistence
         * implementation is available in this.persistence.
         */
        t.prototype.Ld = function(t) {
            var n = this;
            return qn("FirestoreClient", "Initializing. user=", t.uid), this.platform.Bd(this.Ud).then((function(i) {
                return tslib_es6.__awaiter(n, void 0, void 0, (function() {
                    var n, e, s, o, h, c, a = this;
                    return tslib_es6.__generator(this, (function(f) {
                        switch (f.label) {
                          case 0:
                            return n = new Vi, this.kf = new mi(this.persistence, n, t), [ 4 /*yield*/ , this.kf.start() ];

                          case 1:
                            // PORTING NOTE: LocalStore doesn't need an explicit start() on the Web.
                            return f.sent(), e = this.platform.Qd(), s = this.platform.Gd(this.Ud.ae), o = new Xi(this.Or, i, this.credentials, s), 
                            h = function(t) {
                                return a.Jo.Cl(t, 0 /* RemoteStore */);
                            }, c = function(t) {
                                return a.Jo.Cl(t, 1 /* SharedClientState */);
                            }, this.Nl = new Je(this.kf, o, this.Or, h, e), this.Jo = new nr(this.kf, this.Nl, this.Ml, t, 100), 
                            this.Ml.Ho = c, 
                            // Set up wiring between sync engine and other components
                            this.Nl.Jo = this.Jo, this.Ml.Jo = this.Jo, this.Wd = new er(this.Jo), [ 4 /*yield*/ , this.Ml.start() ];

                          case 2:
                            // PORTING NOTE: LocalStore doesn't need an explicit start() on the Web.
                            return f.sent(), [ 4 /*yield*/ , this.Nl.start() ];

                          case 3:
                            // NOTE: This will immediately call the listener, so we make sure to
                            // set it after localStore / remoteStore are started.
                            return f.sent(), [ 4 /*yield*/ , this.persistence.jc((function(t) {
                                return tslib_es6.__awaiter(a, void 0, void 0, (function() {
                                    return tslib_es6.__generator(this, (function(n) {
                                        switch (n.label) {
                                          case 0:
                                            return [ 4 /*yield*/ , this.Jo.pl(t) ];

                                          case 1:
                                            return n.sent(), t && !this.Md.qu ? this.Md.start(this.kf) : t || this.Md.stop(), 
                                            [ 2 /*return*/ ];
                                        }
                                    }));
                                }));
                            })) ];

                          case 4:
                            // When a user calls clearPersistence() in one client, all other clients
                            // need to be terminated to allow the delete to succeed.
                            // NOTE: This will immediately call the listener, so we make sure to
                            // set it after localStore / remoteStore are started.
                            return f.sent(), [ 4 /*yield*/ , this.persistence.xc((function() {
                                return tslib_es6.__awaiter(a, void 0, void 0, (function() {
                                    return tslib_es6.__generator(this, (function(t) {
                                        switch (t.label) {
                                          case 0:
                                            return [ 4 /*yield*/ , this.terminate() ];

                                          case 1:
                                            return t.sent(), [ 2 /*return*/ ];
                                        }
                                    }));
                                }));
                            })) ];

                          case 5:
                            // When a user calls clearPersistence() in one client, all other clients
                            // need to be terminated to allow the delete to succeed.
                            return f.sent(), [ 2 /*return*/ ];
                        }
                    }));
                }));
            }));
        }, t.prototype.ml = function(t) {
            return this.Or.ru(), qn("FirestoreClient", "Credential Changed. Current user: " + t.uid), 
            this.Jo.ml(t);
        }, 
        /** Disables the network connection. Pending operations will not complete. */
        t.prototype.disableNetwork = function() {
            var t = this;
            return this.jd(), this.Or.enqueue((function() {
                return t.Jo.disableNetwork();
            }));
        }, t.prototype.terminate = function() {
            var t = this;
            return this.Or.nu((function() {
                return tslib_es6.__awaiter(t, void 0, void 0, (function() {
                    return tslib_es6.__generator(this, (function(t) {
                        switch (t.label) {
                          case 0:
                            // PORTING NOTE: LocalStore does not need an explicit shutdown on web.
                            return this.Md.stop(), [ 4 /*yield*/ , this.Nl.shutdown() ];

                          case 1:
                            return t.sent(), [ 4 /*yield*/ , this.Ml.shutdown() ];

                          case 2:
                            return t.sent(), [ 4 /*yield*/ , this.persistence.shutdown() ];

                          case 3:
                            return t.sent(), 
                            // `removeChangeListener` must be called after shutting down the
                            // RemoteStore as it will prevent the RemoteStore from retrieving
                            // auth tokens.
                            this.credentials.m(), [ 2 /*return*/ ];
                        }
                    }));
                }));
            }));
        }, 
        /**
         * Returns a Promise that resolves when all writes that were pending at the time this
         * method was called received server acknowledgement. An acknowledgement can be either acceptance
         * or rejection.
         */
        t.prototype.waitForPendingWrites = function() {
            var t = this;
            this.jd();
            var n = new ei;
            return this.Or.Qr((function() {
                return t.Jo.ld(n);
            })), n.promise;
        }, t.prototype.listen = function(t, n, i) {
            var e = this;
            this.jd();
            var r = new rr(t, n, i);
            return this.Or.Qr((function() {
                return e.Wd.listen(r);
            })), r;
        }, t.prototype.nl = function(t) {
            var n = this;
            // Checks for termination but does not raise error, allowing unlisten after
            // termination to be a no-op.
                    this.zd || this.Or.Qr((function() {
                return n.Wd.nl(t);
            }));
        }, t.prototype.Kd = function(t) {
            var n = this;
            return this.jd(), this.Or.enqueue((function() {
                return n.kf.Io(t);
            })).then((function(t) {
                if (t instanceof xt) return t;
                if (t instanceof Lt) return null;
                throw new E(T.UNAVAILABLE, "Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)");
            }));
        }, t.prototype.Jd = function(t) {
            var n = this;
            return this.jd(), this.Or.enqueue((function() {
                return tslib_es6.__awaiter(n, void 0, void 0, (function() {
                    var n, i, e;
                    return tslib_es6.__generator(this, (function(r) {
                        switch (r.label) {
                          case 0:
                            return [ 4 /*yield*/ , this.kf.Co(t, 
                            /* usePreviousResults= */ !0) ];

                          case 1:
                            return n = r.sent(), i = new Xe(t, n.ko), e = i.Tl(n.documents), [ 2 /*return*/ , i.Is(e, 
                            /* updateLimboDocuments= */ !1).snapshot ];
                        }
                    }));
                }));
            }));
        }, t.prototype.write = function(t) {
            var n = this;
            this.jd();
            var i = new ei;
            return this.Or.Qr((function() {
                return n.Jo.write(t, i);
            })), i.promise;
        }, t.prototype.ae = function() {
            return this.Ud.ae;
        }, t.prototype.Sd = function(t) {
            var n = this;
            this.jd(), this.Or.Qr((function() {
                return n.Wd.Sd(t), Promise.resolve();
            }));
        }, t.prototype.Ad = function(t) {
            // Checks for shutdown but does not raise error, allowing remove after
            // shutdown to be a no-op.
            this.zd || this.Wd.Ad(t);
        }, Object.defineProperty(t.prototype, "zd", {
            get: function() {
                // Technically, the asyncQueue is still running, but only accepting operations
                // related to termination or supposed to be run after termination. It is effectively
                // terminated to the eyes of users.
                return this.Or.Yr;
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.transaction = function(t) {
            var n = this;
            this.jd();
            var i = new ei;
            return this.Or.Qr((function() {
                return n.Jo.runTransaction(n.Or, t, i), Promise.resolve();
            })), i.promise;
        }, t;
    }(), sr = /** @class */ function() {
        function t(t) {
            this.observer = t, 
            /**
             * When set to true, will not raise future events. Necessary to deal with
             * async detachment of listener.
             */
            this.muted = !1;
        }
        return t.prototype.next = function(t) {
            this.Hd(this.observer.next, t);
        }, t.prototype.error = function(t) {
            this.Hd(this.observer.error, t);
        }, t.prototype.Yd = function() {
            this.muted = !0;
        }, t.prototype.Hd = function(t, n) {
            var i = this;
            this.muted || setTimeout((function() {
                i.muted || t(n);
            }), 0);
        }, t;
    }();

    /**
     * TransactionRunner encapsulates the logic needed to run and retry transactions
     * with backoff.
     */
    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function or(t) {
        /**
     * Returns true if obj is an object and contains at least one of the specified
     * methods.
     */
        return function(t, n) {
            if ("object" != typeof t || null === t) return !1;
            for (var i = t, e = 0, r = n; e < r.length; e++) {
                var u = r[e];
                if (u in i && "function" == typeof i[u]) return !0;
            }
            return !1;
        }
        /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
        /**
     * Converts Firestore's internal types to the JavaScript types that we expose
     * to the user.
     */ (t, [ "next", "error", "complete" ]);
    }

    var hr = /** @class */ function() {
        function t(t, n, i, e) {
            this.firestore = t, this.timestampsInSnapshots = n, this.Xd = i, this.converter = e;
        }
        return t.prototype.$d = function(t) {
            switch (tt(t)) {
              case 0 /* NullValue */ :
                return null;

              case 1 /* BooleanValue */ :
                return t.booleanValue;

              case 2 /* NumberValue */ :
                return ht(t.integerValue || t.doubleValue);

              case 3 /* TimestampValue */ :
                return this.Zd(t.timestampValue);

              case 4 /* ServerTimestampValue */ :
                return this.tv(t);

              case 5 /* StringValue */ :
                return t.stringValue;

              case 6 /* BlobValue */ :
                return new Ie(ct(t.bytesValue));

              case 7 /* RefValue */ :
                return this.nv(t.referenceValue);

              case 8 /* GeoPointValue */ :
                return new Ne(t.geoPointValue.latitude, t.geoPointValue.longitude);

              case 9 /* ArrayValue */ :
                return this.iv(t.arrayValue);

              case 10 /* ObjectValue */ :
                return this.ev(t.mapValue);

              default:
                throw Gn("Invalid value type: " + JSON.stringify(t));
            }
        }, t.prototype.ev = function(t) {
            var n = this, i = {};
            return W(t.fields || {}, (function(t, e) {
                i[t] = n.$d(e);
            })), i;
        }, t.prototype.iv = function(t) {
            var n = this;
            return (t.values || []).map((function(t) {
                return n.$d(t);
            }));
        }, t.prototype.tv = function(t) {
            switch (this.Xd) {
              case "previous":
                var n = function t(n) {
                    var i = n.mapValue.fields.__previous_value__;
                    return X(i) ? t(i) : i;
                }(t);
                return null == n ? null : this.$d(n);

              case "estimate":
                return this.Zd($(t));

              default:
                return null;
            }
        }, t.prototype.Zd = function(t) {
            var n = ot(t), i = new V(n.seconds, n.nanos);
            return this.timestampsInSnapshots ? i : i.toDate();
        }, t.prototype.nv = function(t) {
            var n = O.H(t);
            Wn(Un(n), "ReferenceValue is not valid " + t);
            var i = new Xn(n.get(1), n.get(3)), e = new j(n.j(5));
            return i.isEqual(this.firestore.rv) || 
            // TODO(b/64130202): Somehow support foreign references.
            Bn("Document " + e + " contains a document reference within a different database (" + i.projectId + "/" + i.database + ") which is not supported. It will be treated as a reference in the current database (" + this.firestore.rv.projectId + "/" + this.firestore.rv.database + ") instead."), 
            new vr(e, this.firestore, this.converter);
        }, t;
    }(), cr = ai.Nu, ar = /** @class */ function() {
        function t(t) {
            var n, i;
            if (void 0 === t.host) {
                if (void 0 !== t.ssl) throw new E(T.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
                this.host = "firestore.googleapis.com", this.ssl = !0;
            } else ue("settings", "non-empty string", "host", t.host), this.host = t.host, se("settings", "boolean", "ssl", t.ssl), 
            this.ssl = null === (n = t.ssl) || void 0 === n || n;
            if (ve("settings", t, [ "host", "ssl", "credentials", "timestampsInSnapshots", "cacheSizeBytes", "experimentalForceLongPolling" ]), 
            se("settings", "object", "credentials", t.credentials), this.credentials = t.credentials, 
            se("settings", "boolean", "timestampsInSnapshots", t.timestampsInSnapshots), 
            // Nobody should set timestampsInSnapshots anymore, but the error depends on
            // whether they set it to true or false...
            !0 === t.timestampsInSnapshots ? Bn("\n  The timestampsInSnapshots setting now defaults to true and you no\n  longer need to explicitly set it. In a future release, the setting\n  will be removed entirely and so it is recommended that you remove it\n  from your firestore.settings() call now.") : !1 === t.timestampsInSnapshots && Bn("\n  The timestampsInSnapshots setting will soon be removed. YOU MUST UPDATE\n  YOUR CODE.\n\n  To hide this warning, stop using the timestampsInSnapshots setting in your\n  firestore.settings({ ... }) call.\n\n  Once you remove the setting, Timestamps stored in Cloud Firestore will be\n  read back as Firebase Timestamp objects instead of as system Date objects.\n  So you will also need to update code expecting a Date to instead expect a\n  Timestamp. For example:\n\n  // Old:\n  const date = snapshot.get('created_at');\n  // New:\n  const timestamp = snapshot.get('created_at'); const date =\n  timestamp.toDate();\n\n  Please audit all existing usages of Date when you enable the new\n  behavior."), 
            this.timestampsInSnapshots = null === (i = t.timestampsInSnapshots) || void 0 === i || i, 
            se("settings", "number", "cacheSizeBytes", t.cacheSizeBytes), void 0 === t.cacheSizeBytes) this.cacheSizeBytes = ai.Fu; else {
                if (t.cacheSizeBytes !== cr && t.cacheSizeBytes < ai.Ou) throw new E(T.INVALID_ARGUMENT, "cacheSizeBytes must be at least " + ai.Ou);
                this.cacheSizeBytes = t.cacheSizeBytes;
            }
            se("settings", "boolean", "experimentalForceLongPolling", t.experimentalForceLongPolling), 
            this.forceLongPolling = void 0 !== t.experimentalForceLongPolling && t.experimentalForceLongPolling;
        }
        return t.prototype.isEqual = function(t) {
            return this.host === t.host && this.ssl === t.ssl && this.timestampsInSnapshots === t.timestampsInSnapshots && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.forceLongPolling === t.forceLongPolling;
        }, t;
    }(), fr = /** @class */ function() {
        // Note: We are using `MemoryPersistenceProvider` as a default
        // PersistenceProvider to ensure backwards compatibility with the format
        // expected by the console build.
        function t(n, i, e) {
            var s = this;
            if (void 0 === e && (e = new zi), this.uv = null, 
            // Public for use in tests.
            // TODO(mikelehen): Use modularized initialization instead.
            this.sv = new ui, this.INTERNAL = {
                delete: function() {
                    return tslib_es6.__awaiter(s, void 0, void 0, (function() {
                        return tslib_es6.__generator(this, (function(t) {
                            switch (t.label) {
                              case 0:
                                // The client must be initalized to ensure that all subsequent API usage
                                // throws an exception.
                                return this.ov(), [ 4 /*yield*/ , this.hv.terminate() ];

                              case 1:
                                return t.sent(), [ 2 /*return*/ ];
                            }
                        }));
                    }));
                }
            }, "object" == typeof n.options) {
                // This is very likely a Firebase app object
                // TODO(b/34177605): Can we somehow use instanceof?
                var o = n;
                this.uv = o, this.rv = t.cv(o), this.av = o.name, this.fv = new S(i);
            } else {
                var h = n;
                if (!h.projectId) throw new E(T.INVALID_ARGUMENT, "Must provide projectId");
                this.rv = new Xn(h.projectId, h.database), 
                // Use a default persistenceKey that lines up with FirebaseApp.
                this.av = "[DEFAULT]", this.fv = new R;
            }
            this.lv = e, this.dv = new ar({}), this.vv = this.wv(this.rv);
        }
        return t.prototype.settings = function(t) {
            if (Zi("Firestore.settings", arguments, 1), ee("Firestore.settings", "object", 1, t), 
            Sr(t, "persistence")) throw new E(T.INVALID_ARGUMENT, '"persistence" is now specified with a separate call to firestore.enablePersistence().');
            var n = new ar(t);
            if (this.hv && !this.dv.isEqual(n)) throw new E(T.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only call settings() before calling any other methods on a Firestore object.");
            this.dv = n, void 0 !== n.credentials && (this.fv = P(n.credentials));
        }, t.prototype.enableNetwork = function() {
            return this.ov(), this.hv.enableNetwork();
        }, t.prototype.disableNetwork = function() {
            return this.ov(), this.hv.disableNetwork();
        }, t.prototype.enablePersistence = function(t) {
            var n, i;
            if (this.hv) throw new E(T.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only call enablePersistence() before calling any other methods on a Firestore object.");
            var e = !1;
            return t && (void 0 !== t.experimentalTabSynchronization && Bn("The 'experimentalTabSynchronization' setting has been renamed to 'synchronizeTabs'. In a future release, the setting will be removed and it is recommended that you update your firestore.enablePersistence() call to use 'synchronizeTabs'."), 
            e = null !== (i = null !== (n = t.synchronizeTabs) && void 0 !== n ? n : t.experimentalTabSynchronization) && void 0 !== i && i), 
            this.mv(this.lv, {
                zc: !0,
                cacheSizeBytes: this.dv.cacheSizeBytes,
                synchronizeTabs: e
            });
        }, t.prototype.clearPersistence = function() {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var t, n = this;
                return tslib_es6.__generator(this, (function(i) {
                    if (void 0 !== this.hv && !this.hv.zd) throw new E(T.FAILED_PRECONDITION, "Persistence cannot be cleared after this Firestore instance is initialized.");
                    return t = new ei, this.sv.Xr((function() {
                        return tslib_es6.__awaiter(n, void 0, void 0, (function() {
                            var n, i;
                            return tslib_es6.__generator(this, (function(e) {
                                switch (e.label) {
                                  case 0:
                                    return e.trys.push([ 0, 2, , 3 ]), n = this.pv(), [ 4 /*yield*/ , this.lv.clearPersistence(n) ];

                                  case 1:
                                    return e.sent(), t.resolve(), [ 3 /*break*/ , 3 ];

                                  case 2:
                                    return i = e.sent(), t.reject(i), [ 3 /*break*/ , 3 ];

                                  case 3:
                                    return [ 2 /*return*/ ];
                                }
                            }));
                        }));
                    })), [ 2 /*return*/ , t.promise ];
                }));
            }));
        }, t.prototype.terminate = function() {
            return this.app._removeServiceInstance("firestore"), this.INTERNAL.delete();
        }, Object.defineProperty(t.prototype, "bv", {
            get: function() {
                return this.ov(), this.hv.zd;
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.waitForPendingWrites = function() {
            return this.ov(), this.hv.waitForPendingWrites();
        }, t.prototype.onSnapshotsInSync = function(t) {
            if (this.ov(), or(t)) return this.gv(t);
            ee("Firestore.onSnapshotsInSync", "function", 1, t);
            var n = {
                next: t
            };
            return this.gv(n);
        }, t.prototype.gv = function(t) {
            var n = this, i = new sr({
                next: function() {
                    t.next && t.next();
                },
                error: function(t) {
                    throw Gn("Uncaught Error in onSnapshotsInSync");
                }
            });
            return this.hv.Sd(i), function() {
                i.Yd(), n.hv.Ad(i);
            };
        }, t.prototype.ov = function() {
            return this.hv || 
            // Kick off starting the client but don't actually wait for it.
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.mv(new zi, {
                zc: !1
            }), this.hv;
        }, t.prototype.pv = function() {
            return new Yn(this.rv, this.av, this.dv.host, this.dv.ssl, this.dv.forceLongPolling);
        }, t.prototype.mv = function(t, n) {
            Wn(!!this.dv.host, "FirestoreSettings.host is not set"), Wn(!this.hv, "configureClient() called multiple times");
            var i = this.pv();
            return this.hv = new ur(jn.xt(), i, this.fv, this.sv), this.hv.start(t, n);
        }, t.prototype.wv = function(t) {
            var n = new Fn(t, {
                de: jn.xt().de
            });
            return new Me(n, (function(n) {
                if (n instanceof vr) {
                    var i = t, e = n.firestore.rv;
                    if (!e.isEqual(i)) throw new E(T.INVALID_ARGUMENT, "Document reference is for database " + e.projectId + "/" + e.database + " but should be for database " + i.projectId + "/" + i.database);
                    return new Le(t, n.yv);
                }
                return n;
            }));
        }, t.cv = function(t) {
            if (!Sr(t.options, "projectId")) throw new E(T.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
            var n = t.options.projectId;
            if (!n || "string" != typeof n) throw new E(T.INVALID_ARGUMENT, "projectId must be a string in FirebaseApp.options");
            return new Xn(n);
        }, Object.defineProperty(t.prototype, "app", {
            get: function() {
                if (!this.uv) throw new E(T.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
                return this.uv;
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.collection = function(t) {
            return Zi("Firestore.collection", arguments, 1), ee("Firestore.collection", "non-empty string", 1, t), 
            this.ov(), new yr(O.H(t), this);
        }, t.prototype.doc = function(t) {
            return Zi("Firestore.doc", arguments, 1), ee("Firestore.doc", "non-empty string", 1, t), 
            this.ov(), vr._v(O.H(t), this);
        }, t.prototype.collectionGroup = function(t) {
            if (Zi("Firestore.collectionGroup", arguments, 1), ee("Firestore.collectionGroup", "non-empty string", 1, t), 
            t.indexOf("/") >= 0) throw new E(T.INVALID_ARGUMENT, "Invalid collection ID '" + t + "' passed to function Firestore.collectionGroup(). Collection IDs must not contain '/'.");
            return this.ov(), new br(new Bt(O.Y, t), this);
        }, t.prototype.runTransaction = function(t) {
            var n = this;
            return Zi("Firestore.runTransaction", arguments, 1), ee("Firestore.runTransaction", "function", 1, t), 
            this.ov().transaction((function(i) {
                return t(new lr(n, i));
            }));
        }, t.prototype.batch = function() {
            return this.ov(), new dr(this);
        }, Object.defineProperty(t, "logLevel", {
            get: function() {
                switch (Ln()) {
                  case index_esm.LogLevel.DEBUG:
                    return "debug";

                  case index_esm.LogLevel.SILENT:
                    return "silent";

                  default:
                    // The default log level is error
                    return "error";
                }
            },
            enumerable: !0,
            configurable: !0
        }), t.setLogLevel = function(t) {
            switch (Zi("Firestore.setLogLevel", arguments, 1), ee("Firestore.setLogLevel", "non-empty string", 1, t), 
            t) {
              case "debug":
                Mn(index_esm.LogLevel.DEBUG);
                break;

              case "error":
                Mn(index_esm.LogLevel.ERROR);
                break;

              case "silent":
                Mn(index_esm.LogLevel.SILENT);
                break;

              default:
                throw new E(T.INVALID_ARGUMENT, "Invalid log level: " + t);
            }
        }, 
        // Note: this is not a property because the minifier can't work correctly with
        // the way TypeScript compiler outputs properties.
        t.prototype.Iv = function() {
            return this.dv.timestampsInSnapshots;
        }, t;
    }(), lr = /** @class */ function() {
        function t(t, n) {
            this.Tv = t, this.Ev = n;
        }
        return t.prototype.get = function(t) {
            var n = this;
            Zi("Transaction.get", arguments, 1);
            var i = Er("Transaction.get", t, this.Tv);
            return this.Ev.lookup([ i.yv ]).then((function(t) {
                if (!t || 1 !== t.length) return Gn("Mismatch in docs returned from document lookup.");
                var e = t[0];
                if (e instanceof Lt) return new mr(n.Tv, i.yv, null, 
                /* fromCache= */ !1, 
                /* hasPendingWrites= */ !1, i.Dv);
                if (e instanceof xt) return new mr(n.Tv, i.yv, e, 
                /* fromCache= */ !1, 
                /* hasPendingWrites= */ !1, i.Dv);
                throw Gn("BatchGetDocumentsRequest returned unexpected document type: " + e.constructor.name);
            }));
        }, t.prototype.set = function(t, n, i) {
            ne("Transaction.set", arguments, 2, 3);
            var e = Er("Transaction.set", t, this.Tv);
            i = _r("Transaction.set", i);
            var r = Rr(e.Dv, n, "Transaction.set"), u = r[0], s = r[1], o = i.merge || i.mergeFields ? this.Tv.vv.uf(s, u, i.mergeFields) : this.Tv.vv.ef(s, u);
            return this.Ev.set(e.yv, o), this;
        }, t.prototype.update = function(t, n, i) {
            for (var e, r, u = [], s = 3; s < arguments.length; s++) u[s - 3] = arguments[s];
            return "string" == typeof n || n instanceof Ee ? (te("Transaction.update", arguments, 3), 
            e = Er("Transaction.update", t, this.Tv), r = this.Tv.vv.af("Transaction.update", n, i, u)) : (Zi("Transaction.update", arguments, 2), 
            e = Er("Transaction.update", t, this.Tv), r = this.Tv.vv.sf("Transaction.update", n)), 
            this.Ev.update(e.yv, r), this;
        }, t.prototype.delete = function(t) {
            Zi("Transaction.delete", arguments, 1);
            var n = Er("Transaction.delete", t, this.Tv);
            return this.Ev.delete(n.yv), this;
        }, t;
    }(), dr = /** @class */ function() {
        function t(t) {
            this.Tv = t, this.Rv = [], this.Sv = !1;
        }
        return t.prototype.set = function(t, n, i) {
            ne("WriteBatch.set", arguments, 2, 3), this.Av();
            var e = Er("WriteBatch.set", t, this.Tv);
            i = _r("WriteBatch.set", i);
            var r = Rr(e.Dv, n, "WriteBatch.set"), u = r[0], s = r[1], o = i.merge || i.mergeFields ? this.Tv.vv.uf(s, u, i.mergeFields) : this.Tv.vv.ef(s, u);
            return this.Rv = this.Rv.concat(o.Ka(e.yv, At.NONE)), this;
        }, t.prototype.update = function(t, n, i) {
            for (var e, r, u = [], s = 3; s < arguments.length; s++) u[s - 3] = arguments[s];
            return this.Av(), "string" == typeof n || n instanceof Ee ? (te("WriteBatch.update", arguments, 3), 
            e = Er("WriteBatch.update", t, this.Tv), r = this.Tv.vv.af("WriteBatch.update", n, i, u)) : (Zi("WriteBatch.update", arguments, 2), 
            e = Er("WriteBatch.update", t, this.Tv), r = this.Tv.vv.sf("WriteBatch.update", n)), 
            this.Rv = this.Rv.concat(r.Ka(e.yv, At.exists(!0))), this;
        }, t.prototype.delete = function(t) {
            Zi("WriteBatch.delete", arguments, 1), this.Av();
            var n = Er("WriteBatch.delete", t, this.Tv);
            return this.Rv = this.Rv.concat(new Nt(n.yv, At.NONE)), this;
        }, t.prototype.commit = function() {
            return this.Av(), this.Sv = !0, this.Rv.length > 0 ? this.Tv.ov().write(this.Rv) : Promise.resolve();
        }, t.prototype.Av = function() {
            if (this.Sv) throw new E(T.FAILED_PRECONDITION, "A write batch can no longer be used after commit() has been called.");
        }, t;
    }(), vr = /** @class */ function() {
        function t(t, n, i) {
            this.yv = t, this.firestore = n, this.Dv = i, this.hv = this.firestore.ov();
        }
        return t._v = function(n, i, e) {
            if (n.length % 2 != 0) throw new E(T.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but " + n.J() + " has " + n.length);
            return new t(new j(n), i, e);
        }, Object.defineProperty(t.prototype, "id", {
            get: function() {
                return this.yv.path.B();
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(t.prototype, "parent", {
            get: function() {
                return new yr(this.yv.path.L(), this.firestore, this.Dv);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(t.prototype, "path", {
            get: function() {
                return this.yv.path.J();
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.collection = function(t) {
            if (Zi("DocumentReference.collection", arguments, 1), ee("DocumentReference.collection", "non-empty string", 1, t), 
            !t) throw new E(T.INVALID_ARGUMENT, "Must provide a non-empty collection name to collection()");
            var n = O.H(t);
            return new yr(this.yv.path.child(n), this.firestore);
        }, t.prototype.isEqual = function(n) {
            if (!(n instanceof t)) throw we("isEqual", "DocumentReference", 1, n);
            return this.firestore === n.firestore && this.yv.isEqual(n.yv) && this.Dv === n.Dv;
        }, t.prototype.set = function(t, n) {
            ne("DocumentReference.set", arguments, 1, 2), n = _r("DocumentReference.set", n);
            var i = Rr(this.Dv, t, "DocumentReference.set"), e = i[0], r = i[1], u = n.merge || n.mergeFields ? this.firestore.vv.uf(r, e, n.mergeFields) : this.firestore.vv.ef(r, e);
            return this.hv.write(u.Ka(this.yv, At.NONE));
        }, t.prototype.update = function(t, n) {
            for (var i, e = [], r = 2; r < arguments.length; r++) e[r - 2] = arguments[r];
            return "string" == typeof t || t instanceof Ee ? (te("DocumentReference.update", arguments, 2), 
            i = this.firestore.vv.af("DocumentReference.update", t, n, e)) : (Zi("DocumentReference.update", arguments, 1), 
            i = this.firestore.vv.sf("DocumentReference.update", t)), this.hv.write(i.Ka(this.yv, At.exists(!0)));
        }, t.prototype.delete = function() {
            return Zi("DocumentReference.delete", arguments, 0), this.hv.write([ new Nt(this.yv, At.NONE) ]);
        }, t.prototype.onSnapshot = function() {
            for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
            ne("DocumentReference.onSnapshot", arguments, 1, 4);
            var i, e = {
                includeMetadataChanges: !1
            }, r = 0;
            "object" != typeof t[r] || or(t[r]) || (ve("DocumentReference.onSnapshot", e = t[r], [ "includeMetadataChanges" ]), 
            se("DocumentReference.onSnapshot", "boolean", "includeMetadataChanges", e.includeMetadataChanges), 
            r++);
            var u = {
                includeMetadataChanges: e.includeMetadataChanges
            };
            return or(t[r]) ? i = t[r] : (ee("DocumentReference.onSnapshot", "function", r, t[r]), 
            re("DocumentReference.onSnapshot", "function", r + 1, t[r + 1]), re("DocumentReference.onSnapshot", "function", r + 2, t[r + 2]), 
            i = {
                next: t[r],
                error: t[r + 1],
                complete: t[r + 2]
            }), this.Cv(u, i);
        }, t.prototype.Cv = function(t, n) {
            var i = this, e = function(t) {
                console.error("Uncaught Error in onSnapshot:", t);
            };
            n.error && (e = n.error.bind(n));
            var r = new sr({
                next: function(t) {
                    if (n.next) {
                        Wn(t.docs.size <= 1, "Too many documents returned on a document query");
                        var e = t.docs.get(i.yv);
                        n.next(new mr(i.firestore, i.yv, e, t.fromCache, t.hasPendingWrites, i.Dv));
                    }
                },
                error: e
            }), u = this.hv.listen(Bt.Cn(this.yv.path), r, t);
            return function() {
                r.Yd(), i.hv.nl(u);
            };
        }, t.prototype.get = function(t) {
            var n = this;
            return ne("DocumentReference.get", arguments, 0, 1), Tr("DocumentReference.get", t), 
            new Promise((function(i, e) {
                t && "cache" === t.source ? n.firestore.ov().Kd(n.yv).then((function(t) {
                    i(new mr(n.firestore, n.yv, t, 
                    /*fromCache=*/ !0, t instanceof xt && t.nn, n.Dv));
                }), e) : n.Pv(i, e, t);
            }));
        }, t.prototype.Pv = function(t, n, i) {
            var e = this.Cv({
                includeMetadataChanges: !0,
                Fd: !0
            }, {
                next: function(r) {
                    // Remove query first before passing event to user to avoid
                    // user actions affecting the now stale query.
                    e(), !r.exists && r.metadata.fromCache ? 
                    // TODO(dimond): If we're online and the document doesn't
                    // exist then we resolve with a doc.exists set to false. If
                    // we're offline however, we reject the Promise in this
                    // case. Two options: 1) Cache the negative response from
                    // the server so we can deliver that even when you're
                    // offline 2) Actually reject the Promise in the online case
                    // if the document doesn't exist.
                    n(new E(T.UNAVAILABLE, "Failed to get document because the client is offline.")) : r.exists && r.metadata.fromCache && i && "server" === i.source ? n(new E(T.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : t(r);
                },
                error: n
            });
        }, t.prototype.withConverter = function(n) {
            return new t(this.yv, this.firestore, n);
        }, t;
    }(), wr = /** @class */ function() {
        function t(t, n) {
            this.hasPendingWrites = t, this.fromCache = n;
        }
        return t.prototype.isEqual = function(t) {
            return this.hasPendingWrites === t.hasPendingWrites && this.fromCache === t.fromCache;
        }, t;
    }(), mr = /** @class */ function() {
        function t(t, n, i, e, r, u) {
            this.Tv = t, this.yv = n, this.Vv = i, this.kv = e, this.Nv = r, this.Dv = u;
        }
        return t.prototype.data = function(t) {
            if (ne("DocumentSnapshot.data", arguments, 0, 1), t = Ir("DocumentSnapshot.data", t), 
            this.Vv) {
                // We only want to use the converter and create a new DocumentSnapshot
                // if a converter has been provided.
                if (this.Dv) {
                    var n = new pr(this.Tv, this.yv, this.Vv, this.kv, this.Nv);
                    return this.Dv.fromFirestore(n, t);
                }
                var i = new hr(this.Tv, this.Tv.Iv(), t.serverTimestamps, 
                /* converter= */ void 0);
                return i.$d(this.Vv.yn());
            }
        }, t.prototype.get = function(t, n) {
            if (ne("DocumentSnapshot.get", arguments, 1, 2), n = Ir("DocumentSnapshot.get", n), 
            this.Vv) {
                var i = this.Vv.data().field(Qe("DocumentSnapshot.get", t));
                if (null !== i) {
                    var e = new hr(this.Tv, this.Tv.Iv(), n.serverTimestamps, this.Dv);
                    return e.$d(i);
                }
            }
        }, Object.defineProperty(t.prototype, "id", {
            get: function() {
                return this.yv.path.B();
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(t.prototype, "ref", {
            get: function() {
                return new vr(this.yv, this.Tv, this.Dv);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(t.prototype, "exists", {
            get: function() {
                return null !== this.Vv;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(t.prototype, "metadata", {
            get: function() {
                return new wr(this.Nv, this.kv);
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.isEqual = function(n) {
            if (!(n instanceof t)) throw we("isEqual", "DocumentSnapshot", 1, n);
            return this.Tv === n.Tv && this.kv === n.kv && this.yv.isEqual(n.yv) && (null === this.Vv ? null === n.Vv : this.Vv.isEqual(n.Vv)) && this.Dv === n.Dv;
        }, t;
    }(), pr = /** @class */ function(t) {
        function i() {
            return null !== t && t.apply(this, arguments) || this;
        }
        return tslib_es6.__extends(i, t), i.prototype.data = function(n) {
            var i = t.prototype.data.call(this, n);
            return Wn(void 0 !== i, "Document in a QueryDocumentSnapshot should exist"), i;
        }, i;
    }(mr), br = /** @class */ function() {
        function t(t, n, i) {
            this.Ov = t, this.firestore = n, this.Dv = i;
        }
        return t.prototype.where = function(n, i, e) {
            Zi("Query.where", arguments, 3), de("Query.where", 3, e);
            // Enumerated from the WhereFilterOp type in index.d.ts.
            var r, u = [ "<", "<=", "==", ">=", ">", "array-contains", "in", "array-contains-any" ];
            ce("Query.where", u, 2, i);
            var s = Qe("Query.where", n), o = Gt.H(i);
            if (s.$()) {
                if (o === Gt.ARRAY_CONTAINS || o === Gt.ARRAY_CONTAINS_ANY) throw new E(T.INVALID_ARGUMENT, "Invalid Query. You can't perform '" + o.toString() + "' queries on FieldPath.documentId().");
                if (o === Gt.IN) {
                    this.Fv(e, o);
                    for (var h = [], c = 0, a = e; c < a.length; c++) {
                        var f = a[c];
                        h.push(this.Uv(f));
                    }
                    r = {
                        arrayValue: {
                            values: h
                        }
                    };
                } else r = this.Uv(e);
            } else o !== Gt.IN && o !== Gt.ARRAY_CONTAINS_ANY || this.Fv(e, o), r = this.firestore.vv.ff("Query.where", e, 
            // We only allow nested arrays for IN queries.
            /** allowArrays = */ o === Gt.IN);
            var l = Wt.create(s, o, r);
            return this.jv(l), new t(this.Ov.kn(l), this.firestore, this.Dv);
        }, t.prototype.orderBy = function(n, i) {
            var e;
            if (ne("Query.orderBy", arguments, 1, 2), re("Query.orderBy", "non-empty string", 2, i), 
            void 0 === i || "asc" === i) e = Xt.ASCENDING; else {
                if ("desc" !== i) throw new E(T.INVALID_ARGUMENT, "Function Query.orderBy() has unknown direction '" + i + "', expected 'asc' or 'desc'.");
                e = Xt.DESCENDING;
            }
            if (null !== this.Ov.startAt) throw new E(T.INVALID_ARGUMENT, "Invalid query. You must not call Query.startAt() or Query.startAfter() before calling Query.orderBy().");
            if (null !== this.Ov.endAt) throw new E(T.INVALID_ARGUMENT, "Invalid query. You must not call Query.endAt() or Query.endBefore() before calling Query.orderBy().");
            var r = Qe("Query.orderBy", n), u = new Zt(r, e);
            return this.xv(u), new t(this.Ov.On(u), this.firestore, this.Dv);
        }, t.prototype.limit = function(n) {
            return Zi("Query.limit", arguments, 1), ee("Query.limit", "number", 1, n), me("Query.limit", 1, n), 
            new t(this.Ov.Fn(n), this.firestore, this.Dv);
        }, t.prototype.limitToLast = function(n) {
            return Zi("Query.limitToLast", arguments, 1), ee("Query.limitToLast", "number", 1, n), 
            me("Query.limitToLast", 1, n), new t(this.Ov.Un(n), this.firestore, this.Dv);
        }, t.prototype.startAt = function(n) {
            for (var i = [], e = 1; e < arguments.length; e++) i[e - 1] = arguments[e];
            te("Query.startAt", arguments, 1);
            var r = this.Lv("Query.startAt", n, i, 
            /*before=*/ !0);
            return new t(this.Ov.jn(r), this.firestore, this.Dv);
        }, t.prototype.startAfter = function(n) {
            for (var i = [], e = 1; e < arguments.length; e++) i[e - 1] = arguments[e];
            te("Query.startAfter", arguments, 1);
            var r = this.Lv("Query.startAfter", n, i, 
            /*before=*/ !1);
            return new t(this.Ov.jn(r), this.firestore, this.Dv);
        }, t.prototype.endBefore = function(n) {
            for (var i = [], e = 1; e < arguments.length; e++) i[e - 1] = arguments[e];
            te("Query.endBefore", arguments, 1);
            var r = this.Lv("Query.endBefore", n, i, 
            /*before=*/ !0);
            return new t(this.Ov.xn(r), this.firestore, this.Dv);
        }, t.prototype.endAt = function(n) {
            for (var i = [], e = 1; e < arguments.length; e++) i[e - 1] = arguments[e];
            te("Query.endAt", arguments, 1);
            var r = this.Lv("Query.endAt", n, i, 
            /*before=*/ !1);
            return new t(this.Ov.xn(r), this.firestore, this.Dv);
        }, t.prototype.isEqual = function(n) {
            if (!(n instanceof t)) throw we("isEqual", "Query", 1, n);
            return this.firestore === n.firestore && this.Ov.isEqual(n.Ov);
        }, t.prototype.withConverter = function(n) {
            return new t(this.Ov, this.firestore, n);
        }, 
        /** Helper function to create a bound from a document or fields */
        t.prototype.Lv = function(t, n, i, e) {
            if (de(t, 1, n), n instanceof mr) {
                if (i.length > 0) throw new E(T.INVALID_ARGUMENT, "Too many arguments provided to " + t + "().");
                var r = n;
                if (!r.exists) throw new E(T.NOT_FOUND, "Can't use a DocumentSnapshot that doesn't exist for " + t + "().");
                return this.Mv(r.Vv, e);
            }
            var u = [ n ].concat(i);
            return this.qv(t, u, e);
        }, 
        /**
         * Create a Bound from a query and a document.
         *
         * Note that the Bound will always include the key of the document
         * and so only the provided document will compare equal to the returned
         * position.
         *
         * Will throw if the document does not contain all fields of the order by
         * of the query or if any of the fields in the order by are an uncommitted
         * server timestamp.
         */
        t.prototype.Mv = function(t, n) {
            // Because people expect to continue/end a query at the exact document
            // provided, we need to use the implicit sort order rather than the explicit
            // sort order, because it's guaranteed to contain the document key. That way
            // the position becomes unambiguous and the query continues/ends exactly at
            // the provided document. Without the key (by using the explicit sort
            // orders), multiple documents could match the position, yielding duplicate
            // results.
            for (var i = [], e = 0, r = this.Ov.orderBy; e < r.length; e++) {
                var u = r[e];
                if (u.field.$()) i.push(at(this.firestore.rv, t.key)); else {
                    var s = t.field(u.field);
                    if (X(s)) throw new E(T.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field "' + u.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
                    if (null === s) {
                        var o = u.field.J();
                        throw new E(T.INVALID_ARGUMENT, "Invalid query. You are trying to start or end a query using a document for which the field '" + o + "' (used as the orderBy) does not exist.");
                    }
                    i.push(s);
                }
            }
            return new $t(i, n);
        }, 
        /**
         * Converts a list of field values to a Bound for the given query.
         */
        t.prototype.qv = function(t, n, i) {
            // Use explicit order by's because it has to match the query the user made
            var e = this.Ov.En;
            if (n.length > e.length) throw new E(T.INVALID_ARGUMENT, "Too many arguments provided to " + t + "(). The number of arguments must be less than or equal to the number of Query.orderBy() clauses");
            for (var r = [], u = 0; u < n.length; u++) {
                var s = n[u];
                if (e[u].field.$()) {
                    if ("string" != typeof s) throw new E(T.INVALID_ARGUMENT, "Invalid query. Expected a string for document ID in " + t + "(), but got a " + typeof s);
                    if (!this.Ov.Yn() && -1 !== s.indexOf("/")) throw new E(T.INVALID_ARGUMENT, "Invalid query. When querying a collection and ordering by FieldPath.documentId(), the value passed to " + t + "() must be a plain document ID, but '" + s + "' contains a slash.");
                    var o = this.Ov.path.child(O.H(s));
                    if (!j.nt(o)) throw new E(T.INVALID_ARGUMENT, "Invalid query. When querying a collection group and ordering by FieldPath.documentId(), the value passed to " + t + "() must result in a valid document path, but '" + o + "' is not because it contains an odd number of segments.");
                    var h = new j(o);
                    r.push(at(this.firestore.rv, h));
                } else {
                    var c = this.firestore.vv.ff(t, s);
                    r.push(c);
                }
            }
            return new $t(r, i);
        }, t.prototype.onSnapshot = function() {
            for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
            ne("Query.onSnapshot", arguments, 1, 4);
            var i, e = {}, r = 0;
            return "object" != typeof t[r] || or(t[r]) || (ve("Query.onSnapshot", e = t[r], [ "includeMetadataChanges" ]), 
            se("Query.onSnapshot", "boolean", "includeMetadataChanges", e.includeMetadataChanges), 
            r++), or(t[r]) ? i = t[r] : (ee("Query.onSnapshot", "function", r, t[r]), re("Query.onSnapshot", "function", r + 1, t[r + 1]), 
            re("Query.onSnapshot", "function", r + 2, t[r + 2]), i = {
                next: t[r],
                error: t[r + 1],
                complete: t[r + 2]
            }), this.Bv(this.Ov), this.Cv(e, i);
        }, t.prototype.Cv = function(t, n) {
            var i = this, e = function(t) {
                console.error("Uncaught Error in onSnapshot:", t);
            };
            n.error && (e = n.error.bind(n));
            var r = new sr({
                next: function(t) {
                    n.next && n.next(new gr(i.firestore, i.Ov, t, i.Dv));
                },
                error: e
            }), u = this.firestore.ov(), s = u.listen(this.Ov, r, t);
            return function() {
                r.Yd(), u.nl(s);
            };
        }, t.prototype.Bv = function(t) {
            if (t.Jn() && 0 === t.En.length) throw new E(T.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
        }, t.prototype.get = function(t) {
            var n = this;
            return ne("Query.get", arguments, 0, 1), Tr("Query.get", t), this.Bv(this.Ov), new Promise((function(i, e) {
                t && "cache" === t.source ? n.firestore.ov().Jd(n.Ov).then((function(t) {
                    i(new gr(n.firestore, n.Ov, t, n.Dv));
                }), e) : n.Pv(i, e, t);
            }));
        }, t.prototype.Pv = function(t, n, i) {
            var e = this.Cv({
                includeMetadataChanges: !0,
                Fd: !0
            }, {
                next: function(r) {
                    // Remove query first before passing event to user to avoid
                    // user actions affecting the now stale query.
                    e(), r.metadata.fromCache && i && "server" === i.source ? n(new E(T.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')) : t(r);
                },
                error: n
            });
        }, 
        /**
         * Parses the given documentIdValue into a ReferenceValue, throwing
         * appropriate errors if the value is anything other than a DocumentReference
         * or String, or if the string is malformed.
         */
        t.prototype.Uv = function(t) {
            if ("string" == typeof t) {
                if ("" === t) throw new E(T.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");
                if (!this.Ov.Yn() && -1 !== t.indexOf("/")) throw new E(T.INVALID_ARGUMENT, "Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but '" + t + "' contains a '/' character.");
                var n = this.Ov.path.child(O.H(t));
                if (!j.nt(n)) throw new E(T.INVALID_ARGUMENT, "Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, but '" + n + "' is not because it has an odd number of segments (" + n.length + ").");
                return at(this.firestore.rv, new j(n));
            }
            if (t instanceof vr) {
                var i = t;
                return at(this.firestore.rv, i.yv);
            }
            throw new E(T.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: " + le(t) + ".");
        }, 
        /**
         * Validates that the value passed into a disjunctrive filter satisfies all
         * array requirements.
         */
        t.prototype.Fv = function(t, n) {
            if (!Array.isArray(t) || 0 === t.length) throw new E(T.INVALID_ARGUMENT, "Invalid Query. A non-empty array is required for '" + n.toString() + "' filters.");
            if (t.length > 10) throw new E(T.INVALID_ARGUMENT, "Invalid Query. '" + n.toString() + "' filters support a maximum of 10 elements in the value array.");
            if (t.indexOf(null) >= 0) throw new E(T.INVALID_ARGUMENT, "Invalid Query. '" + n.toString() + "' filters cannot contain 'null' in the value array.");
            if (t.filter((function(t) {
                return Number.isNaN(t);
            })).length > 0) throw new E(T.INVALID_ARGUMENT, "Invalid Query. '" + n.toString() + "' filters cannot contain 'NaN' in the value array.");
        }, t.prototype.jv = function(t) {
            if (t instanceof Wt) {
                var n = [ Gt.ARRAY_CONTAINS, Gt.ARRAY_CONTAINS_ANY ], i = [ Gt.IN, Gt.ARRAY_CONTAINS_ANY ], e = n.indexOf(t.op) >= 0, r = i.indexOf(t.op) >= 0;
                if (t.Nn()) {
                    var u = this.Ov.Pn();
                    if (null !== u && !u.isEqual(t.field)) throw new E(T.INVALID_ARGUMENT, "Invalid query. All where filters with an inequality (<, <=, >, or >=) must be on the same field. But you have inequality filters on '" + u.toString() + "' and '" + t.field.toString() + "'");
                    var s = this.Ov.Vn();
                    null !== s && this.Qv(t.field, s);
                } else if (r || e) {
                    // You can have at most 1 disjunctive filter and 1 array filter. Check if
                    // the new filter conflicts with an existing one.
                    var o = null;
                    if (r && (o = this.Ov.Hn(i)), null === o && e && (o = this.Ov.Hn(n)), null != o) 
                    // We special case when it's a duplicate op to give a slightly clearer error message.
                    throw o === t.op ? new E(T.INVALID_ARGUMENT, "Invalid query. You cannot use more than one '" + t.op.toString() + "' filter.") : new E(T.INVALID_ARGUMENT, "Invalid query. You cannot use '" + t.op.toString() + "' filters with '" + o.toString() + "' filters.");
                }
            }
        }, t.prototype.xv = function(t) {
            if (null === this.Ov.Vn()) {
                // This is the first order by. It must match any inequality.
                var n = this.Ov.Pn();
                null !== n && this.Qv(n, t.field);
            }
        }, t.prototype.Qv = function(t, n) {
            if (!n.isEqual(t)) throw new E(T.INVALID_ARGUMENT, "Invalid query. You have a where filter with an inequality (<, <=, >, or >=) on field '" + t.toString() + "' and so you must also use '" + t.toString() + "' as your first Query.orderBy(), but your first Query.orderBy() is on field '" + n.toString() + "' instead.");
        }, t;
    }(), gr = /** @class */ function() {
        function t(t, n, i, e) {
            this.Tv = t, this.Gv = n, this.Wv = i, this.Dv = e, this.zv = null, this.Kv = null, 
            this.metadata = new wr(i.hasPendingWrites, i.fromCache);
        }
        return Object.defineProperty(t.prototype, "docs", {
            get: function() {
                var t = [];
                return this.forEach((function(n) {
                    return t.push(n);
                })), t;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(t.prototype, "empty", {
            get: function() {
                return this.Wv.docs.M();
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(t.prototype, "size", {
            get: function() {
                return this.Wv.docs.size;
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.forEach = function(t, n) {
            var i = this;
            ne("QuerySnapshot.forEach", arguments, 1, 2), ee("QuerySnapshot.forEach", "function", 1, t), 
            this.Wv.docs.forEach((function(e) {
                t.call(n, i.Jv(e));
            }));
        }, Object.defineProperty(t.prototype, "query", {
            get: function() {
                return new br(this.Gv, this.Tv, this.Dv);
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.docChanges = function(t) {
            t && (ve("QuerySnapshot.docChanges", t, [ "includeMetadataChanges" ]), se("QuerySnapshot.docChanges", "boolean", "includeMetadataChanges", t.includeMetadataChanges));
            var n = !(!t || !t.includeMetadataChanges);
            if (n && this.Wv.di) throw new E(T.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
            return this.zv && this.Kv === n || (this.zv = 
            /**
     * Calculates the array of firestore.DocumentChange's for a given ViewSnapshot.
     *
     * Exported for testing.
     */
            function(t, n, i, e) {
                if (i.ai.M()) {
                    // Special case the first snapshot because index calculation is easy and
                    // fast
                    var r, u = 0;
                    return i.docChanges.map((function(n) {
                        var s = new pr(t, n.doc.key, n.doc, i.fromCache, i.fi.has(n.doc.key), e);
                        return Wn(0 /* Added */ === n.type, "Invalid event type for first snapshot"), Wn(!r || i.query.Bn(r, n.doc) < 0, "Got added events in wrong order"), 
                        r = n.doc, {
                            type: "added",
                            doc: s,
                            oldIndex: -1,
                            newIndex: u++
                        };
                    }));
                }
                // A DocumentSet that is updated incrementally as changes are applied to use
                // to lookup the index of a document.
                var s = i.ai;
                return i.docChanges.filter((function(t) {
                    return n || 3 /* Metadata */ !== t.type;
                })).map((function(n) {
                    var r = new pr(t, n.doc.key, n.doc, i.fromCache, i.fi.has(n.doc.key), e), u = -1, o = -1;
                    return 0 /* Added */ !== n.type && (Wn((u = s.indexOf(n.doc.key)) >= 0, "Index for document not found"), 
                    s = s.delete(n.doc.key)), 1 /* Removed */ !== n.type && (o = (s = s.add(n.doc)).indexOf(n.doc.key)), 
                    {
                        type: Dr(n.type),
                        doc: r,
                        oldIndex: u,
                        newIndex: o
                    };
                }));
            }(this.Tv, n, this.Wv, this.Dv), this.Kv = n), this.zv;
        }, 
        /** Check the equality. The call can be very expensive. */
        t.prototype.isEqual = function(n) {
            if (!(n instanceof t)) throw we("isEqual", "QuerySnapshot", 1, n);
            return this.Tv === n.Tv && this.Gv.isEqual(n.Gv) && this.Wv.isEqual(n.Wv) && this.Dv === n.Dv;
        }, t.prototype.Jv = function(t) {
            return new pr(this.Tv, t.key, t, this.metadata.fromCache, this.Wv.fi.has(t.key), this.Dv);
        }, t;
    }();

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // settings() defaults:
    tslib_es6.__spreadArrays([ "length", "forEach", "map" ], "undefined" != typeof Symbol ? [ Symbol.iterator ] : []).forEach((function(t) {
        /**
         * We are (re-)defining properties on QuerySnapshot.prototype.docChanges which
         * is a Function. This could fail, in particular in the case of 'length' which
         * already exists on Function.prototype and on IE11 is improperly defined with
         * `{ configurable: false }`. So we wrap this in a try/catch to ensure that we
         * still have a functional SDK.
         */
        try {
            Object.defineProperty(gr.prototype.docChanges, t, {
                get: function() {
                    // TODO(2018/11/01): As of 2018/04/17 we're changing docChanges from an array
                    // into a method. Because this is a runtime breaking change and somewhat subtle
                    // (both Array and Function have a .length, etc.), we'll replace commonly-used
                    // properties (including Symbol.iterator) to throw a custom error message. In
                    // ~6 months we can delete the custom error as most folks will have hopefully
                    // migrated.
                    return function() {
                        throw new E(T.INVALID_ARGUMENT, 'QuerySnapshot.docChanges has been changed from a property into a method, so usages like "querySnapshot.docChanges" should become "querySnapshot.docChanges()"');
                    }();
                }
            });
        } catch (t) {}
     // Ignore this failure intentionally
    }));

    var yr = /** @class */ function(t) {
        function i(n, i, e) {
            var r = t.call(this, Bt.Cn(n), i, e) || this;
            if (r.Hv = n, n.length % 2 != 1) throw new E(T.INVALID_ARGUMENT, "Invalid collection reference. Collection references must have an odd number of segments, but " + n.J() + " has " + n.length);
            return r;
        }
        return tslib_es6.__extends(i, t), Object.defineProperty(i.prototype, "id", {
            get: function() {
                return this.Ov.path.B();
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "parent", {
            get: function() {
                var t = this.Ov.path.L();
                return t.M() ? null : new vr(new j(t), this.firestore);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(i.prototype, "path", {
            get: function() {
                return this.Ov.path.J();
            },
            enumerable: !0,
            configurable: !0
        }), i.prototype.doc = function(t) {
            if (ne("CollectionReference.doc", arguments, 0, 1), 
            // We allow omission of 'pathString' but explicitly prohibit passing in both
            // 'undefined' and 'null'.
            0 === arguments.length && (t = zn.pr()), ee("CollectionReference.doc", "non-empty string", 1, t), 
            "" === t) throw new E(T.INVALID_ARGUMENT, "Document path must be a non-empty string");
            var n = O.H(t);
            return vr._v(this.Ov.path.child(n), this.firestore, this.Dv);
        }, i.prototype.add = function(t) {
            Zi("CollectionReference.add", arguments, 1);
            var n = this.Dv ? this.Dv.toFirestore(t) : t;
            ee("CollectionReference.add", "object", 1, n);
            var i = this.doc();
            return i.set(t).then((function() {
                return i;
            }));
        }, i.prototype.withConverter = function(t) {
            return new i(this.Hv, this.firestore, t);
        }, i;
    }(br);

    function _r(t, n) {
        if (void 0 === n) return {
            merge: !1
        };
        if (ve(t, n, [ "merge", "mergeFields" ]), se(t, "boolean", "merge", n.merge), oe(t, "mergeFields", "a string or a FieldPath", n.mergeFields, (function(t) {
            return "string" == typeof t || t instanceof Ee;
        })), void 0 !== n.mergeFields && void 0 !== n.merge) throw new E(T.INVALID_ARGUMENT, "Invalid options passed to function " + t + '(): You cannot specify both "merge" and "mergeFields".');
        return n;
    }

    function Ir(t, n) {
        return void 0 === n ? {} : (ve(t, n, [ "serverTimestamps" ]), he(t, 0, "serverTimestamps", n.serverTimestamps, [ "estimate", "previous", "none" ]), 
        n);
    }

    function Tr(t, n) {
        re(t, "object", 1, n), n && (ve(t, n, [ "source" ]), he(t, 0, "source", n.source, [ "default", "server", "cache" ]));
    }

    function Er(t, n, i) {
        if (n instanceof vr) {
            if (n.firestore !== i) throw new E(T.INVALID_ARGUMENT, "Provided document reference is from a different Firestore instance.");
            return n;
        }
        throw we(t, "DocumentReference", 1, n);
    }

    function Dr(t) {
        switch (t) {
          case 0 /* Added */ :
            return "added";

          case 2 /* Modified */ :
          case 3 /* Metadata */ :
            return "modified";

          case 1 /* Removed */ :
            return "removed";

          default:
            return Gn("Unknown change type: " + t);
        }
    }

    /**
     * Converts custom model object of type T into DocumentData by applying the
     * converter if it exists.
     *
     * This function is used when converting user objects to DocumentData
     * because we want to provide the user with a more specific error message if
     * their set() or fails due to invalid data originating from a toFirestore()
     * call.
     */ function Rr(t, n, i) {
        var e;
        return t ? (e = t.toFirestore(n), i = "toFirestore() in " + i) : e = n, [ e, i ];
    }

    function Sr(t, n) {
        return Object.prototype.hasOwnProperty.call(t, n);
    }

    // Export the classes with a private constructor (it will fail if invoked
    // at runtime). Note that this still allows instanceof checks.
    // We're treating the variables as class names, so disable checking for lower
    // case variable names.
    var Ar = ge(fr, "Use firebase.firestore() instead."), Cr = ge(lr, "Use firebase.firestore().runTransaction() instead."), Pr = ge(dr, "Use firebase.firestore().batch() instead."), Vr = ge(vr, "Use firebase.firestore().doc() instead."), kr = ge(mr), Nr = ge(pr), Or = ge(br), Fr = ge(gr), Ur = ge(yr, "Use firebase.firestore().collection() instead."), jr = /** @class */ function() {
        function t(n) {
            this.db = n, 
            // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the
            // bug we're checking for should exist in iOS >= 12.2 and < 13, but for
            // whatever reason it's much harder to hit after 12.2 so we only proactively
            // log on 12.2.
            12.2 === t.Yv(index_cjs.getUA()) && Bn("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
        }
        /**
         * Opens the specified database, creating or upgrading it if necessary.
         *
         * Note that `version` must not be a downgrade. IndexedDB does not support downgrading the schema
         * version. We currently do not support any way to do versioning outside of IndexedDB's versioning
         * mechanism, as only version-upgrade transactions are allowed to do things like create
         * objectstores.
         */    return t.Xv = function(n, i, e) {
            return Wn(t.th(), "IndexedDB not supported in current environment."), qn("SimpleDb", "Opening database:", n), 
            new si((function(r, u) {
                // TODO(mikelehen): Investigate browser compatibility.
                // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB
                // suggests IE9 and older WebKit browsers handle upgrade
                // differently. They expect setVersion, as described here:
                // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion
                var s = window.indexedDB.open(n, i);
                s.onsuccess = function(n) {
                    var i = n.target.result;
                    r(new t(i));
                }, s.onblocked = function() {
                    u(new E(T.FAILED_PRECONDITION, "Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
                }, s.onerror = function(t) {
                    var n = t.target.error;
                    "VersionError" === n.name ? u(new E(T.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")) : u(n);
                }, s.onupgradeneeded = function(t) {
                    qn("SimpleDb", 'Database "' + n + '" requires upgrade from version:', t.oldVersion);
                    var i = t.target.result;
                    e.createOrUpgrade(i, s.transaction, t.oldVersion, su).next((function() {
                        qn("SimpleDb", "Database upgrade to version " + su + " complete");
                    }));
                };
            })).wu();
        }, 
        /** Deletes the specified database. */
        t.delete = function(t) {
            return qn("SimpleDb", "Removing database:", t), qr(window.indexedDB.deleteDatabase(t)).wu();
        }, 
        /** Returns true if IndexedDB is available in the current environment. */
        t.th = function() {
            if ("undefined" == typeof window || null == window.indexedDB) return !1;
            if (t.$v()) return !0;
            // In some Node environments, `window` is defined, but `window.navigator` is
            // not. We don't support IndexedDB persistence in Node if the
            // isMockPersistence() check above returns false.
                    if (void 0 === window.navigator) return !1;
            // We extensively use indexed array values and compound keys,
            // which IE and Edge do not support. However, they still have indexedDB
            // defined on the window, so we need to check for them here and make sure
            // to return that persistence is not enabled for those browsers.
            // For tracking support of this feature, see here:
            // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/
            // Check the UA string to find out the browser.
                    var n = index_cjs.getUA(), i = t.Yv(n), e = 0 < i && i < 10, r = t.Zv(n), u = 0 < r && r < 4.5;
            // IE 10
            // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
            // IE 11
            // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
            // Edge
            // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,
            // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
            // iOS Safari: Disable for users running iOS version < 10.
                    return !(n.indexOf("MSIE ") > 0 || n.indexOf("Trident/") > 0 || n.indexOf("Edge/") > 0 || e || u);
        }, 
        /**
         * Returns true if the backing IndexedDB store is the Node IndexedDBShim
         * (see https://github.com/axemclion/IndexedDBShim).
         */
        t.$v = function() {
            var t;
            return "undefined" != typeof process && "YES" === (null === (t = process.env) || void 0 === t ? void 0 : t.tw);
        }, 
        /** Helper to get a typed SimpleDbStore from a transaction. */
        t.nw = function(t, n) {
            return t.store(n);
        }, 
        // visible for testing
        /** Parse User Agent to determine iOS version. Returns -1 if not found. */
        t.Yv = function(t) {
            var n = t.match(/i(?:phone|pad|pod) os ([\d_]+)/i), i = n ? n[1].split("_").slice(0, 2).join(".") : "-1";
            return Number(i);
        }, 
        // visible for testing
        /** Parse User Agent to determine Android version. Returns -1 if not found. */
        t.Zv = function(t) {
            var n = t.match(/Android ([\d.]+)/i), i = n ? n[1].split(".").slice(0, 2).join(".") : "-1";
            return Number(i);
        }, t.prototype.iw = function(t) {
            this.db.onversionchange = function(n) {
                return t(n);
            };
        }, t.prototype.runTransaction = function(t, n, i) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var e, r, s, o, h;
                return tslib_es6.__generator(this, (function(c) {
                    switch (c.label) {
                      case 0:
                        e = "readonly" === t, r = 0, s = function() {
                            var t, s, h, c;
                            return tslib_es6.__generator(this, (function(u) {
                                switch (u.label) {
                                  case 0:
                                    ++r, t = Lr.open(o.db, e ? "readonly" : "readwrite", n), u.label = 1;

                                  case 1:
                                    // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
                                    // fire), but still return the original transactionFnResult back to the
                                    // caller.
                                    return u.trys.push([ 1, 3, , 4 ]), 
                                    // As noted above, errors are propagated by aborting the transaction. So
                                    // we swallow any error here to avoid the browser logging it as unhandled.
                                    (s = i(t).catch((function(n) {
                                        // We cannot actually recover, and calling `abort()` will cause the transaction's
                                        // completion promise to be rejected. This in turn means that we won't use
                                        // `transactionFnResult` below. We return a rejection here so that we don't add the
                                        // possibility of returning `void` to the type of `transactionFnResult`.
                                        // Abort the transaction if there was an error.
                                        return t.abort(n), si.reject(n);
                                    })).wu()).catch((function() {})), [ 4 /*yield*/ , t.ew ];

                                  case 2:
                                    // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
                                    // fire), but still return the original transactionFnResult back to the
                                    // caller.
                                    return u.sent(), [ 2 /*return*/ , {
                                        value: s
                                    } ];

                                  case 3:
                                    return h = u.sent(), c = "FirebaseError" !== h.name && r < 3, qn("SimpleDb", "Transaction failed with error: %s. Retrying: %s.", h.message, c), 
                                    c ? [ 3 /*break*/ , 4 ] : [ 2 /*return*/ , {
                                        value: Promise.reject(h)
                                    } ];

                                  case 4:
                                    return [ 2 /*return*/ ];
                                }
                            }));
                        }, o = this, c.label = 1;

                      case 1:
                        return [ 5 /*yield**/ , s() ];

                      case 2:
                        return "object" == typeof (h = c.sent()) ? [ 2 /*return*/ , h.value ] : [ 3 /*break*/ , 1 ];

                      case 3:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.close = function() {
            this.db.close();
        }, t;
    }(), xr = /** @class */ function() {
        function t(t) {
            this.rw = t, this.uw = !1, this.sw = null;
        }
        return Object.defineProperty(t.prototype, "fu", {
            get: function() {
                return this.uw;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(t.prototype, "ow", {
            get: function() {
                return this.sw;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(t.prototype, "cursor", {
            set: function(t) {
                this.rw = t;
            },
            enumerable: !0,
            configurable: !0
        }), 
        /**
         * This function can be called to stop iteration at any point.
         */
        t.prototype.done = function() {
            this.uw = !0;
        }, 
        /**
         * This function can be called to skip to that next key, which could be
         * an index or a primary key.
         */
        t.prototype.hw = function(t) {
            this.sw = t;
        }, 
        /**
         * Delete the current cursor value from the object store.
         *
         * NOTE: You CANNOT do this with a keysOnly query.
         */
        t.prototype.delete = function() {
            return qr(this.rw.delete());
        }, t;
    }(), Lr = /** @class */ function() {
        function t(t) {
            var n = this;
            this.transaction = t, this.aborted = !1, 
            /**
             * A promise that resolves with the result of the IndexedDb transaction.
             */
            this.cw = new ei, this.transaction.oncomplete = function() {
                n.cw.resolve();
            }, this.transaction.onabort = function() {
                t.error ? n.cw.reject(t.error) : n.cw.resolve();
            }, this.transaction.onerror = function(t) {
                var i = Qr(t.target.error);
                n.cw.reject(i);
            };
        }
        return t.open = function(n, i, e) {
            return new t(n.transaction(e, i));
        }, Object.defineProperty(t.prototype, "ew", {
            get: function() {
                return this.cw.promise;
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.abort = function(t) {
            t && this.cw.reject(t), this.aborted || (qn("SimpleDb", "Aborting transaction:", t ? t.message : "Client-initiated abort"), 
            this.aborted = !0, this.transaction.abort());
        }, 
        /**
         * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All
         * operations performed on the SimpleDbStore happen within the context of this
         * transaction and it cannot be used anymore once the transaction is
         * completed.
         *
         * Note that we can't actually enforce that the KeyType and ValueType are
         * correct, but they allow type safety through the rest of the consuming code.
         */
        t.prototype.store = function(t) {
            var n = this.transaction.objectStore(t);
            return Wn(!!n, "Object store not part of transaction: " + t), new Mr(n);
        }, t;
    }(), Mr = /** @class */ function() {
        function t(t) {
            this.store = t;
        }
        return t.prototype.put = function(t, n) {
            var i;
            return void 0 !== n ? (qn("SimpleDb", "PUT", this.store.name, t, n), i = this.store.put(n, t)) : (qn("SimpleDb", "PUT", this.store.name, "<auto-key>", t), 
            i = this.store.put(t)), qr(i);
        }, 
        /**
         * Adds a new value into an Object Store and returns the new key. Similar to
         * IndexedDb's `add()`, this method will fail on primary key collisions.
         *
         * @param value The object to write.
         * @return The key of the value to add.
         */
        t.prototype.add = function(t) {
            return qn("SimpleDb", "ADD", this.store.name, t, t), qr(this.store.add(t));
        }, 
        /**
         * Gets the object with the specified key from the specified store, or null
         * if no object exists with the specified key.
         *
         * @key The key of the object to get.
         * @return The object with the specified key or null if no object exists.
         */
        t.prototype.get = function(t) {
            var n = this;
            // We're doing an unsafe cast to ValueType.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return qr(this.store.get(t)).next((function(i) {
                // Normalize nonexistence to null.
                return void 0 === i && (i = null), qn("SimpleDb", "GET", n.store.name, t, i), i;
            }));
        }, t.prototype.delete = function(t) {
            return qn("SimpleDb", "DELETE", this.store.name, t), qr(this.store.delete(t));
        }, 
        /**
         * If we ever need more of the count variants, we can add overloads. For now,
         * all we need is to count everything in a store.
         *
         * Returns the number of rows in the store.
         */
        t.prototype.count = function() {
            return qn("SimpleDb", "COUNT", this.store.name), qr(this.store.count());
        }, t.prototype.aw = function(t, n) {
            var i = this.cursor(this.options(t, n)), e = [];
            return this.fw(i, (function(t, n) {
                e.push(n);
            })).next((function() {
                return e;
            }));
        }, t.prototype.lw = function(t, n) {
            qn("SimpleDb", "DELETE ALL", this.store.name);
            var i = this.options(t, n);
            i.dw = !1;
            var e = this.cursor(i);
            return this.fw(e, (function(t, n, i) {
                // NOTE: Calling delete() on a cursor is documented as more efficient than
                // calling delete() on an object store with a single key
                // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),
                // however, this requires us *not* to use a keysOnly cursor
                // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We
                // may want to compare the performance of each method.
                return i.delete();
            }));
        }, t.prototype.vw = function(t, n) {
            var i;
            n ? i = t : (i = {}, n = t);
            var e = this.cursor(i);
            return this.fw(e, n);
        }, 
        /**
         * Iterates over a store, but waits for the given callback to complete for
         * each entry before iterating the next entry. This allows the callback to do
         * asynchronous work to determine if this iteration should continue.
         *
         * The provided callback should return `true` to continue iteration, and
         * `false` otherwise.
         */
        t.prototype.ww = function(t) {
            var n = this.cursor({});
            return new si((function(i, e) {
                n.onerror = function(t) {
                    var n = Qr(t.target.error);
                    e(n);
                }, n.onsuccess = function(n) {
                    var e = n.target.result;
                    e ? t(e.primaryKey, e.value).next((function(t) {
                        t ? e.continue() : i();
                    })) : i();
                };
            }));
        }, t.prototype.fw = function(t, n) {
            var i = [];
            return new si((function(e, r) {
                t.onerror = function(t) {
                    r(t.target.error);
                }, t.onsuccess = function(t) {
                    var r = t.target.result;
                    if (r) {
                        var u = new xr(r), s = n(r.primaryKey, r.value, u);
                        if (s instanceof si) {
                            var o = s.catch((function(t) {
                                return u.done(), si.reject(t);
                            }));
                            i.push(o);
                        }
                        u.fu ? e() : null === u.ow ? r.continue() : r.continue(u.ow);
                    } else e();
                };
            })).next((function() {
                return si.pu(i);
            }));
        }, t.prototype.options = function(t, n) {
            var i = void 0;
            return void 0 !== t && ("string" == typeof t ? i = t : (Wn(void 0 === n, "3rd argument must not be defined if 2nd is a range."), 
            n = t)), {
                index: i,
                range: n
            };
        }, t.prototype.cursor = function(t) {
            var n = "next";
            if (t.reverse && (n = "prev"), t.index) {
                var i = this.store.index(t.index);
                return t.dw ? i.openKeyCursor(t.range, n) : i.openCursor(t.range, n);
            }
            return this.store.openCursor(t.range, n);
        }, t;
    }();

    /**
     * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror
     * handlers to resolve / reject the PersistencePromise as appropriate.
     */
    function qr(t) {
        return new si((function(n, i) {
            t.onsuccess = function(t) {
                var i = t.target.result;
                n(i);
            }, t.onerror = function(t) {
                var n = Qr(t.target.error);
                i(n);
            };
        }));
    }

    // Guard so we only report the error once.
    var Br = !1;

    function Qr(t) {
        var n = jr.Yv(index_cjs.getUA());
        if (n >= 12.2 && n < 13) {
            var i = "An internal error was encountered in the Indexed Database server";
            if (t.message.indexOf(i) >= 0) {
                // Wrap error in a more descriptive one.
                var e = new E("internal", "IOS_INDEXEDDB_BUG1: IndexedDb has thrown '" + i + "'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
                return Br || (Br = !0, 
                // Throw a global exception outside of this promise chain, for the user to
                // potentially catch.
                setTimeout((function() {
                    throw e;
                }), 0)), e;
            }
        }
        return t;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** A mutation queue for a specific user, backed by IndexedDB. */ var Gr = /** @class */ function() {
        function t(
        /**
         * The normalized userId (e.g. null UID => "" userId) used to store /
         * retrieve mutations.
         */
        t, n, i, e) {
            this.userId = t, this.serializer = n, this.Bh = i, this.Cs = e, 
            /**
             * Caches the document keys for pending mutation batches. If the mutation
             * has been removed from IndexedDb, the cached value may continue to
             * be used to retrieve the batch's document keys. To remove a cached value
             * locally, `removeCachedMutationKeys()` should be invoked either directly
             * or through `removeMutationBatches()`.
             *
             * With multi-tab, when the primary client acknowledges or rejects a mutation,
             * this cache is used by secondary clients to invalidate the local
             * view of the documents that were previously affected by the mutation.
             */
            // PORTING NOTE: Multi-tab only.
            this.mw = {};
        }
        /**
         * Creates a new mutation queue for the given user.
         * @param user The user for which to create a mutation queue.
         * @param serializer The serializer to use when persisting to IndexedDb.
         */    return t.pw = function(n, i, e, r) {
            // TODO(mcg): Figure out what constraints there are on userIDs
            // In particular, are there any reserved characters? are empty ids allowed?
            // For the moment store these together in the same mutations table assuming
            // that empty userIDs aren't allowed.
            return Wn("" !== n.uid, "UserID must not be an empty string."), new t(n.t() ? n.uid : "", i, e, r);
        }, t.prototype.oc = function(t) {
            var n = !0, i = IDBKeyRange.bound([ this.userId, Number.NEGATIVE_INFINITY ], [ this.userId, Number.POSITIVE_INFINITY ]);
            return Kr(t).vw({
                index: fu.userMutationsIndex,
                range: i
            }, (function(t, i, e) {
                n = !1, e.done();
            })).next((function() {
                return n;
            }));
        }, t.prototype.Ys = function(t, n, i) {
            return this.bw(t).next((function(n) {
                // We can't store the resumeToken as a ByteString in IndexedDB, so we
                // convert it to a Base64 string for storage.
                return n.lastStreamToken = i.toBase64(), Hr(t).put(n);
            }));
        }, t.prototype.uo = function(t) {
            return this.bw(t).next((function(t) {
                return K.fromBase64String(t.lastStreamToken);
            }));
        }, t.prototype.so = function(t, n) {
            return this.bw(t).next((function(i) {
                // We can't store the resumeToken as a ByteString in IndexedDB, so we
                // convert it to a Base64 string for storage.
                return i.lastStreamToken = n.toBase64(), Hr(t).put(i);
            }));
        }, t.prototype.Ks = function(t, n, i, e) {
            var r = this, u = Jr(t), s = Kr(t);
            // The IndexedDb implementation in Chrome (and Firefox) does not handle
            // compound indices that include auto-generated keys correctly. To ensure
            // that the index entry is added correctly in all browsers, we perform two
            // writes: The first write is used to retrieve the next auto-generated Batch
            // ID, and the second write populates the index and stores the actual
            // mutation batch.
            // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972
            // We write an empty object to obtain key
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return s.add({}).next((function(o) {
                Wn("number" == typeof o, "Auto-generated key is not a number");
                for (var h = new $n(o, n, i, e), c = r.serializer.gw(r.userId, h), a = [], f = new B((function(t, n) {
                    return Kn(t.J(), n.J());
                })), l = 0, d = e; l < d.length; l++) {
                    var v = d[l], w = lu.key(r.userId, v.key.path, o);
                    f = f.add(v.key.path.L()), a.push(s.put(c)), a.push(u.put(w, lu.PLACEHOLDER));
                }
                return f.forEach((function(n) {
                    a.push(r.Bh.rc(t, n));
                })), t.Lh((function() {
                    r.mw[o] = h.keys();
                })), si.pu(a).next((function() {
                    return h;
                }));
            }));
        }, t.prototype.io = function(t, n) {
            var i = this;
            return Kr(t).get(n).next((function(t) {
                return t ? (Wn(t.userId === i.userId, "Unexpected user '" + t.userId + "' for mutation batch " + n), 
                i.serializer.yw(t)) : null;
            }));
        }, t.prototype.Hs = function(t, n) {
            var i = this;
            return this.mw[n] ? si.resolve(this.mw[n]) : this.io(t, n).next((function(t) {
                if (t) {
                    var e = t.keys();
                    return i.mw[n] = e, e;
                }
                return null;
            }));
        }, t.prototype._o = function(t, n) {
            var i = this, e = n + 1, r = IDBKeyRange.lowerBound([ this.userId, e ]), u = null;
            return Kr(t).vw({
                index: fu.userMutationsIndex,
                range: r
            }, (function(t, n, r) {
                n.userId === i.userId && (Wn(n.batchId >= e, "Should have found mutation after " + e), 
                u = i.serializer.yw(n)), r.done();
            })).next((function() {
                return u;
            }));
        }, t.prototype.ro = function(t) {
            var n = IDBKeyRange.upperBound([ this.userId, Number.POSITIVE_INFINITY ]), i = -1;
            return Kr(t).vw({
                index: fu.userMutationsIndex,
                range: n,
                reverse: !0
            }, (function(t, n, e) {
                i = n.batchId, e.done();
            })).next((function() {
                return i;
            }));
        }, t.prototype.qs = function(t) {
            var n = this, i = IDBKeyRange.bound([ this.userId, -1 ], [ this.userId, Number.POSITIVE_INFINITY ]);
            return Kr(t).aw(fu.userMutationsIndex, i).next((function(t) {
                return t.map((function(t) {
                    return n.serializer.yw(t);
                }));
            }));
        }, t.prototype.Qh = function(t, n) {
            var i = this, e = lu.prefixForPath(this.userId, n.path), r = IDBKeyRange.lowerBound(e), u = [];
            // Scan the document-mutation index starting with a prefix starting with
            // the given documentKey.
                    return Jr(t).vw({
                range: r
            }, (function(e, r, s) {
                var o = e[0], h = e[1], c = e[2], a = Fi(h);
                // Only consider rows matching exactly the specific key of
                // interest. Note that because we order by path first, and we
                // order terminators before path separators, we'll encounter all
                // the index rows for documentKey contiguously. In particular, all
                // the rows for documentKey will occur before any rows for
                // documents nested in a subcollection beneath documentKey so we
                // can stop as soon as we hit any such row.
                            if (o === i.userId && n.path.isEqual(a)) 
                // Look up the mutation batch in the store.
                return Kr(t).get(c).next((function(t) {
                    if (!t) throw Gn("Dangling document-mutation reference found: " + e + " which points to " + c);
                    Wn(t.userId === i.userId, "Unexpected user '" + t.userId + "' for mutation batch " + c), 
                    u.push(i.serializer.yw(t));
                }));
                s.done();
            })).next((function() {
                return u;
            }));
        }, t.prototype.zh = function(t, n) {
            var i = this, e = new B(Kn), r = [];
            return n.forEach((function(n) {
                var u = lu.prefixForPath(i.userId, n.path), s = IDBKeyRange.lowerBound(u), o = Jr(t).vw({
                    range: s
                }, (function(t, r, u) {
                    var s = t[0], o = t[1], h = t[2], c = Fi(o);
                    // Only consider rows matching exactly the specific key of
                    // interest. Note that because we order by path first, and we
                    // order terminators before path separators, we'll encounter all
                    // the index rows for documentKey contiguously. In particular, all
                    // the rows for documentKey will occur before any rows for
                    // documents nested in a subcollection beneath documentKey so we
                    // can stop as soon as we hit any such row.
                                    s === i.userId && n.path.isEqual(c) ? e = e.add(h) : u.done();
                }));
                r.push(o);
            })), si.pu(r).next((function() {
                return i._w(t, e);
            }));
        }, t.prototype.Xh = function(t, n) {
            var i = this;
            Wn(!n.Tn(), "Document queries shouldn't go down this path"), Wn(!n.Yn(), "CollectionGroup queries should be handled in LocalDocumentsView");
            var e = n.path, r = e.length + 1, u = lu.prefixForPath(this.userId, e), s = IDBKeyRange.lowerBound(u), o = new B(Kn);
            return Jr(t).vw({
                range: s
            }, (function(t, n, u) {
                var s = t[0], h = t[1], c = t[2], a = Fi(h);
                s === i.userId && e.G(a) ? 
                // Rows with document keys more than one segment longer than the
                // query path can't be matches. For example, a query on 'rooms'
                // can't match the document /rooms/abc/messages/xyx.
                // TODO(mcg): we'll need a different scanner when we implement
                // ancestor queries.
                a.length === r && (o = o.add(c)) : u.done();
            })).next((function() {
                return i._w(t, o);
            }));
        }, t.prototype._w = function(t, n) {
            var i = this, e = [], r = [];
            // TODO(rockwood): Implement this using iterate.
            return n.forEach((function(n) {
                r.push(Kr(t).get(n).next((function(t) {
                    if (null === t) throw Gn("Dangling document-mutation reference found, which points to " + n);
                    Wn(t.userId === i.userId, "Unexpected user '" + t.userId + "' for mutation batch " + n), 
                    e.push(i.serializer.yw(t));
                })));
            })), si.pu(r).next((function() {
                return e;
            }));
        }, t.prototype.eo = function(t, n) {
            var i = this;
            return zr(t.Iw, this.userId, n).next((function(e) {
                return t.Lh((function() {
                    i.Uo(n.batchId);
                })), si.forEach(e, (function(n) {
                    return i.Cs.lc(t, n);
                }));
            }));
        }, t.prototype.Uo = function(t) {
            delete this.mw[t];
        }, t.prototype.to = function(t) {
            var n = this;
            return this.oc(t).next((function(i) {
                if (!i) return si.resolve();
                // Verify that there are no entries in the documentMutations index if
                // the queue is empty.
                            var e = IDBKeyRange.lowerBound(lu.prefixForUser(n.userId)), r = [];
                return Jr(t).vw({
                    range: e
                }, (function(t, i, e) {
                    if (t[0] === n.userId) {
                        var u = Fi(t[1]);
                        r.push(u);
                    } else e.done();
                })).next((function() {
                    Wn(0 === r.length, "Document leak -- detected dangling mutation references when queue is empty. Dangling keys: " + r.map((function(t) {
                        return t.J();
                    })));
                }));
            }));
        }, t.prototype.fs = function(t, n) {
            return Wr(t, this.userId, n);
        }, 
        // PORTING NOTE: Multi-tab only (state is held in memory in other clients).
        /** Returns the mutation queue's metadata from IndexedDb. */
        t.prototype.bw = function(t) {
            var n = this;
            return Hr(t).get(this.userId).next((function(t) {
                return t || new au(n.userId, -1, 
                /*lastStreamToken=*/ "");
            }));
        }, t;
    }();

    /**
     * @return true if the mutation queue for the given user contains a pending
     *         mutation for the given key.
     */ function Wr(t, n, i) {
        var e = lu.prefixForPath(n, i.path), r = e[1], u = IDBKeyRange.lowerBound(e), s = !1;
        return Jr(t).vw({
            range: u,
            dw: !0
        }, (function(t, i, e) {
            var u = t[0], o = t[1];
            t[2];
            u === n && o === r && (s = !0), e.done();
        })).next((function() {
            return s;
        }));
    }

    /** Returns true if any mutation queue contains the given document. */
    /**
     * Delete a mutation batch and the associated document mutations.
     * @return A PersistencePromise of the document mutations that were removed.
     */
    function zr(t, n, i) {
        var e = t.store(fu.store), r = t.store(lu.store), u = [], s = IDBKeyRange.only(i.batchId), o = 0, h = e.vw({
            range: s
        }, (function(t, n, i) {
            return o++, i.delete();
        }));
        u.push(h.next((function() {
            Wn(1 === o, "Dangling document-mutation reference found: Missing batch " + i.batchId);
        })));
        for (var c = [], a = 0, f = i.mutations; a < f.length; a++) {
            var l = f[a], d = lu.key(n, l.key.path, i.batchId);
            u.push(r.delete(d)), c.push(l.key);
        }
        return si.pu(u).next((function() {
            return c;
        }));
    }

    /**
     * Helper to get a typed SimpleDbStore for the mutations object store.
     */ function Kr(t) {
        return ku.nw(t, fu.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the mutationQueues object store.
     */ function Jr(t) {
        return ku.nw(t, lu.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the mutationQueues object store.
     */ function Hr(t) {
        return ku.nw(t, au.store);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var Yr = /** @class */ function() {
        function t(t, n) {
            this.Cs = t, this.serializer = n, 
            // PORTING NOTE: We don't cache global metadata for the target cache, since
            // some of it (in particular `highestTargetId`) can be modified by secondary
            // tabs. We could perhaps be more granular (and e.g. still cache
            // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go
            // to IndexedDb whenever we need to read metadata. We can revisit if it turns
            // out to have a meaningful performance impact.
            this.Sc = Mi.Ic();
        }
        return t.prototype.Ro = function(t) {
            var n = this;
            return this.Tw(t).next((function(i) {
                return i.highestTargetId = n.Sc.after(i.highestTargetId), n.Ew(t, i).next((function() {
                    return i.highestTargetId;
                }));
            }));
        }, t.prototype.oo = function(t) {
            return this.Tw(t).next((function(t) {
                return k.P(new V(t.lastRemoteSnapshotVersion.seconds, t.lastRemoteSnapshotVersion.nanoseconds));
            }));
        }, t.prototype.Ac = function(t) {
            return Zr(t.Iw);
        }, t.prototype.wo = function(t, n, i) {
            var e = this;
            return this.Tw(t).next((function(r) {
                return r.highestListenSequenceNumber = n, i && (r.lastRemoteSnapshotVersion = i.O()), 
                n > r.highestListenSequenceNumber && (r.highestListenSequenceNumber = n), e.Ew(t, r);
            }));
        }, t.prototype.So = function(t, n) {
            var i = this;
            return this.Cc(t, n).next((function() {
                return i.Tw(t).next((function(e) {
                    return e.targetCount += 1, i.Dw(n, e), i.Ew(t, e);
                }));
            }));
        }, t.prototype.do = function(t, n) {
            return this.Cc(t, n);
        }, t.prototype.Pc = function(t, n) {
            var i = this;
            return this.Vc(t, n.targetId).next((function() {
                return Xr(t).delete(n.targetId);
            })).next((function() {
                return i.Tw(t);
            })).next((function(n) {
                return Wn(n.targetCount > 0, "Removing from an empty target cache"), n.targetCount -= 1, 
                i.Ew(t, n);
            }));
        }, 
        /**
         * Drops any targets with sequence number less than or equal to the upper bound, excepting those
         * present in `activeTargetIds`. Document associations for the removed targets are also removed.
         * Returns the number of targets removed.
         */
        t.prototype.Ju = function(t, n, i) {
            var e = this, r = 0, u = [];
            return Xr(t).vw((function(s, o) {
                var h = e.serializer.Rw(o);
                h.sequenceNumber <= n && null === i.get(h.targetId) && (r++, u.push(e.Pc(t, h)));
            })).next((function() {
                return si.pu(u);
            })).next((function() {
                return r;
            }));
        }, 
        /**
         * Call provided function with each `TargetData` that we have cached.
         */
        t.prototype.$i = function(t, n) {
            var i = this;
            return Xr(t).vw((function(t, e) {
                var r = i.serializer.Rw(e);
                n(r);
            }));
        }, t.prototype.Tw = function(t) {
            return $r(t.Iw);
        }, t.prototype.Ew = function(t, n) {
            return (i = t, ku.nw(i, gu.store)).put(gu.key, n);
            /**
     * Helper to get a typed SimpleDbStore for the target globals object store.
     */
            var i;
        }, t.prototype.Cc = function(t, n) {
            return Xr(t).put(this.serializer.Sw(n));
        }, 
        /**
         * In-place updates the provided metadata to account for values in the given
         * TargetData. Saving is done separately. Returns true if there were any
         * changes to the metadata.
         */
        t.prototype.Dw = function(t, n) {
            var i = !1;
            return t.targetId > n.highestTargetId && (n.highestTargetId = t.targetId, i = !0), 
            t.sequenceNumber > n.highestListenSequenceNumber && (n.highestListenSequenceNumber = t.sequenceNumber, 
            i = !0), i;
        }, t.prototype.kc = function(t) {
            return this.Tw(t).next((function(t) {
                return t.targetCount;
            }));
        }, t.prototype.Do = function(t, n) {
            var i = this, e = n.canonicalId(), r = IDBKeyRange.bound([ e, Number.NEGATIVE_INFINITY ], [ e, Number.POSITIVE_INFINITY ]), u = null;
            // Iterating by the canonicalId may yield more than one result because
            // canonicalId values are not required to be unique per target. This query
            // depends on the queryTargets index to be efficient.
                    return Xr(t).vw({
                range: r,
                index: pu.queryTargetsIndexName
            }, (function(t, e, r) {
                var s = i.serializer.Rw(e);
                // After finding a potential match, check that the target is
                // actually equal to the requested target.
                            n.isEqual(s.target) && (u = s, r.done());
            })).next((function() {
                return u;
            }));
        }, t.prototype.ao = function(t, n, i) {
            var e = this, r = [], u = tu(t);
            // PORTING NOTE: The reverse index (documentsTargets) is maintained by
            // IndexedDb.
                    return n.forEach((function(n) {
                var s = ki(n.path);
                r.push(u.put(new bu(i, s))), r.push(e.Cs.es(t, n));
            })), si.pu(r);
        }, t.prototype.co = function(t, n, i) {
            var e = this, r = tu(t);
            // PORTING NOTE: The reverse index (documentsTargets) is maintained by
            // IndexedDb.
                    return si.forEach(n, (function(n) {
                var u = ki(n.path);
                return si.pu([ r.delete([ i, u ]), e.Cs.us(t, n) ]);
            }));
        }, t.prototype.Vc = function(t, n) {
            var i = tu(t), e = IDBKeyRange.bound([ n ], [ n + 1 ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0);
            return i.delete(e);
        }, t.prototype.Po = function(t, n) {
            var i = IDBKeyRange.bound([ n ], [ n + 1 ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0), e = tu(t), r = wn();
            return e.vw({
                range: i,
                dw: !0
            }, (function(t, n, i) {
                var e = Fi(t[1]), u = new j(e);
                r = r.add(u);
            })).next((function() {
                return r;
            }));
        }, t.prototype.fs = function(t, n) {
            var i = ki(n.path), e = IDBKeyRange.bound([ i ], [ Hn(i) ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0), r = 0;
            return tu(t).vw({
                index: bu.documentTargetsIndex,
                dw: !0,
                range: e
            }, (function(t, n, i) {
                var e = t[0];
                // Having a sentinel row for a document does not count as containing that document;
                // For the target cache, containing the document means the document is part of some
                // target.
                            t[1];
                0 !== e && (r++, i.done());
            })).next((function() {
                return r > 0;
            }));
        }, t.prototype.ce = function(t, n) {
            var i = this;
            return Xr(t).get(n).next((function(t) {
                return t ? i.serializer.Rw(t) : null;
            }));
        }, t;
    }();

    /**
     * Helper to get a typed SimpleDbStore for the queries object store.
     */ function Xr(t) {
        return ku.nw(t, pu.store);
    }

    function $r(t) {
        return jr.nw(t, gu.store).get(gu.key).next((function(t) {
            return Wn(null !== t, "Missing metadata row."), t;
        }));
    }

    function Zr(t) {
        return $r(t).next((function(t) {
            return t.highestListenSequenceNumber;
        }));
    }

    /**
     * Helper to get a typed SimpleDbStore for the document target object store.
     */ function tu(t) {
        return ku.nw(t, bu.store);
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var nu = /** @class */ function() {
        /**
         * @param {LocalSerializer} serializer The document serializer.
         * @param {IndexManager} indexManager The query indexes that need to be maintained.
         */
        function t(t, n) {
            this.serializer = t, this.Bh = n;
        }
        /**
         * Adds the supplied entries to the cache.
         *
         * All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
         */    return t.prototype.ms = function(t, n, i) {
            return eu(t).put(ru(n), i);
        }, 
        /**
         * Removes a document from the cache.
         *
         * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
         */
        t.prototype.bs = function(t, n) {
            var i = eu(t), e = ru(n);
            return i.delete(e);
        }, 
        /**
         * Updates the current cache size.
         *
         * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the
         * cache's metadata.
         */
        t.prototype.updateMetadata = function(t, n) {
            var i = this;
            return this.getMetadata(t).next((function(e) {
                return e.byteSize += n, i.Aw(t, e);
            }));
        }, t.prototype.gs = function(t, n) {
            var i = this;
            return eu(t).get(ru(n)).next((function(t) {
                return i.Cw(t);
            }));
        }, 
        /**
         * Looks up an entry in the cache.
         *
         * @param documentKey The key of the entry to look up.
         * @return The cached MaybeDocument entry and its size, or null if we have nothing cached.
         */
        t.prototype.Pw = function(t, n) {
            var i = this;
            return eu(t).get(ru(n)).next((function(t) {
                var n = i.Cw(t);
                return n ? {
                    vc: n,
                    size: uu(t)
                } : null;
            }));
        }, t.prototype.getEntries = function(t, n) {
            var i = this, e = cn();
            return this.Vw(t, n, (function(t, n) {
                var r = i.Cw(n);
                e = e.ut(t, r);
            })).next((function() {
                return e;
            }));
        }, 
        /**
         * Looks up several entries in the cache.
         *
         * @param documentKeys The set of keys entries to look up.
         * @return A map of MaybeDocuments indexed by key (if a document cannot be
         *     found, the key will be mapped to null) and a map of sizes indexed by
         *     key (zero if the key cannot be found).
         */
        t.prototype.kw = function(t, n) {
            var i = this, e = cn(), r = new x(j.F);
            return this.Vw(t, n, (function(t, n) {
                var u = i.Cw(n);
                u ? (e = e.ut(t, u), r = r.ut(t, uu(n))) : (e = e.ut(t, null), r = r.ut(t, 0));
            })).next((function() {
                return {
                    Nw: e,
                    Ow: r
                };
            }));
        }, t.prototype.Vw = function(t, n, i) {
            if (n.M()) return si.resolve();
            var e = IDBKeyRange.bound(n.first().path.K(), n.last().path.K()), r = n.ft(), u = r.bt();
            return eu(t).vw({
                range: e
            }, (function(t, n, e) {
                // Go through keys not found in cache.
                for (var s = j.rt(t); u && j.F(u, s) < 0; ) i(u, null), u = r.bt();
                u && u.isEqual(s) && (
                // Key found in cache.
                i(u, n), u = r.gt() ? r.bt() : null), 
                // Skip to the next key (if there is one).
                u ? e.hw(u.path.K()) : e.done();
            })).next((function() {
                // The rest of the keys are not in the cache. One case where `iterate`
                // above won't go through them is when the cache is empty.
                for (;u; ) i(u, null), u = r.gt() ? r.bt() : null;
            }));
        }, t.prototype.Vo = function(t, n, i) {
            var e = this;
            Wn(!n.Yn(), "CollectionGroup queries should be handled in LocalDocumentsView");
            var r = fn(), u = n.path.length + 1, s = {};
            if (i.isEqual(k.MIN)) {
                // Documents are ordered by key, so we can use a prefix scan to narrow
                // down the documents we need to match the query against.
                var o = n.path.K();
                s.range = IDBKeyRange.lowerBound(o);
            } else {
                // Execute an index-free query and filter by read time. This is safe
                // since all document changes to queries that have a
                // lastLimboFreeSnapshotVersion (`sinceReadTime`) have a read time set.
                var h = n.path.K(), c = this.serializer.Fw(i);
                s.range = IDBKeyRange.lowerBound([ h, c ], 
                /* open= */ !0), s.index = wu.collectionReadTimeIndex;
            }
            return eu(t).vw(s, (function(t, i, s) {
                // The query is actually returning any path that starts with the query
                // path prefix which may include documents in subcollections. For
                // example, a query on 'rooms' will return rooms/abc/messages/xyx but we
                // shouldn't match it. Fix this by discarding rows with document keys
                // more than one segment longer than the query path.
                if (t.length === u) {
                    var o = e.serializer.Uw(i);
                    n.path.G(o.key.path) ? o instanceof xt && n.matches(o) && (r = r.ut(o.key, o)) : s.done();
                }
            })).next((function() {
                return r;
            }));
        }, t.prototype.Lo = function(t, n) {
            var i = this, e = hn(), r = this.serializer.Fw(n), u = eu(t), s = IDBKeyRange.lowerBound(r, !0);
            return u.vw({
                index: wu.readTimeIndex,
                range: s
            }, (function(t, n) {
                // Unlike `getEntry()` and others, `getNewDocumentChanges()` parses
                // the documents directly since we want to keep sentinel deletes.
                var u = i.serializer.Uw(n);
                e = e.ut(u.key, u), r = n.readTime;
            })).next((function() {
                return {
                    Mo: e,
                    readTime: i.serializer.jw(r)
                };
            }));
        }, t.prototype.qo = function(t) {
            var n = this, i = eu(t), e = k.MIN;
            return i.vw({
                index: wu.readTimeIndex,
                reverse: !0
            }, (function(t, i, r) {
                i.readTime && (e = n.serializer.jw(i.readTime)), r.done();
            })).next((function() {
                return e;
            }));
        }, t.prototype.Xs = function(n) {
            return new t.mc(this, !!n && n.$s);
        }, t.prototype.pc = function(t) {
            return this.getMetadata(t).next((function(t) {
                return t.byteSize;
            }));
        }, t.prototype.getMetadata = function(t) {
            return iu(t).get(mu.key).next((function(t) {
                return Wn(!!t, "Missing document cache metadata"), t;
            }));
        }, t.prototype.Aw = function(t, n) {
            return iu(t).put(mu.key, n);
        }, 
        /**
         * Decodes `remoteDoc` and returns the document (or null, if the document
         * corresponds to the format used for sentinel deletes).
         */
        t.prototype.Cw = function(t) {
            if (t) {
                var n = this.serializer.Uw(t);
                return n instanceof Lt && n.version.isEqual(k.V()) ? null : n;
            }
            return null;
        }, 
        /**
         * Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache.
         *
         * Unlike the MemoryRemoteDocumentChangeBuffer, the IndexedDb implementation computes the size
         * delta for all submitted changes. This avoids having to re-read all documents from IndexedDb
         * when we apply the changes.
         */
        t.mc = /** @class */ function(t) {
            /**
             * @param documentCache The IndexedDbRemoteDocumentCache to apply the changes to.
             * @param trackRemovals Whether to create sentinel deletes that can be tracked by
             * `getNewDocumentChanges()`.
             */
            function i(n, i) {
                var e = t.call(this) || this;
                return e.bc = n, e.$s = i, 
                // A map of document sizes prior to applying the changes in this buffer.
                e.xw = new ti((function(t) {
                    return t.toString();
                })), e;
            }
            return tslib_es6.__extends(i, t), i.prototype.Is = function(t) {
                var n = this, i = [], e = 0, r = new B((function(t, n) {
                    return Kn(t.J(), n.J());
                }));
                return this.ds.forEach((function(u, s) {
                    var o = n.xw.get(u);
                    if (Wn(void 0 !== o, "Cannot modify a document that wasn't read (for " + u + ")"), 
                    s) {
                        Wn(!n.readTime.isEqual(k.MIN), "Cannot add a document with a read time of zero");
                        var h = n.bc.serializer.Lw(s, n.readTime);
                        r = r.add(u.path.L());
                        var c = uu(h);
                        e += c - o, i.push(n.bc.ms(t, u, h));
                    } else if (e -= o, n.$s) {
                        // In order to track removals, we store a "sentinel delete" in the
                        // RemoteDocumentCache. This entry is represented by a NoDocument
                        // with a version of 0 and ignored by `maybeDecodeDocument()` but
                        // preserved in `getNewDocumentChanges()`.
                        var a = n.bc.serializer.Lw(new Lt(u, k.V()), n.readTime);
                        i.push(n.bc.ms(t, u, a));
                    } else i.push(n.bc.bs(t, u));
                })), r.forEach((function(e) {
                    i.push(n.bc.Bh.rc(t, e));
                })), i.push(this.bc.updateMetadata(t, e)), si.pu(i);
            }, i.prototype.ys = function(t, n) {
                var i = this;
                // Record the size of everything we load from the cache so we can compute a delta later.
                            return this.bc.Pw(t, n).next((function(t) {
                    return null === t ? (i.xw.set(n, 0), null) : (i.xw.set(n, t.size), t.vc);
                }));
            }, i.prototype._s = function(t, n) {
                var i = this;
                // Record the size of everything we load from the cache so we can compute
                // a delta later.
                            return this.bc.kw(t, n).next((function(t) {
                    var n = t.Nw;
                    // Note: `getAllFromCache` returns two maps instead of a single map from
                    // keys to `DocumentSizeEntry`s. This is to allow returning the
                    // `NullableMaybeDocumentMap` directly, without a conversion.
                                    return t.Ow.forEach((function(t, n) {
                        i.xw.set(t, n);
                    })), n;
                }));
            }, i;
        }(wi), t;
    }();

    function iu(t) {
        return ku.nw(t, mu.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the remoteDocuments object store.
     */ function eu(t) {
        return ku.nw(t, wu.store);
    }

    function ru(t) {
        return t.path.K();
    }

    /**
     * Retrusn an approximate size for the given document.
     */ function uu(t) {
        var n;
        if (t.document) n = t.document; else if (t.unknownDocument) n = t.unknownDocument; else {
            if (!t.noDocument) throw Gn("Unknown remote document type");
            n = t.noDocument;
        }
        return JSON.stringify(n).length;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Schema Version for the Web client:
     * 1.  Initial version including Mutation Queue, Query Cache, and Remote
     *     Document Cache
     * 2.  Used to ensure a targetGlobal object exists and add targetCount to it. No
     *     longer required because migration 3 unconditionally clears it.
     * 3.  Dropped and re-created Query Cache to deal with cache corruption related
     *     to limbo resolution. Addresses
     *     https://github.com/firebase/firebase-ios-sdk/issues/1548
     * 4.  Multi-Tab Support.
     * 5.  Removal of held write acks.
     * 6.  Create document global for tracking document cache size.
     * 7.  Ensure every cached document has a sentinel row with a sequence number.
     * 8.  Add collection-parent index for Collection Group queries.
     * 9.  Change RemoteDocumentChanges store to be keyed by readTime rather than
     *     an auto-incrementing ID. This is required for Index-Free queries.
     * 10. Rewrite the canonical IDs to the explicit Protobuf-based format.
     */ var su = 10, ou = /** @class */ function() {
        function t(t) {
            this.serializer = t;
        }
        /**
         * Performs database creation and schema upgrades.
         *
         * Note that in production, this method is only ever used to upgrade the schema
         * to SCHEMA_VERSION. Different values of toVersion are only used for testing
         * and local feature development.
         */    return t.prototype.createOrUpgrade = function(t, n, i, e) {
            var r = this;
            Wn(i < e && i >= 0 && e <= su, "Unexpected schema upgrade from v" + i + " to v" + e + ".");
            var u = new Lr(n);
            i < 1 && e >= 1 && (function(t) {
                t.createObjectStore(cu.store);
            }
            /**
     * An object to be stored in the 'mutationQueues' store in IndexedDb.
     *
     * Each user gets a single queue of MutationBatches to apply to the server.
     * DbMutationQueue tracks the metadata about the queue.
     */ (t), function(t) {
                t.createObjectStore(au.store, {
                    keyPath: au.keyPath
                }), t.createObjectStore(fu.store, {
                    keyPath: fu.keyPath,
                    autoIncrement: !0
                }).createIndex(fu.userMutationsIndex, fu.userMutationsKeyPath, {
                    unique: !0
                }), t.createObjectStore(lu.store);
            }
            /**
     * Upgrade function to migrate the 'mutations' store from V1 to V3. Loads
     * and rewrites all data.
     */ (t), _u(t), function(t) {
                t.createObjectStore(wu.store);
            }
            /**
     * Represents the known absence of a document at a particular version.
     * Stored in IndexedDb as part of a DbRemoteDocument object.
     */ (t));
            // Migration 2 to populate the targetGlobal object no longer needed since
            // migration 3 unconditionally clears it.
                    var s = si.resolve();
            return i < 3 && e >= 3 && (
            // Brand new clients don't need to drop and recreate--only clients that
            // potentially have corrupt data.
            0 !== i && (!function(t) {
                t.deleteObjectStore(bu.store), t.deleteObjectStore(pu.store), t.deleteObjectStore(gu.store);
            }(t), _u(t)), s = s.next((function() {
                /**
     * Creates the target global singleton row.
     *
     * @param {IDBTransaction} txn The version upgrade transaction for indexeddb
     */ return function(t) {
                    var n = t.store(gu.store), i = new gu(
                    /*highestTargetId=*/ 0, 
                    /*lastListenSequenceNumber=*/ 0, k.MIN.O(), 
                    /*targetCount=*/ 0);
                    return n.put(gu.key, i);
                }
                /**
     * Creates indices on the RemoteDocuments store used for both multi-tab
     * and Index-Free queries.
     */ (u);
            }))), i < 4 && e >= 4 && (0 !== i && (
            // Schema version 3 uses auto-generated keys to generate globally unique
            // mutation batch IDs (this was previously ensured internally by the
            // client). To migrate to the new schema, we have to read all mutations
            // and write them back out. We preserve the existing batch IDs to guarantee
            // consistency with other object stores. Any further mutation batch IDs will
            // be auto-generated.
            s = s.next((function() {
                return function(t, n) {
                    return n.store(fu.store).aw().next((function(i) {
                        t.deleteObjectStore(fu.store), t.createObjectStore(fu.store, {
                            keyPath: fu.keyPath,
                            autoIncrement: !0
                        }).createIndex(fu.userMutationsIndex, fu.userMutationsKeyPath, {
                            unique: !0
                        });
                        var e = n.store(fu.store), r = i.map((function(t) {
                            return e.put(t);
                        }));
                        return si.pu(r);
                    }));
                }
                /**
     * An object to be stored in the 'documentMutations' store in IndexedDb.
     *
     * A manually maintained index of all the mutation batches that affect a given
     * document key. The rows in this table are references based on the contents of
     * DbMutationBatch.mutations.
     */ (t, u);
            }))), s = s.next((function() {
                !function(t) {
                    t.createObjectStore(Iu.store, {
                        keyPath: Iu.keyPath
                    });
                }
                // Visible for testing
                (t);
            }))), i < 5 && e >= 5 && (s = s.next((function() {
                return r.removeAcknowledgedMutations(u);
            }))), i < 6 && e >= 6 && (s = s.next((function() {
                return function(t) {
                    t.createObjectStore(mu.store);
                }
                /**
     * An object to be stored in the 'targets' store in IndexedDb.
     *
     * This is based on and should be kept in sync with the proto used in the iOS
     * client.
     *
     * Each query the client listens to against the server is tracked on disk so
     * that the query can be efficiently resumed on restart.
     */ (t), r.addDocumentGlobal(u);
            }))), i < 7 && e >= 7 && (s = s.next((function() {
                return r.ensureSequenceNumbers(u);
            }))), i < 8 && e >= 8 && (s = s.next((function() {
                return r.createCollectionParentIndex(t, u);
            }))), i < 9 && e >= 9 && (s = s.next((function() {
                // Multi-Tab used to manage its own changelog, but this has been moved
                // to the DbRemoteDocument object store itself. Since the previous change
                // log only contained transient data, we can drop its object store.
                !function(t) {
                    t.objectStoreNames.contains("remoteDocumentChanges") && t.deleteObjectStore("remoteDocumentChanges");
                }(t), function(t) {
                    var n = t.objectStore(wu.store);
                    n.createIndex(wu.readTimeIndex, wu.readTimeIndexPath, {
                        unique: !1
                    }), n.createIndex(wu.collectionReadTimeIndex, wu.collectionReadTimeIndexPath, {
                        unique: !1
                    });
                }
                /**
     * A record of the metadata state of each client.
     *
     * PORTING NOTE: This is used to synchronize multi-tab state and does not need
     * to be ported to iOS or Android.
     */ (n);
            }))), i < 10 && e >= 10 && (s = s.next((function() {
                return r.rewriteCanonicalIds(u);
            }))), s;
        }, t.prototype.addDocumentGlobal = function(t) {
            var n = 0;
            return t.store(wu.store).vw((function(t, i) {
                n += uu(i);
            })).next((function() {
                var i = new mu(n);
                return t.store(mu.store).put(mu.key, i);
            }));
        }, t.prototype.removeAcknowledgedMutations = function(t) {
            var n = this, i = t.store(au.store), e = t.store(fu.store);
            return i.aw().next((function(i) {
                return si.forEach(i, (function(i) {
                    var r = IDBKeyRange.bound([ i.userId, -1 ], [ i.userId, i.lastAcknowledgedBatchId ]);
                    return e.aw(fu.userMutationsIndex, r).next((function(e) {
                        return si.forEach(e, (function(e) {
                            Wn(e.userId === i.userId, "Cannot process batch " + e.batchId + " from unexpected user");
                            var r = n.serializer.yw(e);
                            return zr(t, i.userId, r).next((function() {}));
                        }));
                    }));
                }));
            }));
        }, 
        /**
         * Ensures that every document in the remote document cache has a corresponding sentinel row
         * with a sequence number. Missing rows are given the most recently used sequence number.
         */
        t.prototype.ensureSequenceNumbers = function(t) {
            var n = t.store(bu.store), i = t.store(wu.store);
            return Zr(t).next((function(t) {
                var e = [];
                return i.vw((function(i, r) {
                    var u = new O(i), s = function(t) {
                        return [ 0, ki(t) ];
                    }
                    /**
     * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.
     */ (u);
                    e.push(n.get(s).next((function(i) {
                        return i ? si.resolve() : function(i) {
                            return n.put(new bu(0, ki(i), t));
                        }(u);
                    })));
                })).next((function() {
                    return si.pu(e);
                }));
            }));
        }, t.prototype.createCollectionParentIndex = function(t, n) {
            // Create the index.
            t.createObjectStore(yu.store, {
                keyPath: yu.keyPath
            });
            var i = n.store(yu.store), e = new ji, r = function(t) {
                if (e.add(t)) {
                    var n = t.B(), r = t.L();
                    return i.put({
                        collectionId: n,
                        parent: ki(r)
                    });
                }
            };
            // Helper to add an index entry iff we haven't already written it.
                    // Index existing remote documents.
            return n.store(wu.store).vw({
                dw: !0
            }, (function(t, n) {
                var i = new O(t);
                return r(i.L());
            })).next((function() {
                // Index existing mutations.
                return n.store(lu.store).vw({
                    dw: !0
                }, (function(t, n) {
                    t[0];
                    var i = t[1], e = (t[2], Fi(i));
                    return r(e.L());
                }));
            }));
        }, t.prototype.rewriteCanonicalIds = function(t) {
            var n = this, i = t.store(pu.store);
            return i.vw((function(t, e) {
                var r = n.serializer.Rw(e), u = n.serializer.Sw(r);
                return i.put(u);
            }));
        }, t;
    }();

    /** Performs database creation and schema upgrades. */ var hu = function(t, n) {
        this.seconds = t, this.nanoseconds = n;
    }, cu = /** @class */ function() {
        function t(t, 
        /** Whether to allow shared access from multiple tabs. */
        n, i) {
            this.ownerId = t, this.allowTabSynchronization = n, this.leaseTimestampMs = i;
        }
        /**
         * Name of the IndexedDb object store.
         *
         * Note that the name 'owner' is chosen to ensure backwards compatibility with
         * older clients that only supported single locked access to the persistence
         * layer.
         */    return t.store = "owner", 
        /**
         * The key string used for the single object that exists in the
         * DbPrimaryClient store.
         */
        t.key = "owner", t;
    }();

    /**
     * A singleton object to be stored in the 'owner' store in IndexedDb.
     *
     * A given database can have a single primary tab assigned at a given time. That
     * tab must validate that it is still holding the primary lease before every
     * operation that requires locked access. The primary tab should regularly
     * write an updated timestamp to this lease to prevent other tabs from
     * "stealing" the primary lease
     */ var au = /** @class */ function() {
        function t(
        /**
         * The normalized user ID to which this queue belongs.
         */
        t, 
        /**
         * An identifier for the highest numbered batch that has been acknowledged
         * by the server. All MutationBatches in this queue with batchIds less
         * than or equal to this value are considered to have been acknowledged by
         * the server.
         *
         * NOTE: this is deprecated and no longer used by the code.
         */
        n, 
        /**
         * A stream token that was previously sent by the server.
         *
         * See StreamingWriteRequest in datastore.proto for more details about
         * usage.
         *
         * After sending this token, earlier tokens may not be used anymore so
         * only a single stream token is retained.
         */
        i) {
            this.userId = t, this.lastAcknowledgedBatchId = n, this.lastStreamToken = i;
        }
        /** Name of the IndexedDb object store.  */    return t.store = "mutationQueues", 
        /** Keys are automatically assigned via the userId property. */
        t.keyPath = "userId", t;
    }(), fu = /** @class */ function() {
        function t(
        /**
         * The normalized user ID to which this batch belongs.
         */
        t, 
        /**
         * An identifier for this batch, allocated using an auto-generated key.
         */
        n, 
        /**
         * The local write time of the batch, stored as milliseconds since the
         * epoch.
         */
        i, 
        /**
         * A list of "mutations" that represent a partial base state from when this
         * write batch was initially created. During local application of the write
         * batch, these baseMutations are applied prior to the real writes in order
         * to override certain document fields from the remote document cache. This
         * is necessary in the case of non-idempotent writes (e.g. `increment()`
         * transforms) to make sure that the local view of the modified documents
         * doesn't flicker if the remote document cache receives the result of the
         * non-idempotent write before the write is removed from the queue.
         *
         * These mutations are never sent to the backend.
         */
        e, 
        /**
         * A list of mutations to apply. All mutations will be applied atomically.
         *
         * Mutations are serialized via JsonProtoSerializer.toMutation().
         */
        r) {
            this.userId = t, this.batchId = n, this.localWriteTimeMs = i, this.baseMutations = e, 
            this.mutations = r;
        }
        /** Name of the IndexedDb object store.  */    return t.store = "mutations", 
        /** Keys are automatically assigned via the userId, batchId properties. */
        t.keyPath = "batchId", 
        /** The index name for lookup of mutations by user. */
        t.userMutationsIndex = "userMutationsIndex", 
        /** The user mutations index is keyed by [userId, batchId] pairs. */
        t.userMutationsKeyPath = [ "userId", "batchId" ], t;
    }();

    /**
     * An object to be stored in the 'mutations' store in IndexedDb.
     *
     * Represents a batch of user-level mutations intended to be sent to the server
     * in a single write. Each user-level batch gets a separate DbMutationBatch
     * with a new batchId.
     */ var lu = /** @class */ function() {
        function t() {}
        /**
         * Creates a [userId] key for use in the DbDocumentMutations index to iterate
         * over all of a user's document mutations.
         */    return t.prefixForUser = function(t) {
            return [ t ];
        }, 
        /**
         * Creates a [userId, encodedPath] key for use in the DbDocumentMutations
         * index to iterate over all at document mutations for a given path or lower.
         */
        t.prefixForPath = function(t, n) {
            return [ t, ki(n) ];
        }, 
        /**
         * Creates a full index key of [userId, encodedPath, batchId] for inserting
         * and deleting into the DbDocumentMutations index.
         */
        t.key = function(t, n, i) {
            return [ t, ki(n), i ];
        }, t.store = "documentMutations", 
        /**
         * Because we store all the useful information for this store in the key,
         * there is no useful information to store as the value. The raw (unencoded)
         * path cannot be stored because IndexedDb doesn't store prototype
         * information.
         */
        t.PLACEHOLDER = new t, t;
    }();

    var du = function(t, n) {
        this.path = t, this.readTime = n;
    }, vu = function(t, n) {
        this.path = t, this.version = n;
    }, wu = /** @class */ function() {
        // TODO: We are currently storing full document keys almost three times
        // (once as part of the primary key, once - partly - as `parentPath` and once
        // inside the encoded documents). During our next migration, we should
        // rewrite the primary key as parentPath + document ID which would allow us
        // to drop one value.
        function t(
        /**
         * Set to an instance of DbUnknownDocument if the data for a document is
         * not known, but it is known that a document exists at the specified
         * version (e.g. it had a successful update applied to it)
         */
        t, 
        /**
         * Set to an instance of a DbNoDocument if it is known that no document
         * exists.
         */
        n, 
        /**
         * Set to an instance of a Document if there's a cached version of the
         * document.
         */
        i, 
        /**
         * Documents that were written to the remote document store based on
         * a write acknowledgment are marked with `hasCommittedMutations`. These
         * documents are potentially inconsistent with the backend's copy and use
         * the write's commit version as their document version.
         */
        e, 
        /**
         * When the document was read from the backend. Undefined for data written
         * prior to schema version 9.
         */
        r, 
        /**
         * The path of the collection this document is part of. Undefined for data
         * written prior to schema version 9.
         */
        u) {
            this.unknownDocument = t, this.noDocument = n, this.document = i, this.hasCommittedMutations = e, 
            this.readTime = r, this.parentPath = u;
        }
        return t.store = "remoteDocuments", 
        /**
         * An index that provides access to all entries sorted by read time (which
         * corresponds to the last modification time of each row).
         *
         * This index is used to provide a changelog for Multi-Tab.
         */
        t.readTimeIndex = "readTimeIndex", t.readTimeIndexPath = "readTime", 
        /**
         * An index that provides access to documents in a collection sorted by read
         * time.
         *
         * This index is used to allow the RemoteDocumentCache to fetch newly changed
         * documents in a collection.
         */
        t.collectionReadTimeIndex = "collectionReadTimeIndex", t.collectionReadTimeIndexPath = [ "parentPath", "readTime" ], 
        t;
    }(), mu = /** @class */ function() {
        /**
         * @param byteSize Approximately the total size in bytes of all the documents in the document
         * cache.
         */
        function t(t) {
            this.byteSize = t;
        }
        return t.store = "remoteDocumentGlobal", t.key = "remoteDocumentGlobalKey", t;
    }();

    /**
     * Represents a document that is known to exist but whose data is unknown.
     * Stored in IndexedDb as part of a DbRemoteDocument object.
     */ var pu = /** @class */ function() {
        function t(
        /**
         * An auto-generated sequential numeric identifier for the query.
         *
         * Queries are stored using their canonicalId as the key, but these
         * canonicalIds can be quite long so we additionally assign a unique
         * queryId which can be used by referenced data structures (e.g.
         * indexes) to minimize the on-disk cost.
         */
        t, 
        /**
         * The canonical string representing this query. This is not unique.
         */
        n, 
        /**
         * The last readTime received from the Watch Service for this query.
         *
         * This is the same value as TargetChange.read_time in the protos.
         */
        i, 
        /**
         * An opaque, server-assigned token that allows watching a query to be
         * resumed after disconnecting without retransmitting all the data
         * that matches the query. The resume token essentially identifies a
         * point in time from which the server should resume sending results.
         *
         * This is related to the snapshotVersion in that the resumeToken
         * effectively also encodes that value, but the resumeToken is opaque
         * and sometimes encodes additional information.
         *
         * A consequence of this is that the resumeToken should be used when
         * asking the server to reason about where this client is in the watch
         * stream, but the client should use the snapshotVersion for its own
         * purposes.
         *
         * This is the same value as TargetChange.resume_token in the protos.
         */
        e, 
        /**
         * A sequence number representing the last time this query was
         * listened to, used for garbage collection purposes.
         *
         * Conventionally this would be a timestamp value, but device-local
         * clocks are unreliable and they must be able to create new listens
         * even while disconnected. Instead this should be a monotonically
         * increasing number that's incremented on each listen call.
         *
         * This is different from the queryId since the queryId is an
         * immutable identifier assigned to the Query on first use while
         * lastListenSequenceNumber is updated every time the query is
         * listened to.
         */
        r, 
        /**
         * Denotes the maximum snapshot version at which the associated query view
         * contained no limbo documents.  Undefined for data written prior to
         * schema version 9.
         */
        u, 
        /**
         * The query for this target.
         *
         * Because canonical ids are not unique we must store the actual query. We
         * use the proto to have an object we can persist without having to
         * duplicate translation logic to and from a `Query` object.
         */
        s) {
            this.targetId = t, this.canonicalId = n, this.readTime = i, this.resumeToken = e, 
            this.lastListenSequenceNumber = r, this.lastLimboFreeSnapshotVersion = u, this.query = s;
        }
        return t.store = "targets", 
        /** Keys are automatically assigned via the targetId property. */
        t.keyPath = "targetId", 
        /** The name of the queryTargets index. */
        t.queryTargetsIndexName = "queryTargetsIndex", 
        /**
         * The index of all canonicalIds to the targets that they match. This is not
         * a unique mapping because canonicalId does not promise a unique name for all
         * possible queries, so we append the targetId to make the mapping unique.
         */
        t.queryTargetsKeyPath = [ "canonicalId", "targetId" ], t;
    }(), bu = /** @class */ function() {
        function t(
        /**
         * The targetId identifying a target or 0 for a sentinel row.
         */
        t, 
        /**
         * The path to the document, as encoded in the key.
         */
        n, 
        /**
         * If this is a sentinel row, this should be the sequence number of the last
         * time the document specified by `path` was used. Otherwise, it should be
         * `undefined`.
         */
        i) {
            this.targetId = t, this.path = n, this.sequenceNumber = i, Wn(0 === t == (void 0 !== i), "A target-document row must either have targetId == 0 and a defined sequence number, or a non-zero targetId and no sequence number");
        }
        /** Name of the IndexedDb object store.  */    return t.store = "targetDocuments", 
        /** Keys are automatically assigned via the targetId, path properties. */
        t.keyPath = [ "targetId", "path" ], 
        /** The index name for the reverse index. */
        t.documentTargetsIndex = "documentTargetsIndex", 
        /** We also need to create the reverse index for these properties. */
        t.documentTargetsKeyPath = [ "path", "targetId" ], t;
    }(), gu = /** @class */ function() {
        function t(
        /**
         * The highest numbered target id across all targets.
         *
         * See DbTarget.targetId.
         */
        t, 
        /**
         * The highest numbered lastListenSequenceNumber across all targets.
         *
         * See DbTarget.lastListenSequenceNumber.
         */
        n, 
        /**
         * A global snapshot version representing the last consistent snapshot we
         * received from the backend. This is monotonically increasing and any
         * snapshots received from the backend prior to this version (e.g. for
         * targets resumed with a resumeToken) should be suppressed (buffered)
         * until the backend has caught up to this snapshot version again. This
         * prevents our cache from ever going backwards in time.
         */
        i, 
        /**
         * The number of targets persisted.
         */
        e) {
            this.highestTargetId = t, this.highestListenSequenceNumber = n, this.lastRemoteSnapshotVersion = i, 
            this.targetCount = e;
        }
        /**
         * The key string used for the single object that exists in the
         * DbTargetGlobal store.
         */    return t.key = "targetGlobalKey", t.store = "targetGlobal", t;
    }(), yu = /** @class */ function() {
        function t(
        /**
         * The collectionId (e.g. 'messages')
         */
        t, 
        /**
         * The path to the parent (either a document location or an empty path for
         * a root-level collection).
         */
        n) {
            this.collectionId = t, this.parent = n;
        }
        /** Name of the IndexedDb object store. */    return t.store = "collectionParents", 
        /** Keys are automatically assigned via the collectionId, parent properties. */
        t.keyPath = [ "collectionId", "parent" ], t;
    }();

    /**
     * An object representing an association between a target and a document, or a
     * sentinel row marking the last sequence number at which a document was used.
     * Each document cached must have a corresponding sentinel row before lru
     * garbage collection is enabled.
     *
     * The target associations and sentinel rows are co-located so that orphaned
     * documents and their sequence numbers can be identified efficiently via a scan
     * of this store.
     */ function _u(t) {
        t.createObjectStore(bu.store, {
            keyPath: bu.keyPath
        }).createIndex(bu.documentTargetsIndex, bu.documentTargetsKeyPath, {
            unique: !0
        }), 
        // NOTE: This is unique only because the TargetId is the suffix.
        t.createObjectStore(pu.store, {
            keyPath: pu.keyPath
        }).createIndex(pu.queryTargetsIndexName, pu.queryTargetsKeyPath, {
            unique: !0
        }), t.createObjectStore(gu.store);
    }

    var Iu = /** @class */ function() {
        function t(
        // Note: Previous schema versions included a field
        // "lastProcessedDocumentChangeId". Don't use anymore.
        /** The auto-generated client id assigned at client startup. */
        t, 
        /** The last time this state was updated. */
        n, 
        /** Whether the client's network connection is enabled. */
        i, 
        /** Whether this client is running in a foreground tab. */
        e) {
            this.clientId = t, this.updateTimeMs = n, this.networkEnabled = i, this.inForeground = e;
        }
        /** Name of the IndexedDb object store. */    return t.store = "clientMetadata", 
        /** Keys are automatically assigned via the clientId properties. */
        t.keyPath = "clientId", t;
    }();

    var Tu = [ au.store, fu.store, lu.store, wu.store, pu.store, cu.store, gu.store, bu.store ], Eu = tslib_es6.__spreadArrays(Tu, [ Iu.store ]), Du = tslib_es6.__spreadArrays(Eu, [ mu.store ]), Ru = tslib_es6.__spreadArrays(Du, [ yu.store ]), Su = /** @class */ function() {
        function t() {
            /**
             * An in-memory copy of the index entries we've already written since the SDK
             * launched. Used to avoid re-writing the same entry repeatedly.
             *
             * This is *NOT* a complete cache of what's in persistence and so can never be used to
             * satisfy reads.
             */
            this.Mw = new ji;
        }
        /**
         * Adds a new entry to the collection parent index.
         *
         * Repeated calls for the same collectionPath should be avoided within a
         * transaction as IndexedDbIndexManager only caches writes once a transaction
         * has been committed.
         */    return t.prototype.rc = function(t, n) {
            var i = this;
            if (Wn(n.length % 2 == 1, "Expected a collection path."), !this.Mw.has(n)) {
                var e = n.B(), r = n.L();
                t.Lh((function() {
                    // Add the collection to the in memory cache only if the transaction was
                    // successfully committed.
                    i.Mw.add(n);
                }));
                var u = {
                    collectionId: e,
                    parent: ki(r)
                };
                return Au(t).put(u);
            }
            return si.resolve();
        }, t.prototype.Yh = function(t, n) {
            var i = [], e = IDBKeyRange.bound([ n, "" ], [ Hn(n), "" ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0);
            return Au(t).aw(e).next((function(t) {
                for (var e = 0, r = t; e < r.length; e++) {
                    var u = r[e];
                    // This collectionId guard shouldn't be necessary (and isn't as long
                    // as we're running in a real browser), but there's a bug in
                    // indexeddbshim that breaks our range in our tests running in node:
                    // https://github.com/axemclion/IndexedDBShim/issues/334
                                    if (u.collectionId !== n) break;
                    i.push(Fi(u.parent));
                }
                return i;
            }));
        }, t;
    }();

    // V2 is no longer usable (see comment at top of file)
    // Visible for testing
    /**
     * Helper to get a typed SimpleDbStore for the collectionParents
     * document store.
     */
    function Au(t) {
        return ku.nw(t, yu.store);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Serializer for values stored in the LocalStore. */ var Cu = /** @class */ function() {
        function t(t) {
            this.qw = t;
        }
        /** Decodes a remote document from storage locally to a Document. */    return t.prototype.Uw = function(t) {
            if (t.document) return this.qw.Ae(t.document, !!t.hasCommittedMutations);
            if (t.noDocument) {
                var n = j.rt(t.noDocument.path), i = this.Bw(t.noDocument.readTime);
                return new Lt(n, i, {
                    hasCommittedMutations: !!t.hasCommittedMutations
                });
            }
            if (t.unknownDocument) {
                n = j.rt(t.unknownDocument.path), i = this.Bw(t.unknownDocument.version);
                return new Mt(n, i);
            }
            return Gn("Unexpected DbRemoteDocument");
        }, 
        /** Encodes a document for storage locally. */
        t.prototype.Lw = function(t, n) {
            var i = this.Fw(n), e = t.key.path.L().K();
            if (t instanceof xt) {
                var r = this.qw.Se(t), u = t.hasCommittedMutations;
                return new wu(
                /* unknownDocument= */ null, 
                /* noDocument= */ null, r, u, i, e);
            }
            if (t instanceof Lt) {
                var s = t.key.path.K(), o = this.Qw(t.version);
                u = t.hasCommittedMutations;
                return new wu(
                /* unknownDocument= */ null, new du(s, o), 
                /* document= */ null, u, i, e);
            }
            if (t instanceof Mt) {
                s = t.key.path.K();
                var h = this.Qw(t.version);
                return new wu(new vu(s, h), 
                /* noDocument= */ null, 
                /* document= */ null, 
                /* hasCommittedMutations= */ !0, i, e);
            }
            return Gn("Unexpected MaybeDocument");
        }, t.prototype.Fw = function(t) {
            var n = t.O();
            return [ n.seconds, n.nanoseconds ];
        }, t.prototype.jw = function(t) {
            var n = new V(t[0], t[1]);
            return k.P(n);
        }, t.prototype.Qw = function(t) {
            var n = t.O();
            return new hu(n.seconds, n.nanoseconds);
        }, t.prototype.Bw = function(t) {
            var n = new V(t.seconds, t.nanoseconds);
            return k.P(n);
        }, 
        /** Encodes a batch of mutations into a DbMutationBatch for local storage. */
        t.prototype.gw = function(t, n) {
            var i = this, e = n.baseMutations.map((function(t) {
                return i.qw.Fe(t);
            })), r = n.mutations.map((function(t) {
                return i.qw.Fe(t);
            }));
            return new fu(t, n.batchId, n.gr.toMillis(), e, r);
        }, 
        /** Decodes a DbMutationBatch into a MutationBatch */
        t.prototype.yw = function(t) {
            var n = this, i = (t.baseMutations || []).map((function(t) {
                return n.qw.Le(t);
            })), e = t.mutations.map((function(t) {
                return n.qw.Le(t);
            })), r = V.fromMillis(t.localWriteTimeMs);
            return new $n(t.batchId, r, i, e);
        }, 
        /*
         * Encodes a set of document keys into an array of EncodedResourcePaths.
         */
        t.prototype.Gw = function(t) {
            var n = [];
            return t.forEach((function(t) {
                n.push(ki(t.path));
            })), n;
        }, 
        /** Decodes an array of EncodedResourcePaths into a set of document keys. */
        t.prototype.Ww = function(t) {
            for (var n = wn(), i = 0, e = t; i < e.length; i++) {
                var r = e[i];
                n = n.add(new j(Fi(r)));
            }
            return n;
        }, 
        /** Decodes a DbTarget into TargetData */
        t.prototype.Rw = function(t) {
            var n, i = this.Bw(t.readTime), e = void 0 !== t.lastLimboFreeSnapshotVersion ? this.Bw(t.lastLimboFreeSnapshotVersion) : k.MIN;
            return n = void 0 !== t.query.documents ? this.qw.ze(t.query) : this.qw.Xe(t.query), 
            new en(n, t.targetId, 0 /* Listen */ , t.lastListenSequenceNumber, i, e, K.fromBase64String(t.resumeToken));
        }, 
        /** Encodes TargetData into a DbTarget for storage locally. */
        t.prototype.Sw = function(t) {
            Wn(0 /* Listen */ === t.ti, "Only queries with purpose 0 may be stored, got " + t.ti);
            var n, i = this.Qw(t.ni), e = this.Qw(t.lastLimboFreeSnapshotVersion);
            n = t.target.Tn() ? this.qw.We(t.target) : this.qw.Ke(t.target);
            // We can't store the resumeToken as a ByteString in IndexedDb, so we
            // convert it to a base64 string for storage.
                    var r = t.resumeToken.toBase64();
            // lastListenSequenceNumber is always 0 until we do real GC.
                    return new pu(t.targetId, t.target.canonicalId(), i, r, t.sequenceNumber, e, n);
        }, t;
    }();

    /**
     * A helper function for figuring out what kind of query has been stored.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var Pu = "Another tab has exclusive access to the persistence layer. To allow shared access, make sure to invoke `enablePersistence()` with `synchronizeTabs:true` in all tabs.", Vu = /** @class */ function(t) {
        function i(n, i) {
            var e = t.call(this) || this;
            return e.Iw = n, e.fo = i, e;
        }
        return tslib_es6.__extends(i, t), i;
    }(Ci), ku = /** @class */ function() {
        function t(n, i, e, r, u, s, o, h) {
            if (this.allowTabSynchronization = n, this.persistenceKey = i, this.clientId = e, 
            this.zo = s, this.zw = h, this.Fc = !1, this.isPrimary = !1, this.networkEnabled = !0, 
            /** Our window.unload handler, if registered. */
            this.Kw = null, this.inForeground = !1, 
            /** Our 'visibilitychange' listener if registered. */
            this.Jw = null, 
            /** The client metadata refresh task. */
            this.Hw = null, 
            /** The last time we garbage collected the client metadata object store. */
            this.Yw = Number.NEGATIVE_INFINITY, 
            /** A listener to notify on primary state changes. */
            this.Xw = function(t) {
                return Promise.resolve();
            }, this.Cs = new Fu(this, u), this.$w = i + t.Zw, this.serializer = new Cu(o), this.document = r.document, 
            this.Os = new Yr(this.Cs, this.serializer), this.Bh = new Su, this.qh = new nu(this.serializer, this.Bh), 
            !r.window || !r.window.localStorage) throw new E(T.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
            this.window = r.window, this.tm = this.window.localStorage;
        }
        return t.nw = function(t, n) {
            if (t instanceof Vu) return jr.nw(t.Iw, n);
            throw Gn("IndexedDbPersistence must use instances of IndexedDbTransaction");
        }, t.nm = function(n) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var i;
                return tslib_es6.__generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        if (!t.th()) throw new E(T.UNIMPLEMENTED, "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");
                        return [ 4 /*yield*/ , (i = new t(n.allowTabSynchronization, n.persistenceKey, n.clientId, n.platform, n.im, n.zo, n.serializer, n.zw)).start() ];

                      case 1:
                        return e.sent(), [ 2 /*return*/ , i ];
                    }
                }));
            }));
        }, 
        /**
         * Attempt to start IndexedDb persistence.
         *
         * @return {Promise<void>} Whether persistence was enabled.
         */
        t.prototype.start = function() {
            var t = this;
            return Wn(!this.qu, "IndexedDbPersistence double-started!"), Wn(null !== this.window, "Expected 'window' to be defined"), 
            jr.Xv(this.$w, su, new ou(this.serializer)).then((function(n) {
                // NOTE: This is expected to fail sometimes (in the case of another tab already
                // having the persistence lock), so it's the first thing we should do.
                return t.em = n, t.rm();
            })).then((function() {
                return t.um(), t.sm(), t.om(), t.em.runTransaction("readonly", [ gu.store ], (function(t) {
                    return Zr(t);
                }));
            })).then((function(n) {
                t.Oc = new ii(n, t.zw);
            })).then((function() {
                t.Fc = !0;
            })).catch((function(n) {
                return t.em && t.em.close(), Promise.reject(n);
            }));
        }, t.prototype.jc = function(t) {
            var n = this;
            return this.Xw = function(i) {
                return tslib_es6.__awaiter(n, void 0, void 0, (function() {
                    return tslib_es6.__generator(this, (function(n) {
                        return this.qu ? [ 2 /*return*/ , t(i) ] : [ 2 /*return*/ ];
                    }));
                }));
            }, t(this.isPrimary);
        }, t.prototype.xc = function(t) {
            var n = this;
            this.em.iw((function(i) {
                return tslib_es6.__awaiter(n, void 0, void 0, (function() {
                    return tslib_es6.__generator(this, (function(n) {
                        switch (n.label) {
                          case 0:
                            return null !== i.newVersion ? [ 3 /*break*/ , 2 ] : [ 4 /*yield*/ , t() ];

                          case 1:
                            n.sent(), n.label = 2;

                          case 2:
                            return [ 2 /*return*/ ];
                        }
                    }));
                }));
            }));
        }, t.prototype.jo = function(t) {
            var n = this;
            this.networkEnabled !== t && (this.networkEnabled = t, 
            // Schedule a primary lease refresh for immediate execution. The eventual
            // lease update will be propagated via `primaryStateListener`.
            this.zo.Qr((function() {
                return tslib_es6.__awaiter(n, void 0, void 0, (function() {
                    return tslib_es6.__generator(this, (function(t) {
                        switch (t.label) {
                          case 0:
                            return this.qu ? [ 4 /*yield*/ , this.rm() ] : [ 3 /*break*/ , 2 ];

                          case 1:
                            t.sent(), t.label = 2;

                          case 2:
                            return [ 2 /*return*/ ];
                        }
                    }));
                }));
            })));
        }, 
        /**
         * Updates the client metadata in IndexedDb and attempts to either obtain or
         * extend the primary lease for the local client. Asynchronously notifies the
         * primary state listener if the client either newly obtained or released its
         * primary lease.
         */
        t.prototype.rm = function() {
            var t = this;
            return this.em.runTransaction("readwrite", Ru, (function(n) {
                return Ou(n).put(new Iu(t.clientId, Date.now(), t.networkEnabled, t.inForeground)).next((function() {
                    if (t.isPrimary) return t.hm(n).next((function(n) {
                        n || (t.isPrimary = !1, t.zo.Qr((function() {
                            return t.Xw(!1);
                        })));
                    }));
                })).next((function() {
                    return t.cm(n);
                })).next((function(i) {
                    return t.isPrimary && !i ? t.am(n).next((function() {
                        return !1;
                    })) : !!i && t.fm(n).next((function() {
                        return !0;
                    }));
                }));
            })).catch((function(n) {
                if (!t.allowTabSynchronization) throw n;
                return qn("IndexedDbPersistence", "Releasing owner lease after error during lease refresh", n), 
                /* isPrimary= */ !1;
            })).then((function(n) {
                t.isPrimary !== n && t.zo.Qr((function() {
                    return t.Xw(n);
                })), t.isPrimary = n;
            }));
        }, t.prototype.hm = function(t) {
            var n = this;
            return Nu(t).get(cu.key).next((function(t) {
                return si.resolve(n.lm(t));
            }));
        }, t.prototype.dm = function(t) {
            return Ou(t).delete(this.clientId);
        }, 
        /**
         * If the garbage collection threshold has passed, prunes the
         * RemoteDocumentChanges and the ClientMetadata store based on the last update
         * time of all clients.
         */
        t.prototype.vm = function() {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var n = this;
                return tslib_es6.__generator(this, (function(i) {
                    switch (i.label) {
                      case 0:
                        return !this.isPrimary || this.wm(this.Yw, 18e5) ? [ 3 /*break*/ , 2 ] : (this.Yw = Date.now(), 
                        [ 4 /*yield*/ , this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary", (function(i) {
                            var e = t.nw(i, Iu.store);
                            return e.aw().next((function(t) {
                                var i = n.mm(t, 18e5), r = t.filter((function(t) {
                                    return -1 === i.indexOf(t);
                                }));
                                // Delete metadata for clients that are no longer considered active.
                                return si.forEach(r, (function(t) {
                                    return e.delete(t.clientId);
                                })).next((function() {
                                    return r;
                                }));
                            }));
                        })).catch((function() {
                            // Ignore primary lease violations or any other type of error. The next
                            // primary will run `maybeGarbageCollectMultiClientState()` again.
                            // We don't use `ignoreIfPrimaryLeaseLoss()` since we don't want to depend
                            // on LocalStore.
                            return [];
                        })) ]);

                      case 1:
                        // Delete potential leftover entries that may continue to mark the
                        // inactive clients as zombied in LocalStorage.
                        // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for
                        // the client atomically, but we can't. So we opt to delete the IndexedDb
                        // entries first to avoid potentially reviving a zombied client.
                        i.sent().forEach((function(t) {
                            n.window.localStorage.removeItem(n.pm(t.clientId));
                        })), i.label = 2;

                      case 2:
                        return [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Schedules a recurring timer to update the client metadata and to either
         * extend or acquire the primary lease if the client is eligible.
         */
        t.prototype.om = function() {
            var t = this;
            this.Hw = this.zo.iu("client_metadata_refresh" /* ClientMetadataRefresh */ , 4e3, (function() {
                return t.rm().then((function() {
                    return t.vm();
                })).then((function() {
                    return t.om();
                }));
            }));
        }, 
        /** Checks whether `client` is the local client. */
        t.prototype.lm = function(t) {
            return !!t && t.ownerId === this.clientId;
        }, 
        /**
         * Evaluate the state of all active clients and determine whether the local
         * client is or can act as the holder of the primary lease. Returns whether
         * the client is eligible for the lease, but does not actually acquire it.
         * May return 'false' even if there is no active leaseholder and another
         * (foreground) client should become leaseholder instead.
         */
        t.prototype.cm = function(t) {
            var n = this;
            return Nu(t).get(cu.key).next((function(i) {
                // A client is eligible for the primary lease if:
                // - its network is enabled and the client's tab is in the foreground.
                // - its network is enabled and no other client's tab is in the
                //   foreground.
                // - every clients network is disabled and the client's tab is in the
                //   foreground.
                // - every clients network is disabled and no other client's tab is in
                //   the foreground.
                if (null !== i && n.wm(i.leaseTimestampMs, 5e3) && !n.bm(i.ownerId)) {
                    if (n.lm(i) && n.networkEnabled) return !0;
                    if (!n.lm(i)) {
                        if (!i.allowTabSynchronization) 
                        // Fail the `canActAsPrimary` check if the current leaseholder has
                        // not opted into multi-tab synchronization. If this happens at
                        // client startup, we reject the Promise returned by
                        // `enablePersistence()` and the user can continue to use Firestore
                        // with in-memory persistence.
                        // If this fails during a lease refresh, we will instead block the
                        // AsyncQueue from executing further operations. Note that this is
                        // acceptable since mixing & matching different `synchronizeTabs`
                        // settings is not supported.
                        // TODO(b/114226234): Remove this check when `synchronizeTabs` can
                        // no longer be turned off.
                        throw new E(T.FAILED_PRECONDITION, Pu);
                        return !1;
                    }
                }
                return !(!n.networkEnabled || !n.inForeground) || Ou(t).aw().next((function(t) {
                    return void 0 === n.mm(t, 5e3).find((function(t) {
                        if (n.clientId !== t.clientId) {
                            var i = !n.networkEnabled && t.networkEnabled, e = !n.inForeground && t.inForeground, r = n.networkEnabled === t.networkEnabled;
                            if (i || e && r) return !0;
                        }
                        return !1;
                    }));
                }));
            })).next((function(t) {
                return n.isPrimary !== t && qn("IndexedDbPersistence", "Client " + (t ? "is" : "is not") + " eligible for a primary lease."), 
                t;
            }));
        }, t.prototype.shutdown = function() {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var t = this;
                return tslib_es6.__generator(this, (function(n) {
                    switch (n.label) {
                      case 0:
                        // The shutdown() operations are idempotent and can be called even when
                        // start() aborted (e.g. because it couldn't acquire the persistence lease).
                        return this.Fc = !1, this.gm(), this.Hw && (this.Hw.cancel(), this.Hw = null), this.ym(), 
                        this._m(), [ 4 /*yield*/ , this.em.runTransaction("readwrite", [ cu.store, Iu.store ], (function(n) {
                            return t.am(n).next((function() {
                                return t.dm(n);
                            }));
                        })) ];

                      case 1:
                        return n.sent(), this.em.close(), 
                        // Remove the entry marking the client as zombied from LocalStorage since
                        // we successfully deleted its metadata from IndexedDb.
                        this.Im(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, 
        /**
         * Returns clients that are not zombied and have an updateTime within the
         * provided threshold.
         */
        t.prototype.mm = function(t, n) {
            var i = this;
            return t.filter((function(t) {
                return i.wm(t.updateTimeMs, n) && !i.bm(t.clientId);
            }));
        }, t.prototype.Oo = function() {
            var t = this;
            return this.em.runTransaction("readonly", [ Iu.store ], (function(n) {
                return Ou(n).aw().next((function(n) {
                    return t.mm(n, 18e5).map((function(t) {
                        return t.clientId;
                    }));
                }));
            }));
        }, t.clearPersistence = function(n) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var i;
                return tslib_es6.__generator(this, (function(e) {
                    switch (e.label) {
                      case 0:
                        return t.th() ? (i = n + t.Zw, [ 4 /*yield*/ , jr.delete(i) ]) : [ 2 /*return*/ , Promise.resolve() ];

                      case 1:
                        return e.sent(), [ 2 /*return*/ ];
                    }
                }));
            }));
        }, Object.defineProperty(t.prototype, "qu", {
            get: function() {
                return this.Fc;
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.Vs = function(t) {
            return Wn(this.qu, "Cannot initialize MutationQueue before persistence is started."), 
            Gr.pw(t, this.serializer, this.Bh, this.Cs);
        }, t.prototype.Fs = function() {
            return Wn(this.qu, "Cannot initialize TargetCache before persistence is started."), 
            this.Os;
        }, t.prototype.Ns = function() {
            return Wn(this.qu, "Cannot initialize RemoteDocumentCache before persistence is started."), 
            this.qh;
        }, t.prototype.js = function() {
            return Wn(this.qu, "Cannot initialize IndexManager before persistence is started."), 
            this.Bh;
        }, t.prototype.runTransaction = function(t, n, i) {
            var e = this;
            qn("IndexedDbPersistence", "Starting transaction:", t);
            var r, u = "readonly" === n ? "readonly" : "readwrite";
            // Do all transactions as readwrite against all object stores, since we
            // are the only reader/writer.
            return this.em.runTransaction(u, Ru, (function(u) {
                return r = new Vu(u, e.Oc.next()), "readwrite-primary" === n ? e.hm(u).next((function(t) {
                    return !!t || e.cm(u);
                })).next((function(n) {
                    if (!n) throw Bn("Failed to obtain primary lease for action '" + t + "'."), e.isPrimary = !1, 
                    e.zo.Qr((function() {
                        return e.Xw(!1);
                    })), new E(T.FAILED_PRECONDITION, Ai);
                    return i(r);
                })).next((function(t) {
                    return e.fm(u).next((function() {
                        return t;
                    }));
                })) : e.Tm(u).next((function() {
                    return i(r);
                }));
            })).then((function(t) {
                return r.Mh(), t;
            }));
        }, 
        /**
         * Verifies that the current tab is the primary leaseholder or alternatively
         * that the leaseholder has opted into multi-tab synchronization.
         */
        // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer
        // be turned off.
        t.prototype.Tm = function(t) {
            var n = this;
            return Nu(t).get(cu.key).next((function(t) {
                if (null !== t && n.wm(t.leaseTimestampMs, 5e3) && !n.bm(t.ownerId) && !n.lm(t) && !t.allowTabSynchronization) throw new E(T.FAILED_PRECONDITION, Pu);
            }));
        }, 
        /**
         * Obtains or extends the new primary lease for the local client. This
         * method does not verify that the client is eligible for this lease.
         */
        t.prototype.fm = function(t) {
            var n = new cu(this.clientId, this.allowTabSynchronization, Date.now());
            return Nu(t).put(cu.key, n);
        }, t.th = function() {
            return jr.th();
        }, 
        /**
         * Generates a string used as a prefix when storing data in IndexedDB and
         * LocalStorage.
         */
        t.Em = function(t) {
            // Use two different prefix formats:
            //   * firestore / persistenceKey / projectID . databaseID / ...
            //   * firestore / persistenceKey / projectID / ...
            // projectIDs are DNS-compatible names and cannot contain dots
            // so there's no danger of collisions.
            var n = t.ae.projectId;
            return t.ae.br || (n += "." + t.ae.database), "firestore/" + t.persistenceKey + "/" + n + "/";
        }, 
        /** Checks the primary lease and removes it if we are the current primary. */
        t.prototype.am = function(t) {
            var n = this, i = Nu(t);
            return i.get(cu.key).next((function(t) {
                return n.lm(t) ? (qn("IndexedDbPersistence", "Releasing primary lease."), i.delete(cu.key)) : si.resolve();
            }));
        }, 
        /** Verifies that `updateTimeMs` is within `maxAgeMs`. */
        t.prototype.wm = function(t, n) {
            var i = Date.now();
            return !(t < i - n) && (!(t > i) || (Bn("Detected an update time that is in the future: " + t + " > " + i), 
            !1));
        }, t.prototype.um = function() {
            var t = this;
            null !== this.document && "function" == typeof this.document.addEventListener && (this.Jw = function() {
                t.zo.Qr((function() {
                    return t.inForeground = "visible" === t.document.visibilityState, t.rm();
                }));
            }, this.document.addEventListener("visibilitychange", this.Jw), this.inForeground = "visible" === this.document.visibilityState);
        }, t.prototype.ym = function() {
            this.Jw && (Wn(null !== this.document && "function" == typeof this.document.addEventListener, "Expected 'document.addEventListener' to be a function"), 
            this.document.removeEventListener("visibilitychange", this.Jw), this.Jw = null);
        }, 
        /**
         * Attaches a window.unload handler that will synchronously write our
         * clientId to a "zombie client id" location in LocalStorage. This can be used
         * by tabs trying to acquire the primary lease to determine that the lease
         * is no longer valid even if the timestamp is recent. This is particularly
         * important for the refresh case (so the tab correctly re-acquires the
         * primary lease). LocalStorage is used for this rather than IndexedDb because
         * it is a synchronous API and so can be used reliably from  an unload
         * handler.
         */
        t.prototype.sm = function() {
            var t = this;
            "function" == typeof this.window.addEventListener && (this.Kw = function() {
                // Note: In theory, this should be scheduled on the AsyncQueue since it
                // accesses internal state. We execute this code directly during shutdown
                // to make sure it gets a chance to run.
                t.gm(), t.zo.Qr((function() {
                    // Attempt graceful shutdown (including releasing our primary lease),
                    // but there's no guarantee it will complete.
                    return t.shutdown();
                }));
            }, this.window.addEventListener("unload", this.Kw));
        }, t.prototype._m = function() {
            this.Kw && (Wn("function" == typeof this.window.removeEventListener, "Expected 'window.removeEventListener' to be a function"), 
            this.window.removeEventListener("unload", this.Kw), this.Kw = null);
        }, 
        /**
         * Returns whether a client is "zombied" based on its LocalStorage entry.
         * Clients become zombied when their tab closes without running all of the
         * cleanup logic in `shutdown()`.
         */
        t.prototype.bm = function(t) {
            try {
                var n = null !== this.tm.getItem(this.pm(t));
                return qn("IndexedDbPersistence", "Client '" + t + "' " + (n ? "is" : "is not") + " zombied in LocalStorage"), 
                n;
            } catch (t) {
                // Gracefully handle if LocalStorage isn't working.
                return Bn("IndexedDbPersistence", "Failed to get zombied client id.", t), !1;
            }
        }, 
        /**
         * Record client as zombied (a client that had its tab closed). Zombied
         * clients are ignored during primary tab selection.
         */
        t.prototype.gm = function() {
            try {
                this.tm.setItem(this.pm(this.clientId), String(Date.now()));
            } catch (t) {
                // Gracefully handle if LocalStorage isn't available / working.
                Bn("Failed to set zombie client id.", t);
            }
        }, 
        /** Removes the zombied client entry if it exists. */
        t.prototype.Im = function() {
            try {
                this.tm.removeItem(this.pm(this.clientId));
            } catch (t) {
                // Ignore
            }
        }, t.prototype.pm = function(t) {
            return "firestore_zombie_" + this.persistenceKey + "_" + t;
        }, 
        /**
         * The name of the main (and currently only) IndexedDB database. this name is
         * appended to the prefix provided to the IndexedDbPersistence constructor.
         */
        t.Zw = "main", t;
    }();

    /**
     * Oldest acceptable age in milliseconds for client metadata before the client
     * is considered inactive and its associated data is garbage collected.
     */
    /**
     * Helper to get a typed SimpleDbStore for the primary client object store.
     */
    function Nu(t) {
        return t.store(cu.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the client metadata object store.
     */ function Ou(t) {
        return t.store(Iu.store);
    }

    /** Provides LRU functionality for IndexedDB persistence. */ var Fu = /** @class */ function() {
        function t(t, n) {
            this.db = t, this.Bc = null, this.ju = new li(this, n);
        }
        return t.prototype.Wu = function(t) {
            var n = this.Dm(t);
            return this.db.Fs().kc(t).next((function(t) {
                return n.next((function(n) {
                    return t + n;
                }));
            }));
        }, t.prototype.Dm = function(t) {
            var n = 0;
            return this.Ku(t, (function(t) {
                n++;
            })).next((function() {
                return n;
            }));
        }, t.prototype.$i = function(t, n) {
            return this.db.Fs().$i(t, n);
        }, t.prototype.Ku = function(t, n) {
            return this.Rm(t, (function(t, i) {
                return n(i);
            }));
        }, t.prototype.As = function(t) {
            this.Bc = t;
        }, t.prototype.es = function(t, n) {
            return Uu(t, n);
        }, t.prototype.us = function(t, n) {
            return Uu(t, n);
        }, t.prototype.Ju = function(t, n, i) {
            return this.db.Fs().Ju(t, n, i);
        }, t.prototype.lc = function(t, n) {
            return Uu(t, n);
        }, 
        /**
         * Returns true if anything would prevent this document from being garbage
         * collected, given that the document in question is not present in any
         * targets and has a sequence number less than or equal to the upper bound for
         * the collection run.
         */
        t.prototype.Sm = function(t, n) {
            return this.Bc.fs(n) ? si.resolve(!0) : function(t, n) {
                var i = !1;
                return Hr(t).ww((function(e) {
                    return Wr(t, e, n).next((function(t) {
                        return t && (i = !0), si.resolve(!t);
                    }));
                })).next((function() {
                    return i;
                }));
            }(t, n);
        }, t.prototype.Hu = function(t, n) {
            var i = this, e = this.db.Ns().Xs(), r = [], u = 0;
            return this.Rm(t, (function(s, o) {
                if (o <= n) {
                    var h = i.Sm(t, s).next((function(n) {
                        if (!n) 
                        // Our size accounting requires us to read all documents before
                        // removing them.
                        return u++, e.gs(t, s).next((function() {
                            return e.bs(s), tu(t).delete([ 0, ki(s.path) ]);
                        }));
                    }));
                    r.push(h);
                }
            })).next((function() {
                return si.pu(r);
            })).next((function() {
                return e.apply(t);
            })).next((function() {
                return u;
            }));
        }, t.prototype.removeTarget = function(t, n) {
            var i = n.ii(t.fo);
            return this.db.Fs().do(t, i);
        }, t.prototype.vo = function(t, n) {
            return Uu(t, n);
        }, 
        /**
         * Call provided function for each document in the cache that is 'orphaned'. Orphaned
         * means not a part of any target, so the only entry in the target-document index for
         * that document will be the sentinel row (targetId 0), which will also have the sequence
         * number for the last time the document was accessed.
         */
        t.prototype.Rm = function(t, n) {
            var i, e = tu(t), r = ii.Nr;
            return e.vw({
                index: bu.documentTargetsIndex
            }, (function(t, e) {
                var u = t[0], s = (t[1], e.path), o = e.sequenceNumber;
                0 === u ? (
                // if nextToReport is valid, report it, this is a new key so the
                // last one must not be a member of any targets.
                r !== ii.Nr && n(new j(Fi(i)), r), 
                // set nextToReport to be this sequence number. It's the next one we
                // might report, if we don't find any targets for this document.
                // Note that the sequence number must be defined when the targetId
                // is 0.
                r = o, i = s) : 
                // set nextToReport to be invalid, we know we don't need to report
                // this one since we found a target for it.
                r = ii.Nr;
            })).next((function() {
                // Since we report sequence numbers after getting to the next key, we
                // need to check if the last key we iterated over was an orphaned
                // document and report it.
                r !== ii.Nr && n(new j(Fi(i)), r);
            }));
        }, t.prototype.Xu = function(t) {
            return this.db.Ns().pc(t);
        }, t;
    }();

    function Uu(t, n) {
        return tu(t).put(
        /**
     * @return A value suitable for writing a sentinel row in the target-document
     * store.
     */
        function(t, n) {
            return new bu(0, ki(t.path), n);
        }(n, t.fo));
    }

    /**
     * Provides all components needed for IndexedDb persistence.
     */ var ju = /** @class */ function() {
        function t() {}
        return t.prototype.initialize = function(t, n, i, e, s, o) {
            return tslib_es6.__awaiter(this, void 0, void 0, (function() {
                var r, h, c, a;
                return tslib_es6.__generator(this, (function(u) {
                    switch (u.label) {
                      case 0:
                        if (Wn(o.zc, "IndexedDbPersistenceProvider can only provide durable persistence"), 
                        Wn(!this.persistence, "configure() already called"), r = ku.Em(n), h = new Fn(n.ae, {
                            de: jn.xt().de
                        }), !Ri.th(i)) throw new E(T.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
                        return this.Ml = o.synchronizeTabs ? new Ri(t, i, r, e, s) : new Si, c = this, [ 4 /*yield*/ , ku.nm({
                            allowTabSynchronization: o.synchronizeTabs,
                            persistenceKey: r,
                            clientId: e,
                            platform: i,
                            zo: t,
                            serializer: h,
                            im: ai.Pu(o.cacheSizeBytes),
                            zw: this.Ml
                        }) ];

                      case 1:
                        return c.persistence = u.sent(), a = this.persistence.Cs.ju, this.Md = new fi(a, t), 
                        [ 2 /*return*/ ];
                    }
                }));
            }));
        }, t.prototype.Jc = function() {
            return Wn(!!this.persistence, "initialize() not called"), this.persistence;
        }, t.prototype.Hc = function() {
            return Wn(!!this.Ml, "initialize() not called"), this.Ml;
        }, t.prototype.Kc = function() {
            return Wn(!!this.Md, "initialize() not called"), this.Md;
        }, t.prototype.clearPersistence = function(t) {
            var n = ku.Em(t);
            return ku.clearPersistence(n);
        }, t;
    }(), xu = {
        Firestore: Ar,
        GeoPoint: Ne,
        Timestamp: V,
        Blob: Te,
        Transaction: Cr,
        WriteBatch: Pr,
        DocumentReference: Vr,
        DocumentSnapshot: kr,
        Query: Or,
        QueryDocumentSnapshot: Nr,
        QuerySnapshot: Fr,
        CollectionReference: Ur,
        FieldPath: Ee,
        FieldValue: ke,
        setLogLevel: fr.setLogLevel,
        CACHE_SIZE_UNLIMITED: cr
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ var Lu = /** @class */ function() {
        function t() {}
        return t.prototype.jf = function(t) {
            // No-op.
        }, t.prototype.shutdown = function() {
            // No-op.
        }, t;
    }(), Mu = /** @class */ function() {
        function t() {
            var t = this;
            this.Am = function() {
                return t.Cm();
            }, this.Pm = function() {
                return t.Vm();
            }, this.km = [], this.Nm();
        }
        return t.prototype.jf = function(t) {
            this.km.push(t);
        }, t.prototype.shutdown = function() {
            window.removeEventListener("online", this.Am), window.removeEventListener("offline", this.Pm);
        }, t.prototype.Nm = function() {
            window.addEventListener("online", this.Am), window.addEventListener("offline", this.Pm);
        }, t.prototype.Cm = function() {
            qn("ConnectivityMonitor", "Network connectivity changed: AVAILABLE");
            for (var t = 0, n = this.km; t < n.length; t++) {
                (0, n[t])(0 /* AVAILABLE */);
            }
        }, t.prototype.Vm = function() {
            qn("ConnectivityMonitor", "Network connectivity changed: UNAVAILABLE");
            for (var t = 0, n = this.km; t < n.length; t++) {
                (0, n[t])(1 /* UNAVAILABLE */);
            }
        }, 
        // TODO(chenbrian): Consider passing in window either into this component or
        // here for testing via FakeWindow.
        /** Checks that all used attributes of window are available. */
        t.th = function() {
            return "undefined" != typeof window && void 0 !== window.addEventListener && void 0 !== window.removeEventListener;
        }, t;
    }(), qu = /** @class */ function() {
        function t(t) {
            this.Om = t.Om, this.Fm = t.Fm;
        }
        return t.prototype.Ea = function(t) {
            Wn(!this.Um, "Called onOpen on stream twice!"), this.Um = t;
        }, t.prototype.ga = function(t) {
            Wn(!this.jm, "Called onClose on stream twice!"), this.jm = t;
        }, t.prototype.onMessage = function(t) {
            Wn(!this.xm, "Called onMessage on stream twice!"), this.xm = t;
        }, t.prototype.close = function() {
            this.Fm();
        }, t.prototype.send = function(t) {
            this.Om(t);
        }, t.prototype.Lm = function() {
            Wn(void 0 !== this.Um, "Cannot call onOpen because no callback was set"), this.Um();
        }, t.prototype.Mm = function(t) {
            Wn(void 0 !== this.jm, "Cannot call onClose because no callback was set"), this.jm(t);
        }, t.prototype.qm = function(t) {
            Wn(void 0 !== this.xm, "Cannot call onMessage because no callback was set"), this.xm(t);
        }, t;
    }(), Bu = {
        BatchGetDocuments: "batchGet",
        Commit: "commit"
    }, Qu = "gl-js/ fire/" + _, Gu = /** @class */ function() {
        function t(t) {
            this.ae = t.ae;
            var n = t.ssl ? "https" : "http";
            this.Bm = n + "://" + t.host, this.forceLongPolling = t.forceLongPolling;
        }
        /**
         * Modifies the headers for a request, adding any authorization token if
         * present and any additional headers for the request.
         */    return t.prototype.Qm = function(t, n) {
            if (n) for (var i in n.o) n.o.hasOwnProperty(i) && (t[i] = n.o[i]);
            t["X-Goog-Api-Client"] = Qu;
        }, t.prototype.Ua = function(t, n, e) {
            var r = this, u = this.Gm(t);
            return new Promise((function(s, o) {
                var h = new tmp.XhrIo;
                h.listenOnce(tmp.EventType.COMPLETE, (function() {
                    try {
                        switch (h.getLastErrorCode()) {
                          case tmp.ErrorCode.NO_ERROR:
                            var n = h.getResponseJson();
                            qn("Connection", "XHR received:", JSON.stringify(n)), s(n);
                            break;

                          case tmp.ErrorCode.TIMEOUT:
                            qn("Connection", 'RPC "' + t + '" timed out'), o(new E(T.DEADLINE_EXCEEDED, "Request time out"));
                            break;

                          case tmp.ErrorCode.HTTP_ERROR:
                            var i = h.getStatus();
                            if (qn("Connection", 'RPC "' + t + '" failed with status:', i, "response text:", h.getResponseText()), 
                            i > 0) {
                                var e = h.getResponseJson().error;
                                if (e && e.status && e.message) {
                                    var r = (u = e.status, c = u.toLowerCase().replace("_", "-"), Object.values(T).indexOf(c) >= 0 ? c : T.UNKNOWN);
                                    o(new E(r, e.message));
                                } else o(new E(T.UNKNOWN, "Server responded with status " + h.getStatus()));
                            } else 
                            // If we received an HTTP_ERROR but there's no status code,
                            // it's most probably a connection issue
                            qn("Connection", 'RPC "' + t + '" failed'), o(new E(T.UNAVAILABLE, "Connection failed."));
                            break;

                          default:
                            Gn('RPC "' + t + '" failed with unanticipated webchannel error ' + h.getLastErrorCode() + ": " + h.getLastError() + ", giving up.");
                        }
                    } finally {
                        qn("Connection", 'RPC "' + t + '" completed.');
                    }
                    var u, c;
                }));
                // The database field is already encoded in URL. Specifying it again in
                // the body is not necessary in production, and will cause duplicate field
                // errors in the Firestore Emulator. Let's remove it.
                var c = tslib_es6.__assign({}, n);
                delete c.database;
                var a = JSON.stringify(c);
                qn("Connection", "XHR sending: ", u + " " + a);
                // Content-Type: text/plain will avoid preflight requests which might
                // mess with CORS and redirects by proxies. If we add custom headers
                // we will need to change this code to potentially use the
                // $httpOverwrite parameter supported by ESF to avoid
                // triggering preflight requests.
                var f = {
                    "Content-Type": "text/plain"
                };
                r.Qm(f, e), h.send(u, "POST", a, f, 15);
            }));
        }, t.prototype.ja = function(t, n, i) {
            // The REST API automatically aggregates all of the streamed results, so we
            // can just use the normal invoke() method.
            return this.Ua(t, n, i);
        }, t.prototype.Da = function(t, n) {
            var i = [ this.Bm, "/", "google.firestore.v1.Firestore", "/", t, "/channel" ], e = tmp.createWebChannelTransport(), r = {
                // Required for backend stickiness, routing behavior is based on this
                // parameter.
                httpSessionIdParam: "gsessionid",
                initMessageHeaders: {},
                messageUrlParams: {
                    // This param is used to improve routing and project isolation by the
                    // backend and must be included in every request.
                    database: "projects/" + this.ae.projectId + "/databases/" + this.ae.database
                },
                sendRawJson: !0,
                supportsCrossDomainXhr: !0,
                internalChannelParams: {
                    // Override the default timeout (randomized between 10-20 seconds) since
                    // a large write batch on a slow internet connection may take a long
                    // time to send to the backend. Rather than have WebChannel impose a
                    // tight timeout which could lead to infinite timeouts and retries, we
                    // set it very large (5-10 minutes) and rely on the browser's builtin
                    // timeouts to kick in if the request isn't working.
                    forwardChannelRequestTimeoutMs: 6e5
                },
                forceLongPolling: this.forceLongPolling
            };
            this.Qm(r.initMessageHeaders, n), 
            // Sending the custom headers we just added to request.initMessageHeaders
            // (Authorization, etc.) will trigger the browser to make a CORS preflight
            // request because the XHR will no longer meet the criteria for a "simple"
            // CORS request:
            // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
            // Therefore to avoid the CORS preflight request (an extra network
            // roundtrip), we use the httpHeadersOverwriteParam option to specify that
            // the headers should instead be encoded into a special "$httpHeaders" query
            // parameter, which is recognized by the webchannel backend. This is
            // formally defined here:
            // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32
            // TODO(b/145624756): There is a backend bug where $httpHeaders isn't respected if the request
            // doesn't have an Origin header. So we have to exclude a few browser environments that are
            // known to (sometimes) not include an Origin. See
            // https://github.com/firebase/firebase-js-sdk/issues/1491.
            index_cjs.isMobileCordova() || index_cjs.isReactNative() || index_cjs.isElectron() || index_cjs.isIE() || index_cjs.isUWP() || index_cjs.isBrowserExtension() || (r.httpHeadersOverwriteParam = "$httpHeaders");
            var u = i.join("");
            qn("Connection", "Creating WebChannel: " + u + " " + r);
            var s = e.createWebChannel(u, r), o = !1, h = !1, w = new qu({
                Om: function(t) {
                    h ? qn("Connection", "Not sending because WebChannel is closed:", t) : (o || (qn("Connection", "Opening WebChannel transport."), 
                    s.open(), o = !0), qn("Connection", "WebChannel sending:", t), s.send(t));
                },
                Fm: function() {
                    return s.close();
                }
            }), m = function(t, n) {
                // TODO(dimond): closure typing seems broken because WebChannel does
                // not implement goog.events.Listenable
                s.listen(t, (function(t) {
                    try {
                        n(t);
                    } catch (t) {
                        setTimeout((function() {
                            throw t;
                        }), 0);
                    }
                }));
            };
            // WebChannel supports sending the first message with the handshake - saving
            // a network round trip. However, it will have to call send in the same
            // JS event loop as open. In order to enforce this, we delay actually
            // opening the WebChannel until send is called. Whether we have called
            // open is tracked with this variable.
                    return m(tmp.WebChannel.EventType.OPEN, (function() {
                h || qn("Connection", "WebChannel transport opened.");
            })), m(tmp.WebChannel.EventType.CLOSE, (function() {
                h || (h = !0, qn("Connection", "WebChannel transport closed"), w.Mm());
            })), m(tmp.WebChannel.EventType.ERROR, (function(t) {
                h || (h = !0, qn("Connection", "WebChannel transport errored:", t), w.Mm(new E(T.UNAVAILABLE, "The operation could not be completed")));
            })), m(tmp.WebChannel.EventType.MESSAGE, (function(t) {
                var n;
                if (!h) {
                    var i = t.data[0];
                    Wn(!!i, "Got a webchannel message without data.");
                    // TODO(b/35143891): There is a bug in One Platform that caused errors
                    // (and only errors) to be wrapped in an extra array. To be forward
                    // compatible with the bug we need to check either condition. The latter
                    // can be removed once the fix has been rolled out.
                    // Use any because msgData.error is not typed.
                    var e = i, r = e.error || (null === (n = e[0]) || void 0 === n ? void 0 : n.error);
                    if (r) {
                        qn("Connection", "WebChannel received error:", r);
                        // error.status will be a string like 'OK' or 'NOT_FOUND'.
                        var u = r.status, o = function(t) {
                            // lookup by string
                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                            var n = Tt[t];
                            if (void 0 !== n) return sn(n);
                        }(u), c = r.message;
                        void 0 === o && (o = T.INTERNAL, c = "Unknown error status: " + u + " with message " + r.message), 
                        // Mark closed so no further events are propagated
                        h = !0, w.Mm(new E(o, c)), s.close();
                    } else qn("Connection", "WebChannel received:", i), w.qm(i);
                }
            })), setTimeout((function() {
                // Technically we could/should wait for the WebChannel opened event,
                // but because we want to send the first message with the WebChannel
                // handshake we pretend the channel opened here (asynchronously), and
                // then delay the actual open until the first message is sent.
                w.Lm();
            }), 0), w;
        }, 
        // visible for testing
        t.prototype.Gm = function(t) {
            var n = Bu[t];
            return Wn(void 0 !== n, "Unknown REST mapping for: " + t), this.Bm + "/v1/projects/" + this.ae.projectId + "/databases/" + this.ae.database + "/documents:" + n;
        }, t;
    }(), Wu = window.crypto || window.__PRIVATE_msCrypto, zu = /** @class */ function() {
        function t() {
            this.de = !0, this.xa = "undefined" != typeof atob;
        }
        return Object.defineProperty(t.prototype, "document", {
            get: function() {
                return "undefined" != typeof document ? document : null;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(t.prototype, "window", {
            get: function() {
                return "undefined" != typeof window ? window : null;
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.Bd = function(t) {
            return Promise.resolve(new Gu(t));
        }, t.prototype.Qd = function() {
            return Mu.th() ? new Mu : new Lu;
        }, t.prototype.Gd = function(t) {
            return new Fn(t, {
                de: !0
            });
        }, t.prototype.mr = function(t) {
            return JSON.stringify(t);
        }, t.prototype.atob = function(t) {
            return atob(t);
        }, t.prototype.btoa = function(t) {
            return btoa(t);
        }, t.prototype.randomBytes = function(t) {
            if (t <= 0) return new Uint8Array;
            var n = new Uint8Array(t);
            return Wu.getRandomValues(n), n;
        }, t;
    }();

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Registers the main Firestore build with the components framework.
     * Persistence can be enabled via `firebase.firestore().enablePersistence()`.
     */
    function Ku(t) {
        !
        /**
     * Configures Firestore as part of the Firebase SDK by calling registerService.
     *
     * @param firebase The FirebaseNamespace to register Firestore with
     * @param firestoreFactory A factory function that returns a new Firestore
     *    instance.
     */
        function(t, n) {
            t.INTERNAL.registerComponent(new index_cjs$1.Component("firestore", (function(t) {
                var i = t.getProvider("app").getImmediate();
                return n(i, t.getProvider("auth-internal"));
            }), "PUBLIC" /* PUBLIC */).setServiceProps(tslib_es6.__assign({}, xu)));
        }(t, (function(t, n) {
            return new fr(t, n, new ju);
        })), t.registerVersion("@firebase/firestore", "1.13.1");
    }

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * This code needs to run before Firestore is used. This can be achieved in
     * several ways:
     *   1) Through the JSCompiler compiling this code and then (automatically)
     *      executing it before exporting the Firestore symbols.
     *   2) Through importing this module first in a Firestore main module
     */
    jn.wr(new zu), Ku(t);

    exports.__PRIVATE_registerFirestore = Ku;
    //# sourceMappingURL=index.cjs.js.map
    });

    unwrapExports(index_cjs$4);
    var index_cjs_1$3 = index_cjs$4.__PRIVATE_registerFirestore;

    index_cjs$3.initializeApp({
      apiKey: 'AIzaSyDriffF4c33V459hiSyEkFmUZAQaportrs',
      databaseURL: 'not-firebase-58b83.firebaseapp.com',
      storageBucket: 'not-firebase-58b83.appspot.com',
      projectId: 'not-firebase-58b83'
    });

    const firestore = index_cjs$3.firestore;
    const firestoreDb = index_cjs$3.firestore();

    /* src/routes/index.svelte generated by Svelte v3.20.1 */
    const file$1 = "src/routes/index.svelte";

    function create_fragment$3(ctx) {
    	let t0;
    	let h1;
    	let t2;
    	let button;
    	let dispose;

    	const block = {
    		c: function create() {
    			t0 = space();
    			h1 = element("h1");
    			h1.textContent = "This is not Meatspac.es";
    			t2 = space();
    			button = element("button");
    			button.textContent = "Create a New Room";
    			document.title = "NOT Meatspac.es";
    			add_location(h1, file$1, 20, 0, 345);
    			add_location(button, file$1, 22, 0, 379);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor, remount) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, button, anchor);
    			if (remount) dispose();
    			dispose = listen_dev(button, "click", handleNewRoomClick, false, false, false);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(button);
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    async function handleNewRoomClick() {
    	const newRoom = await firestoreDb.collection("rooms").add({});
    	src_3(`rooms/${newRoom.id}`);
    }

    function instance$3($$self, $$props, $$invalidate) {
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Routes", $$slots, []);

    	$$self.$capture_state = () => ({
    		navigateTo: src_3,
    		firestoreDb,
    		handleNewRoomClick
    	});

    	return [];
    }

    class Routes extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Routes",
    			options,
    			id: create_fragment$3.name
    		});
    	}
    }

    function cubicOut(t) {
        const f = t - 1.0;
        return f * f * f + 1.0;
    }
    function quintOut(t) {
        return --t * t * t * t * t + 1;
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __rest$1(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function crossfade(_a) {
        var { fallback } = _a, defaults = __rest$1(_a, ["fallback"]);
        const to_receive = new Map();
        const to_send = new Map();
        function crossfade(from, node, params) {
            const { delay = 0, duration = d => Math.sqrt(d) * 30, easing = cubicOut } = assign(assign({}, defaults), params);
            const to = node.getBoundingClientRect();
            const dx = from.left - to.left;
            const dy = from.top - to.top;
            const dw = from.width / to.width;
            const dh = from.height / to.height;
            const d = Math.sqrt(dx * dx + dy * dy);
            const style = getComputedStyle(node);
            const transform = style.transform === 'none' ? '' : style.transform;
            const opacity = +style.opacity;
            return {
                delay,
                duration: is_function(duration) ? duration(d) : duration,
                easing,
                css: (t, u) => `
				opacity: ${t * opacity};
				transform-origin: top left;
				transform: ${transform} translate(${u * dx}px,${u * dy}px) scale(${t + (1 - t) * dw}, ${t + (1 - t) * dh});
			`
            };
        }
        function transition(items, counterparts, intro) {
            return (node, params) => {
                items.set(params.key, {
                    rect: node.getBoundingClientRect()
                });
                return () => {
                    if (counterparts.has(params.key)) {
                        const { rect } = counterparts.get(params.key);
                        counterparts.delete(params.key);
                        return crossfade(rect, node, params);
                    }
                    // if the node is disappearing altogether
                    // (i.e. wasn't claimed by the other list)
                    // then we need to supply an outro
                    items.delete(params.key);
                    return fallback && fallback(node, params, intro);
                };
            };
        }
        return [
            transition(to_send, to_receive, false),
            transition(to_receive, to_send, true)
        ];
    }

    function flip(node, animation, params) {
        const style = getComputedStyle(node);
        const transform = style.transform === 'none' ? '' : style.transform;
        const scaleX = animation.from.width / node.clientWidth;
        const scaleY = animation.from.height / node.clientHeight;
        const dx = (animation.from.left - animation.to.left) / scaleX;
        const dy = (animation.from.top - animation.to.top) / scaleY;
        const d = Math.sqrt(dx * dx + dy * dy);
        const { delay = 0, duration = (d) => Math.sqrt(d) * 120, easing = cubicOut } = params;
        return {
            delay,
            duration: is_function(duration) ? duration(d) : duration,
            easing,
            css: (_t, u) => `transform: ${transform} translate(${u * dx}px, ${u * dy}px);`
        };
    }

    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
    var inited = false;
    function init$1 () {
      inited = true;
      var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
      for (var i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }

      revLookup['-'.charCodeAt(0)] = 62;
      revLookup['_'.charCodeAt(0)] = 63;
    }

    function toByteArray (b64) {
      if (!inited) {
        init$1();
      }
      var i, j, l, tmp, placeHolders, arr;
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }

      // the number of equal signs (place holders)
      // if there are two placeholders, than the two characters before it
      // represent one byte
      // if there is only one, then the three characters before it represent 2 bytes
      // this is just a cheap hack to not do indexOf twice
      placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

      // base64 is 4/3 + up to two characters of the original data
      arr = new Arr(len * 3 / 4 - placeHolders);

      // if there are placeholders, only get up to the last complete 4 chars
      l = placeHolders > 0 ? len - 4 : len;

      var L = 0;

      for (i = 0, j = 0; i < l; i += 4, j += 3) {
        tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
        arr[L++] = (tmp >> 16) & 0xFF;
        arr[L++] = (tmp >> 8) & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      if (placeHolders === 2) {
        tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
        arr[L++] = tmp & 0xFF;
      } else if (placeHolders === 1) {
        tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
        arr[L++] = (tmp >> 8) & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      return arr
    }

    function tripletToBase64 (num) {
      return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
    }

    function encodeChunk (uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
        output.push(tripletToBase64(tmp));
      }
      return output.join('')
    }

    function fromByteArray (uint8) {
      if (!inited) {
        init$1();
      }
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
      var output = '';
      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        output += lookup[tmp >> 2];
        output += lookup[(tmp << 4) & 0x3F];
        output += '==';
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
        output += lookup[tmp >> 10];
        output += lookup[(tmp >> 4) & 0x3F];
        output += lookup[(tmp << 2) & 0x3F];
        output += '=';
      }

      parts.push(output);

      return parts.join('')
    }

    function read (buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? (nBytes - 1) : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];

      i += d;

      e = s & ((1 << (-nBits)) - 1);
      s >>= (-nBits);
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & ((1 << (-nBits)) - 1);
      e >>= (-nBits);
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : ((s ? -1 : 1) * Infinity)
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    }

    function write (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
      var i = isLE ? 0 : (nBytes - 1);
      var d = isLE ? 1 : -1;
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = (e << mLen) | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    }

    var toString = {}.toString;

    var isArray = Array.isArray || function (arr) {
      return toString.call(arr) == '[object Array]';
    };

    var INSPECT_MAX_BYTES = 50;

    /**
     * If `Buffer.TYPED_ARRAY_SUPPORT`:
     *   === true    Use Uint8Array implementation (fastest)
     *   === false   Use Object implementation (most compatible, even IE6)
     *
     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
     * Opera 11.6+, iOS 4.2+.
     *
     * Due to various browser bugs, sometimes the Object implementation will be used even
     * when the browser supports typed arrays.
     *
     * Note:
     *
     *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
     *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
     *
     *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
     *
     *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
     *     incorrect length in some situations.

     * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
     * get the Object implementation, which is slower but behaves correctly.
     */
    Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
      ? global$1.TYPED_ARRAY_SUPPORT
      : true;

    /*
     * Export kMaxLength after typed array support is determined.
     */
    var _kMaxLength = kMaxLength();

    function kMaxLength () {
      return Buffer.TYPED_ARRAY_SUPPORT
        ? 0x7fffffff
        : 0x3fffffff
    }

    function createBuffer (that, length) {
      if (kMaxLength() < length) {
        throw new RangeError('Invalid typed array length')
      }
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = new Uint8Array(length);
        that.__proto__ = Buffer.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        if (that === null) {
          that = new Buffer(length);
        }
        that.length = length;
      }

      return that
    }

    /**
     * The Buffer constructor returns instances of `Uint8Array` that have their
     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
     * returns a single octet.
     *
     * The `Uint8Array` prototype remains unmodified.
     */

    function Buffer (arg, encodingOrOffset, length) {
      if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
        return new Buffer(arg, encodingOrOffset, length)
      }

      // Common case.
      if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
          throw new Error(
            'If encoding is specified then the first argument must be a string'
          )
        }
        return allocUnsafe(this, arg)
      }
      return from(this, arg, encodingOrOffset, length)
    }

    Buffer.poolSize = 8192; // not used by this implementation

    // TODO: Legacy, not needed anymore. Remove in next major version.
    Buffer._augment = function (arr) {
      arr.__proto__ = Buffer.prototype;
      return arr
    };

    function from (that, value, encodingOrOffset, length) {
      if (typeof value === 'number') {
        throw new TypeError('"value" argument must not be a number')
      }

      if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
        return fromArrayBuffer(that, value, encodingOrOffset, length)
      }

      if (typeof value === 'string') {
        return fromString(that, value, encodingOrOffset)
      }

      return fromObject(that, value)
    }

    /**
     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
     * if value is a number.
     * Buffer.from(str[, encoding])
     * Buffer.from(array)
     * Buffer.from(buffer)
     * Buffer.from(arrayBuffer[, byteOffset[, length]])
     **/
    Buffer.from = function (value, encodingOrOffset, length) {
      return from(null, value, encodingOrOffset, length)
    };

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      Buffer.prototype.__proto__ = Uint8Array.prototype;
      Buffer.__proto__ = Uint8Array;
    }

    function assertSize (size) {
      if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be a number')
      } else if (size < 0) {
        throw new RangeError('"size" argument must not be negative')
      }
    }

    function alloc (that, size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(that, size)
      }
      if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpretted as a start offset.
        return typeof encoding === 'string'
          ? createBuffer(that, size).fill(fill, encoding)
          : createBuffer(that, size).fill(fill)
      }
      return createBuffer(that, size)
    }

    /**
     * Creates a new filled Buffer instance.
     * alloc(size[, fill[, encoding]])
     **/
    Buffer.alloc = function (size, fill, encoding) {
      return alloc(null, size, fill, encoding)
    };

    function allocUnsafe (that, size) {
      assertSize(size);
      that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
      if (!Buffer.TYPED_ARRAY_SUPPORT) {
        for (var i = 0; i < size; ++i) {
          that[i] = 0;
        }
      }
      return that
    }

    /**
     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
     * */
    Buffer.allocUnsafe = function (size) {
      return allocUnsafe(null, size)
    };
    /**
     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
     */
    Buffer.allocUnsafeSlow = function (size) {
      return allocUnsafe(null, size)
    };

    function fromString (that, string, encoding) {
      if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8';
      }

      if (!Buffer.isEncoding(encoding)) {
        throw new TypeError('"encoding" must be a valid string encoding')
      }

      var length = byteLength(string, encoding) | 0;
      that = createBuffer(that, length);

      var actual = that.write(string, encoding);

      if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        that = that.slice(0, actual);
      }

      return that
    }

    function fromArrayLike (that, array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      that = createBuffer(that, length);
      for (var i = 0; i < length; i += 1) {
        that[i] = array[i] & 255;
      }
      return that
    }

    function fromArrayBuffer (that, array, byteOffset, length) {
      array.byteLength; // this throws if `array` is not a valid ArrayBuffer

      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('\'offset\' is out of bounds')
      }

      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('\'length\' is out of bounds')
      }

      if (byteOffset === undefined && length === undefined) {
        array = new Uint8Array(array);
      } else if (length === undefined) {
        array = new Uint8Array(array, byteOffset);
      } else {
        array = new Uint8Array(array, byteOffset, length);
      }

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = array;
        that.__proto__ = Buffer.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        that = fromArrayLike(that, array);
      }
      return that
    }

    function fromObject (that, obj) {
      if (internalIsBuffer(obj)) {
        var len = checked(obj.length) | 0;
        that = createBuffer(that, len);

        if (that.length === 0) {
          return that
        }

        obj.copy(that, 0, 0, len);
        return that
      }

      if (obj) {
        if ((typeof ArrayBuffer !== 'undefined' &&
            obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
          if (typeof obj.length !== 'number' || isnan(obj.length)) {
            return createBuffer(that, 0)
          }
          return fromArrayLike(that, obj)
        }

        if (obj.type === 'Buffer' && isArray(obj.data)) {
          return fromArrayLike(that, obj.data)
        }
      }

      throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
    }

    function checked (length) {
      // Note: cannot use `length < kMaxLength()` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= kMaxLength()) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                             'size: 0x' + kMaxLength().toString(16) + ' bytes')
      }
      return length | 0
    }

    function SlowBuffer (length) {
      if (+length != length) { // eslint-disable-line eqeqeq
        length = 0;
      }
      return Buffer.alloc(+length)
    }
    Buffer.isBuffer = isBuffer;
    function internalIsBuffer (b) {
      return !!(b != null && b._isBuffer)
    }

    Buffer.compare = function compare (a, b) {
      if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
        throw new TypeError('Arguments must be Buffers')
      }

      if (a === b) return 0

      var x = a.length;
      var y = b.length;

      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    Buffer.isEncoding = function isEncoding (encoding) {
      switch (String(encoding).toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return true
        default:
          return false
      }
    };

    Buffer.concat = function concat (list, length) {
      if (!isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }

      if (list.length === 0) {
        return Buffer.alloc(0)
      }

      var i;
      if (length === undefined) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }

      var buffer = Buffer.allocUnsafe(length);
      var pos = 0;
      for (i = 0; i < list.length; ++i) {
        var buf = list[i];
        if (!internalIsBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers')
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer
    };

    function byteLength (string, encoding) {
      if (internalIsBuffer(string)) {
        return string.length
      }
      if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
          (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
        return string.byteLength
      }
      if (typeof string !== 'string') {
        string = '' + string;
      }

      var len = string.length;
      if (len === 0) return 0

      // Use a for loop to avoid recursion
      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'ascii':
          case 'latin1':
          case 'binary':
            return len
          case 'utf8':
          case 'utf-8':
          case undefined:
            return utf8ToBytes(string).length
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return len * 2
          case 'hex':
            return len >>> 1
          case 'base64':
            return base64ToBytes(string).length
          default:
            if (loweredCase) return utf8ToBytes(string).length // assume utf8
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer.byteLength = byteLength;

    function slowToString (encoding, start, end) {
      var loweredCase = false;

      // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
      // property of a typed array.

      // This behaves neither like String nor Uint8Array in that we set start/end
      // to their upper/lower bounds if the value passed is out of range.
      // undefined is handled specially as per ECMA-262 6th Edition,
      // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
      if (start === undefined || start < 0) {
        start = 0;
      }
      // Return early if start > this.length. Done here to prevent potential uint32
      // coercion fail below.
      if (start > this.length) {
        return ''
      }

      if (end === undefined || end > this.length) {
        end = this.length;
      }

      if (end <= 0) {
        return ''
      }

      // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
      end >>>= 0;
      start >>>= 0;

      if (end <= start) {
        return ''
      }

      if (!encoding) encoding = 'utf8';

      while (true) {
        switch (encoding) {
          case 'hex':
            return hexSlice(this, start, end)

          case 'utf8':
          case 'utf-8':
            return utf8Slice(this, start, end)

          case 'ascii':
            return asciiSlice(this, start, end)

          case 'latin1':
          case 'binary':
            return latin1Slice(this, start, end)

          case 'base64':
            return base64Slice(this, start, end)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return utf16leSlice(this, start, end)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
        }
      }
    }

    // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
    // Buffer instances.
    Buffer.prototype._isBuffer = true;

    function swap (b, n, m) {
      var i = b[n];
      b[n] = b[m];
      b[m] = i;
    }

    Buffer.prototype.swap16 = function swap16 () {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits')
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this
    };

    Buffer.prototype.swap32 = function swap32 () {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits')
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this
    };

    Buffer.prototype.swap64 = function swap64 () {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits')
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this
    };

    Buffer.prototype.toString = function toString () {
      var length = this.length | 0;
      if (length === 0) return ''
      if (arguments.length === 0) return utf8Slice(this, 0, length)
      return slowToString.apply(this, arguments)
    };

    Buffer.prototype.equals = function equals (b) {
      if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
      if (this === b) return true
      return Buffer.compare(this, b) === 0
    };

    Buffer.prototype.inspect = function inspect () {
      var str = '';
      var max = INSPECT_MAX_BYTES;
      if (this.length > 0) {
        str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
        if (this.length > max) str += ' ... ';
      }
      return '<Buffer ' + str + '>'
    };

    Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
      if (!internalIsBuffer(target)) {
        throw new TypeError('Argument must be a Buffer')
      }

      if (start === undefined) {
        start = 0;
      }
      if (end === undefined) {
        end = target ? target.length : 0;
      }
      if (thisStart === undefined) {
        thisStart = 0;
      }
      if (thisEnd === undefined) {
        thisEnd = this.length;
      }

      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index')
      }

      if (thisStart >= thisEnd && start >= end) {
        return 0
      }
      if (thisStart >= thisEnd) {
        return -1
      }
      if (start >= end) {
        return 1
      }

      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;

      if (this === target) return 0

      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);

      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);

      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    //
    // Arguments:
    // - buffer - a Buffer to search
    // - val - a string, Buffer, or number
    // - byteOffset - an index into `buffer`; will be clamped to an int32
    // - encoding - an optional encoding, relevant is val is a string
    // - dir - true for indexOf, false for lastIndexOf
    function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
      // Empty buffer means no match
      if (buffer.length === 0) return -1

      // Normalize byteOffset
      if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff;
      } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000;
      }
      byteOffset = +byteOffset;  // Coerce to Number.
      if (isNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : (buffer.length - 1);
      }

      // Normalize byteOffset: negative offsets start from the end of the buffer
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir) return -1
        else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1
      }

      // Normalize val
      if (typeof val === 'string') {
        val = Buffer.from(val, encoding);
      }

      // Finally, search either indexOf (if dir is true) or lastIndexOf
      if (internalIsBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
          return -1
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
      } else if (typeof val === 'number') {
        val = val & 0xFF; // Search for a byte value [0-255]
        if (Buffer.TYPED_ARRAY_SUPPORT &&
            typeof Uint8Array.prototype.indexOf === 'function') {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
          }
        }
        return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
      }

      throw new TypeError('val must be string, number or Buffer')
    }

    function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;

      if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' ||
            encoding === 'utf16le' || encoding === 'utf-16le') {
          if (arr.length < 2 || val.length < 2) {
            return -1
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }

      function read (buf, i) {
        if (indexSize === 1) {
          return buf[i]
        } else {
          return buf.readUInt16BE(i * indexSize)
        }
      }

      var i;
      if (dir) {
        var foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
          } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          var found = true;
          for (var j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break
            }
          }
          if (found) return i
        }
      }

      return -1
    }

    Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1
    };

    Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
    };

    Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
    };

    function hexWrite (buf, string, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }

      // must be an even number of digits
      var strLen = string.length;
      if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

      if (length > strLen / 2) {
        length = strLen / 2;
      }
      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (isNaN(parsed)) return i
        buf[offset + i] = parsed;
      }
      return i
    }

    function utf8Write (buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
    }

    function asciiWrite (buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length)
    }

    function latin1Write (buf, string, offset, length) {
      return asciiWrite(buf, string, offset, length)
    }

    function base64Write (buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length)
    }

    function ucs2Write (buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
    }

    Buffer.prototype.write = function write (string, offset, length, encoding) {
      // Buffer#write(string)
      if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
      // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
      // Buffer#write(string, offset[, length][, encoding])
      } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length)) {
          length = length | 0;
          if (encoding === undefined) encoding = 'utf8';
        } else {
          encoding = length;
          length = undefined;
        }
      // legacy write(string, encoding, offset, length) - remove in v0.13
      } else {
        throw new Error(
          'Buffer.write(string, encoding, offset[, length]) is no longer supported'
        )
      }

      var remaining = this.length - offset;
      if (length === undefined || length > remaining) length = remaining;

      if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds')
      }

      if (!encoding) encoding = 'utf8';

      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'hex':
            return hexWrite(this, string, offset, length)

          case 'utf8':
          case 'utf-8':
            return utf8Write(this, string, offset, length)

          case 'ascii':
            return asciiWrite(this, string, offset, length)

          case 'latin1':
          case 'binary':
            return latin1Write(this, string, offset, length)

          case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return ucs2Write(this, string, offset, length)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };

    Buffer.prototype.toJSON = function toJSON () {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      }
    };

    function base64Slice (buf, start, end) {
      if (start === 0 && end === buf.length) {
        return fromByteArray(buf)
      } else {
        return fromByteArray(buf.slice(start, end))
      }
    }

    function utf8Slice (buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];

      var i = start;
      while (i < end) {
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = (firstByte > 0xEF) ? 4
          : (firstByte > 0xDF) ? 3
          : (firstByte > 0xBF) ? 2
          : 1;

        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;

          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 0x80) {
                codePoint = firstByte;
              }
              break
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
                if (tempCodePoint > 0x7F) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }

        if (codePoint === null) {
          // we did not generate a valid codePoint so insert a
          // replacement char (U+FFFD) and advance only 1 byte
          codePoint = 0xFFFD;
          bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
          // encode to utf16 (surrogate pair dance)
          codePoint -= 0x10000;
          res.push(codePoint >>> 10 & 0x3FF | 0xD800);
          codePoint = 0xDC00 | codePoint & 0x3FF;
        }

        res.push(codePoint);
        i += bytesPerSequence;
      }

      return decodeCodePointsArray(res)
    }

    // Based on http://stackoverflow.com/a/22747272/680742, the browser with
    // the lowest limit is Chrome, with 0x10000 args.
    // We go 1 magnitude less, for safety
    var MAX_ARGUMENTS_LENGTH = 0x1000;

    function decodeCodePointsArray (codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
      }

      // Decode in chunks to avoid "call stack size exceeded".
      var res = '';
      var i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res
    }

    function asciiSlice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 0x7F);
      }
      return ret
    }

    function latin1Slice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret
    }

    function hexSlice (buf, start, end) {
      var len = buf.length;

      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;

      var out = '';
      for (var i = start; i < end; ++i) {
        out += toHex(buf[i]);
      }
      return out
    }

    function utf16leSlice (buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = '';
      for (var i = 0; i < bytes.length; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }
      return res
    }

    Buffer.prototype.slice = function slice (start, end) {
      var len = this.length;
      start = ~~start;
      end = end === undefined ? len : ~~end;

      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }

      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }

      if (end < start) end = start;

      var newBuf;
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer.prototype;
      } else {
        var sliceLen = end - start;
        newBuf = new Buffer(sliceLen, undefined);
        for (var i = 0; i < sliceLen; ++i) {
          newBuf[i] = this[i + start];
        }
      }

      return newBuf
    };

    /*
     * Need to make sure that buffer isn't trying to write out of bounds.
     */
    function checkOffset (offset, ext, length) {
      if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
      if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
    }

    Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }

      return val
    };

    Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        checkOffset(offset, byteLength, this.length);
      }

      var val = this[offset + --byteLength];
      var mul = 1;
      while (byteLength > 0 && (mul *= 0x100)) {
        val += this[offset + --byteLength] * mul;
      }

      return val
    };

    Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset]
    };

    Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | (this[offset + 1] << 8)
    };

    Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return (this[offset] << 8) | this[offset + 1]
    };

    Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return ((this[offset]) |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16)) +
          (this[offset + 3] * 0x1000000)
    };

    Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] * 0x1000000) +
        ((this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        this[offset + 3])
    };

    Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var i = byteLength;
      var mul = 1;
      var val = this[offset + --i];
      while (i > 0 && (mul *= 0x100)) {
        val += this[offset + --i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 0x80)) return (this[offset])
      return ((0xff - this[offset] + 1) * -1)
    };

    Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset] | (this[offset + 1] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | (this[offset] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16) |
        (this[offset + 3] << 24)
    };

    Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] << 24) |
        (this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        (this[offset + 3])
    };

    Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return read(this, offset, true, 23, 4)
    };

    Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return read(this, offset, false, 23, 4)
    };

    Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return read(this, offset, true, 52, 8)
    };

    Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return read(this, offset, false, 52, 8)
    };

    function checkInt (buf, value, offset, ext, max, min) {
      if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
    }

    Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var mul = 1;
      var i = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var i = byteLength - 1;
      var mul = 1;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
      if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      this[offset] = (value & 0xff);
      return offset + 1
    };

    function objectWriteUInt16 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
        buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
          (littleEndian ? i : 1 - i) * 8;
      }
    }

    Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    function objectWriteUInt32 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffffffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
        buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
      }
    }

    Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = (value >>> 24);
        this[offset + 2] = (value >>> 16);
        this[offset + 1] = (value >>> 8);
        this[offset] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = byteLength - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
      if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      if (value < 0) value = 0xff + value + 1;
      this[offset] = (value & 0xff);
      return offset + 1
    };

    Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
        this[offset + 2] = (value >>> 16);
        this[offset + 3] = (value >>> 24);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (value < 0) value = 0xffffffff + value + 1;
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    function checkIEEE754 (buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
      if (offset < 0) throw new RangeError('Index out of range')
    }

    function writeFloat (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4);
      }
      write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4
    }

    Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert)
    };

    function writeDouble (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8);
      }
      write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8
    }

    Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert)
    };

    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
    Buffer.prototype.copy = function copy (target, targetStart, start, end) {
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;

      // Copy 0 bytes; we're done
      if (end === start) return 0
      if (target.length === 0 || this.length === 0) return 0

      // Fatal error conditions
      if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds')
      }
      if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
      if (end < 0) throw new RangeError('sourceEnd out of bounds')

      // Are we oob?
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }

      var len = end - start;
      var i;

      if (this === target && start < targetStart && targetStart < end) {
        // descending copy from end
        for (i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start];
        }
      } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
        // ascending copy from start
        for (i = 0; i < len; ++i) {
          target[i + targetStart] = this[i + start];
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, start + len),
          targetStart
        );
      }

      return len
    };

    // Usage:
    //    buffer.fill(number[, offset[, end]])
    //    buffer.fill(buffer[, offset[, end]])
    //    buffer.fill(string[, offset[, end]][, encoding])
    Buffer.prototype.fill = function fill (val, start, end, encoding) {
      // Handle string cases:
      if (typeof val === 'string') {
        if (typeof start === 'string') {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === 'string') {
          encoding = end;
          end = this.length;
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (code < 256) {
            val = code;
          }
        }
        if (encoding !== undefined && typeof encoding !== 'string') {
          throw new TypeError('encoding must be a string')
        }
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding)
        }
      } else if (typeof val === 'number') {
        val = val & 255;
      }

      // Invalid ranges are not set to a default, so can range check early.
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index')
      }

      if (end <= start) {
        return this
      }

      start = start >>> 0;
      end = end === undefined ? this.length : end >>> 0;

      if (!val) val = 0;

      var i;
      if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = internalIsBuffer(val)
          ? val
          : utf8ToBytes(new Buffer(val, encoding).toString());
        var len = bytes.length;
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }

      return this
    };

    // HELPER FUNCTIONS
    // ================

    var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

    function base64clean (str) {
      // Node strips out invalid characters like \n and \t from the string, base64-js does not
      str = stringtrim(str).replace(INVALID_BASE64_RE, '');
      // Node converts strings with length < 2 to ''
      if (str.length < 2) return ''
      // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
      while (str.length % 4 !== 0) {
        str = str + '=';
      }
      return str
    }

    function stringtrim (str) {
      if (str.trim) return str.trim()
      return str.replace(/^\s+|\s+$/g, '')
    }

    function toHex (n) {
      if (n < 16) return '0' + n.toString(16)
      return n.toString(16)
    }

    function utf8ToBytes (string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];

      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);

        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            }

            // valid lead
            leadSurrogate = codePoint;

            continue
          }

          // 2 leads in a row
          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            leadSurrogate = codePoint;
            continue
          }

          // valid surrogate pair
          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }

        leadSurrogate = null;

        // encode utf8
        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break
          bytes.push(codePoint);
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break
          bytes.push(
            codePoint >> 0x6 | 0xC0,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break
          bytes.push(
            codePoint >> 0xC | 0xE0,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break
          bytes.push(
            codePoint >> 0x12 | 0xF0,
            codePoint >> 0xC & 0x3F | 0x80,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else {
          throw new Error('Invalid code point')
        }
      }

      return bytes
    }

    function asciiToBytes (str) {
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF);
      }
      return byteArray
    }

    function utf16leToBytes (str, units) {
      var c, hi, lo;
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break

        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }

      return byteArray
    }


    function base64ToBytes (str) {
      return toByteArray(base64clean(str))
    }

    function blitBuffer (src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if ((i + offset >= dst.length) || (i >= src.length)) break
        dst[i + offset] = src[i];
      }
      return i
    }

    function isnan (val) {
      return val !== val // eslint-disable-line no-self-compare
    }


    // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
    // The _isBuffer check is for Safari 5-7 support, because it's missing
    // Object.prototype.constructor. Remove this eventually
    function isBuffer(obj) {
      return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
    }

    function isFastBuffer (obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
    }

    // For Node v0.10 support. Remove this eventually.
    function isSlowBuffer (obj) {
      return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
    }

    var bufferEs6 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
        kMaxLength: _kMaxLength,
        Buffer: Buffer,
        SlowBuffer: SlowBuffer,
        isBuffer: isBuffer
    });

    var inherits;
    if (typeof Object.create === 'function'){
      inherits = function inherits(ctor, superCtor) {
        // implementation from standard node.js 'util' module
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      };
    } else {
      inherits = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      };
    }
    var inherits$1 = inherits;

    var formatRegExp = /%[sdj%]/g;
    function format(f) {
      if (!isString(f)) {
        var objects = [];
        for (var i = 0; i < arguments.length; i++) {
          objects.push(inspect(arguments[i]));
        }
        return objects.join(' ');
      }

      var i = 1;
      var args = arguments;
      var len = args.length;
      var str = String(f).replace(formatRegExp, function(x) {
        if (x === '%%') return '%';
        if (i >= len) return x;
        switch (x) {
          case '%s': return String(args[i++]);
          case '%d': return Number(args[i++]);
          case '%j':
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return '[Circular]';
            }
          default:
            return x;
        }
      });
      for (var x = args[i]; i < len; x = args[++i]) {
        if (isNull(x) || !isObject(x)) {
          str += ' ' + x;
        } else {
          str += ' ' + inspect(x);
        }
      }
      return str;
    }

    // Mark that a method should not be used.
    // Returns a modified function which warns once by default.
    // If --no-deprecation is set, then it is a no-op.
    function deprecate(fn, msg) {
      // Allow for deprecating things in the process of starting up.
      if (isUndefined(global$1.process)) {
        return function() {
          return deprecate(fn, msg).apply(this, arguments);
        };
      }

      var warned = false;
      function deprecated() {
        if (!warned) {
          {
            console.error(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }

      return deprecated;
    }

    var debugs = {};
    var debugEnviron;
    function debuglog(set) {
      if (isUndefined(debugEnviron))
        debugEnviron = process.env.NODE_DEBUG || '';
      set = set.toUpperCase();
      if (!debugs[set]) {
        if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
          var pid = 0;
          debugs[set] = function() {
            var msg = format.apply(null, arguments);
            console.error('%s %d: %s', set, pid, msg);
          };
        } else {
          debugs[set] = function() {};
        }
      }
      return debugs[set];
    }

    /**
     * Echos the value of a value. Trys to print the value out
     * in the best way possible given the different types.
     *
     * @param {Object} obj The object to print out.
     * @param {Object} opts Optional options object that alters the output.
     */
    /* legacy: obj, showHidden, depth, colors*/
    function inspect(obj, opts) {
      // default options
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      // legacy...
      if (arguments.length >= 3) ctx.depth = arguments[2];
      if (arguments.length >= 4) ctx.colors = arguments[3];
      if (isBoolean(opts)) {
        // legacy...
        ctx.showHidden = opts;
      } else if (opts) {
        // got an "options" object
        _extend(ctx, opts);
      }
      // set default options
      if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
      if (isUndefined(ctx.depth)) ctx.depth = 2;
      if (isUndefined(ctx.colors)) ctx.colors = false;
      if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
      if (ctx.colors) ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }

    // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
    inspect.colors = {
      'bold' : [1, 22],
      'italic' : [3, 23],
      'underline' : [4, 24],
      'inverse' : [7, 27],
      'white' : [37, 39],
      'grey' : [90, 39],
      'black' : [30, 39],
      'blue' : [34, 39],
      'cyan' : [36, 39],
      'green' : [32, 39],
      'magenta' : [35, 39],
      'red' : [31, 39],
      'yellow' : [33, 39]
    };

    // Don't use 'blue' not visible on cmd.exe
    inspect.styles = {
      'special': 'cyan',
      'number': 'yellow',
      'boolean': 'yellow',
      'undefined': 'grey',
      'null': 'bold',
      'string': 'green',
      'date': 'magenta',
      // "name": intentionally not styling
      'regexp': 'red'
    };


    function stylizeWithColor(str, styleType) {
      var style = inspect.styles[styleType];

      if (style) {
        return '\u001b[' + inspect.colors[style][0] + 'm' + str +
               '\u001b[' + inspect.colors[style][1] + 'm';
      } else {
        return str;
      }
    }


    function stylizeNoColor(str, styleType) {
      return str;
    }


    function arrayToHash(array) {
      var hash = {};

      array.forEach(function(val, idx) {
        hash[val] = true;
      });

      return hash;
    }


    function formatValue(ctx, value, recurseTimes) {
      // Provide a hook for user-specified inspect functions.
      // Check that value is an object with an inspect function on it
      if (ctx.customInspect &&
          value &&
          isFunction(value.inspect) &&
          // Filter out the util module, it's inspect function is special
          value.inspect !== inspect &&
          // Also filter out any prototype objects using the circular check.
          !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }

      // Primitive types cannot have properties
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }

      // Look up the keys of the object.
      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);

      if (ctx.showHidden) {
        keys = Object.getOwnPropertyNames(value);
      }

      // IE doesn't make error fields non-enumerable
      // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
      if (isError(value)
          && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
        return formatError(value);
      }

      // Some type of object without properties can be shortcutted.
      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ': ' + value.name : '';
          return ctx.stylize('[Function' + name + ']', 'special');
        }
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }
        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), 'date');
        }
        if (isError(value)) {
          return formatError(value);
        }
      }

      var base = '', array = false, braces = ['{', '}'];

      // Make Array say that they are Array
      if (isArray$1(value)) {
        array = true;
        braces = ['[', ']'];
      }

      // Make functions say that they are functions
      if (isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
      }

      // Make RegExps say that they are RegExps
      if (isRegExp(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
      }

      // Make dates with properties first say the date
      if (isDate(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
      }

      // Make error with message first say the error
      if (isError(value)) {
        base = ' ' + formatError(value);
      }

      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }

      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        } else {
          return ctx.stylize('[Object]', 'special');
        }
      }

      ctx.seen.push(value);

      var output;
      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function(key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }

      ctx.seen.pop();

      return reduceToSingleString(output, base, braces);
    }


    function formatPrimitive(ctx, value) {
      if (isUndefined(value))
        return ctx.stylize('undefined', 'undefined');
      if (isString(value)) {
        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                                 .replace(/'/g, "\\'")
                                                 .replace(/\\"/g, '"') + '\'';
        return ctx.stylize(simple, 'string');
      }
      if (isNumber(value))
        return ctx.stylize('' + value, 'number');
      if (isBoolean(value))
        return ctx.stylize('' + value, 'boolean');
      // For some reason typeof null is "object", so special case here.
      if (isNull(value))
        return ctx.stylize('null', 'null');
    }


    function formatError(value) {
      return '[' + Error.prototype.toString.call(value) + ']';
    }


    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];
      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
              String(i), true));
        } else {
          output.push('');
        }
      }
      keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
              key, true));
        }
      });
      return output;
    }


    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (desc.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }
      if (!hasOwnProperty(visibleKeys, key)) {
        name = '[' + key + ']';
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf('\n') > -1) {
            if (array) {
              str = str.split('\n').map(function(line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function(line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = ctx.stylize('[Circular]', 'special');
        }
      }
      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'")
                     .replace(/\\"/g, '"')
                     .replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, 'string');
        }
      }

      return name + ': ' + str;
    }


    function reduceToSingleString(output, base, braces) {
      var length = output.reduce(function(prev, cur) {
        if (cur.indexOf('\n') >= 0) ;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
      }, 0);

      if (length > 60) {
        return braces[0] +
               (base === '' ? '' : base + '\n ') +
               ' ' +
               output.join(',\n  ') +
               ' ' +
               braces[1];
      }

      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }


    // NOTE: These type checking functions intentionally don't use `instanceof`
    // because it is fragile and can be easily faked with `Object.create()`.
    function isArray$1(ar) {
      return Array.isArray(ar);
    }

    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }

    function isNull(arg) {
      return arg === null;
    }

    function isNullOrUndefined(arg) {
      return arg == null;
    }

    function isNumber(arg) {
      return typeof arg === 'number';
    }

    function isString(arg) {
      return typeof arg === 'string';
    }

    function isSymbol(arg) {
      return typeof arg === 'symbol';
    }

    function isUndefined(arg) {
      return arg === void 0;
    }

    function isRegExp(re) {
      return isObject(re) && objectToString(re) === '[object RegExp]';
    }

    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }

    function isDate(d) {
      return isObject(d) && objectToString(d) === '[object Date]';
    }

    function isError(e) {
      return isObject(e) &&
          (objectToString(e) === '[object Error]' || e instanceof Error);
    }

    function isFunction(arg) {
      return typeof arg === 'function';
    }

    function isPrimitive(arg) {
      return arg === null ||
             typeof arg === 'boolean' ||
             typeof arg === 'number' ||
             typeof arg === 'string' ||
             typeof arg === 'symbol' ||  // ES6 symbol
             typeof arg === 'undefined';
    }

    function isBuffer$1(maybeBuf) {
      return isBuffer(maybeBuf);
    }

    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }


    function pad(n) {
      return n < 10 ? '0' + n.toString(10) : n.toString(10);
    }


    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                  'Oct', 'Nov', 'Dec'];

    // 26 Feb 16:19:34
    function timestamp() {
      var d = new Date();
      var time = [pad(d.getHours()),
                  pad(d.getMinutes()),
                  pad(d.getSeconds())].join(':');
      return [d.getDate(), months[d.getMonth()], time].join(' ');
    }


    // log is just a thin wrapper to console.log that prepends a timestamp
    function log() {
      console.log('%s - %s', timestamp(), format.apply(null, arguments));
    }

    function _extend(origin, add) {
      // Don't do anything if add isn't an object
      if (!add || !isObject(add)) return origin;

      var keys = Object.keys(add);
      var i = keys.length;
      while (i--) {
        origin[keys[i]] = add[keys[i]];
      }
      return origin;
    }
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    var util = {
      inherits: inherits$1,
      _extend: _extend,
      log: log,
      isBuffer: isBuffer$1,
      isPrimitive: isPrimitive,
      isFunction: isFunction,
      isError: isError,
      isDate: isDate,
      isObject: isObject,
      isRegExp: isRegExp,
      isUndefined: isUndefined,
      isSymbol: isSymbol,
      isString: isString,
      isNumber: isNumber,
      isNullOrUndefined: isNullOrUndefined,
      isNull: isNull,
      isBoolean: isBoolean,
      isArray: isArray$1,
      inspect: inspect,
      deprecate: deprecate,
      format: format,
      debuglog: debuglog
    };

    function compare(a, b) {
      if (a === b) {
        return 0;
      }

      var x = a.length;
      var y = b.length;

      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
      }

      if (x < y) {
        return -1;
      }
      if (y < x) {
        return 1;
      }
      return 0;
    }
    var hasOwn = Object.prototype.hasOwnProperty;

    var objectKeys = Object.keys || function (obj) {
      var keys = [];
      for (var key in obj) {
        if (hasOwn.call(obj, key)) keys.push(key);
      }
      return keys;
    };
    var pSlice = Array.prototype.slice;
    var _functionsHaveNames;
    function functionsHaveNames() {
      if (typeof _functionsHaveNames !== 'undefined') {
        return _functionsHaveNames;
      }
      return _functionsHaveNames = (function () {
        return function foo() {}.name === 'foo';
      }());
    }
    function pToString (obj) {
      return Object.prototype.toString.call(obj);
    }
    function isView(arrbuf) {
      if (isBuffer(arrbuf)) {
        return false;
      }
      if (typeof global$1.ArrayBuffer !== 'function') {
        return false;
      }
      if (typeof ArrayBuffer.isView === 'function') {
        return ArrayBuffer.isView(arrbuf);
      }
      if (!arrbuf) {
        return false;
      }
      if (arrbuf instanceof DataView) {
        return true;
      }
      if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
        return true;
      }
      return false;
    }
    // 1. The assert module provides functions that throw
    // AssertionError's when particular conditions are not met. The
    // assert module must conform to the following interface.

    function assert(value, message) {
      if (!value) fail(value, true, message, '==', ok);
    }

    // 2. The AssertionError is defined in assert.
    // new assert.AssertionError({ message: message,
    //                             actual: actual,
    //                             expected: expected })

    var regex = /\s*function\s+([^\(\s]*)\s*/;
    // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
    function getName(func) {
      if (!isFunction(func)) {
        return;
      }
      if (functionsHaveNames()) {
        return func.name;
      }
      var str = func.toString();
      var match = str.match(regex);
      return match && match[1];
    }
    assert.AssertionError = AssertionError;
    function AssertionError(options) {
      this.name = 'AssertionError';
      this.actual = options.actual;
      this.expected = options.expected;
      this.operator = options.operator;
      if (options.message) {
        this.message = options.message;
        this.generatedMessage = false;
      } else {
        this.message = getMessage(this);
        this.generatedMessage = true;
      }
      var stackStartFunction = options.stackStartFunction || fail;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, stackStartFunction);
      } else {
        // non v8 browsers so we can have a stacktrace
        var err = new Error();
        if (err.stack) {
          var out = err.stack;

          // try to strip useless frames
          var fn_name = getName(stackStartFunction);
          var idx = out.indexOf('\n' + fn_name);
          if (idx >= 0) {
            // once we have located the function frame
            // we need to strip out everything before it (and its line)
            var next_line = out.indexOf('\n', idx + 1);
            out = out.substring(next_line + 1);
          }

          this.stack = out;
        }
      }
    }

    // assert.AssertionError instanceof Error
    inherits$1(AssertionError, Error);

    function truncate(s, n) {
      if (typeof s === 'string') {
        return s.length < n ? s : s.slice(0, n);
      } else {
        return s;
      }
    }
    function inspect$1(something) {
      if (functionsHaveNames() || !isFunction(something)) {
        return inspect(something);
      }
      var rawname = getName(something);
      var name = rawname ? ': ' + rawname : '';
      return '[Function' +  name + ']';
    }
    function getMessage(self) {
      return truncate(inspect$1(self.actual), 128) + ' ' +
             self.operator + ' ' +
             truncate(inspect$1(self.expected), 128);
    }

    // At present only the three keys mentioned above are used and
    // understood by the spec. Implementations or sub modules can pass
    // other keys to the AssertionError's constructor - they will be
    // ignored.

    // 3. All of the following functions must throw an AssertionError
    // when a corresponding condition is not met, with a message that
    // may be undefined if not provided.  All assertion methods provide
    // both the actual and expected values to the assertion error for
    // display purposes.

    function fail(actual, expected, message, operator, stackStartFunction) {
      throw new AssertionError({
        message: message,
        actual: actual,
        expected: expected,
        operator: operator,
        stackStartFunction: stackStartFunction
      });
    }

    // EXTENSION! allows for well behaved errors defined elsewhere.
    assert.fail = fail;

    // 4. Pure assertion tests whether a value is truthy, as determined
    // by !!guard.
    // assert.ok(guard, message_opt);
    // This statement is equivalent to assert.equal(true, !!guard,
    // message_opt);. To test strictly for the value true, use
    // assert.strictEqual(true, guard, message_opt);.

    function ok(value, message) {
      if (!value) fail(value, true, message, '==', ok);
    }
    assert.ok = ok;

    // 5. The equality assertion tests shallow, coercive equality with
    // ==.
    // assert.equal(actual, expected, message_opt);
    assert.equal = equal;
    function equal(actual, expected, message) {
      if (actual != expected) fail(actual, expected, message, '==', equal);
    }

    // 6. The non-equality assertion tests for whether two objects are not equal
    // with != assert.notEqual(actual, expected, message_opt);
    assert.notEqual = notEqual;
    function notEqual(actual, expected, message) {
      if (actual == expected) {
        fail(actual, expected, message, '!=', notEqual);
      }
    }

    // 7. The equivalence assertion tests a deep equality relation.
    // assert.deepEqual(actual, expected, message_opt);
    assert.deepEqual = deepEqual;
    function deepEqual(actual, expected, message) {
      if (!_deepEqual(actual, expected, false)) {
        fail(actual, expected, message, 'deepEqual', deepEqual);
      }
    }
    assert.deepStrictEqual = deepStrictEqual;
    function deepStrictEqual(actual, expected, message) {
      if (!_deepEqual(actual, expected, true)) {
        fail(actual, expected, message, 'deepStrictEqual', deepStrictEqual);
      }
    }

    function _deepEqual(actual, expected, strict, memos) {
      // 7.1. All identical values are equivalent, as determined by ===.
      if (actual === expected) {
        return true;
      } else if (isBuffer(actual) && isBuffer(expected)) {
        return compare(actual, expected) === 0;

      // 7.2. If the expected value is a Date object, the actual value is
      // equivalent if it is also a Date object that refers to the same time.
      } else if (isDate(actual) && isDate(expected)) {
        return actual.getTime() === expected.getTime();

      // 7.3 If the expected value is a RegExp object, the actual value is
      // equivalent if it is also a RegExp object with the same source and
      // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
      } else if (isRegExp(actual) && isRegExp(expected)) {
        return actual.source === expected.source &&
               actual.global === expected.global &&
               actual.multiline === expected.multiline &&
               actual.lastIndex === expected.lastIndex &&
               actual.ignoreCase === expected.ignoreCase;

      // 7.4. Other pairs that do not both pass typeof value == 'object',
      // equivalence is determined by ==.
      } else if ((actual === null || typeof actual !== 'object') &&
                 (expected === null || typeof expected !== 'object')) {
        return strict ? actual === expected : actual == expected;

      // If both values are instances of typed arrays, wrap their underlying
      // ArrayBuffers in a Buffer each to increase performance
      // This optimization requires the arrays to have the same type as checked by
      // Object.prototype.toString (aka pToString). Never perform binary
      // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
      // bit patterns are not identical.
      } else if (isView(actual) && isView(expected) &&
                 pToString(actual) === pToString(expected) &&
                 !(actual instanceof Float32Array ||
                   actual instanceof Float64Array)) {
        return compare(new Uint8Array(actual.buffer),
                       new Uint8Array(expected.buffer)) === 0;

      // 7.5 For all other Object pairs, including Array objects, equivalence is
      // determined by having the same number of owned properties (as verified
      // with Object.prototype.hasOwnProperty.call), the same set of keys
      // (although not necessarily the same order), equivalent values for every
      // corresponding key, and an identical 'prototype' property. Note: this
      // accounts for both named and indexed properties on Arrays.
      } else if (isBuffer(actual) !== isBuffer(expected)) {
        return false;
      } else {
        memos = memos || {actual: [], expected: []};

        var actualIndex = memos.actual.indexOf(actual);
        if (actualIndex !== -1) {
          if (actualIndex === memos.expected.indexOf(expected)) {
            return true;
          }
        }

        memos.actual.push(actual);
        memos.expected.push(expected);

        return objEquiv(actual, expected, strict, memos);
      }
    }

    function isArguments(object) {
      return Object.prototype.toString.call(object) == '[object Arguments]';
    }

    function objEquiv(a, b, strict, actualVisitedObjects) {
      if (a === null || a === undefined || b === null || b === undefined)
        return false;
      // if one is a primitive, the other must be same
      if (isPrimitive(a) || isPrimitive(b))
        return a === b;
      if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
        return false;
      var aIsArgs = isArguments(a);
      var bIsArgs = isArguments(b);
      if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
        return false;
      if (aIsArgs) {
        a = pSlice.call(a);
        b = pSlice.call(b);
        return _deepEqual(a, b, strict);
      }
      var ka = objectKeys(a);
      var kb = objectKeys(b);
      var key, i;
      // having the same number of owned properties (keys incorporates
      // hasOwnProperty)
      if (ka.length !== kb.length)
        return false;
      //the same set of keys (although not necessarily the same order),
      ka.sort();
      kb.sort();
      //~~~cheap key test
      for (i = ka.length - 1; i >= 0; i--) {
        if (ka[i] !== kb[i])
          return false;
      }
      //equivalent values for every corresponding key, and
      //~~~possibly expensive deep test
      for (i = ka.length - 1; i >= 0; i--) {
        key = ka[i];
        if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
          return false;
      }
      return true;
    }

    // 8. The non-equivalence assertion tests for any deep inequality.
    // assert.notDeepEqual(actual, expected, message_opt);
    assert.notDeepEqual = notDeepEqual;
    function notDeepEqual(actual, expected, message) {
      if (_deepEqual(actual, expected, false)) {
        fail(actual, expected, message, 'notDeepEqual', notDeepEqual);
      }
    }

    assert.notDeepStrictEqual = notDeepStrictEqual;
    function notDeepStrictEqual(actual, expected, message) {
      if (_deepEqual(actual, expected, true)) {
        fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
      }
    }


    // 9. The strict equality assertion tests strict equality, as determined by ===.
    // assert.strictEqual(actual, expected, message_opt);
    assert.strictEqual = strictEqual;
    function strictEqual(actual, expected, message) {
      if (actual !== expected) {
        fail(actual, expected, message, '===', strictEqual);
      }
    }

    // 10. The strict non-equality assertion tests for strict inequality, as
    // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
    assert.notStrictEqual = notStrictEqual;
    function notStrictEqual(actual, expected, message) {
      if (actual === expected) {
        fail(actual, expected, message, '!==', notStrictEqual);
      }
    }

    function expectedException(actual, expected) {
      if (!actual || !expected) {
        return false;
      }

      if (Object.prototype.toString.call(expected) == '[object RegExp]') {
        return expected.test(actual);
      }

      try {
        if (actual instanceof expected) {
          return true;
        }
      } catch (e) {
        // Ignore.  The instanceof check doesn't work for arrow functions.
      }

      if (Error.isPrototypeOf(expected)) {
        return false;
      }

      return expected.call({}, actual) === true;
    }

    function _tryBlock(block) {
      var error;
      try {
        block();
      } catch (e) {
        error = e;
      }
      return error;
    }

    function _throws(shouldThrow, block, expected, message) {
      var actual;

      if (typeof block !== 'function') {
        throw new TypeError('"block" argument must be a function');
      }

      if (typeof expected === 'string') {
        message = expected;
        expected = null;
      }

      actual = _tryBlock(block);

      message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
                (message ? ' ' + message : '.');

      if (shouldThrow && !actual) {
        fail(actual, expected, 'Missing expected exception' + message);
      }

      var userProvidedMessage = typeof message === 'string';
      var isUnwantedException = !shouldThrow && isError(actual);
      var isUnexpectedException = !shouldThrow && actual && !expected;

      if ((isUnwantedException &&
          userProvidedMessage &&
          expectedException(actual, expected)) ||
          isUnexpectedException) {
        fail(actual, expected, 'Got unwanted exception' + message);
      }

      if ((shouldThrow && actual && expected &&
          !expectedException(actual, expected)) || (!shouldThrow && actual)) {
        throw actual;
      }
    }

    // 11. Expected to throw an error:
    // assert.throws(block, Error_opt, message_opt);
    assert.throws = throws;
    function throws(block, /*optional*/error, /*optional*/message) {
      _throws(true, block, error, message);
    }

    // EXTENSION! This is annoying to write outside this module.
    assert.doesNotThrow = doesNotThrow;
    function doesNotThrow(block, /*optional*/error, /*optional*/message) {
      _throws(false, block, error, message);
    }

    assert.ifError = ifError;
    function ifError(err) {
      if (err) throw err;
    }

    var domain;

    // This constructor is used to store event handlers. Instantiating this is
    // faster than explicitly calling `Object.create(null)` to get a "clean" empty
    // object (tested with v8 v4.9).
    function EventHandlers() {}
    EventHandlers.prototype = Object.create(null);

    function EventEmitter() {
      EventEmitter.init.call(this);
    }

    // nodejs oddity
    // require('events') === require('events').EventEmitter
    EventEmitter.EventEmitter = EventEmitter;

    EventEmitter.usingDomains = false;

    EventEmitter.prototype.domain = undefined;
    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._maxListeners = undefined;

    // By default EventEmitters will print a warning if more than 10 listeners are
    // added to it. This is a useful default which helps finding memory leaks.
    EventEmitter.defaultMaxListeners = 10;

    EventEmitter.init = function() {
      this.domain = null;
      if (EventEmitter.usingDomains) {
        // if there is an active domain, then attach to it.
        if (domain.active ) ;
      }

      if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
        this._events = new EventHandlers();
        this._eventsCount = 0;
      }

      this._maxListeners = this._maxListeners || undefined;
    };

    // Obviously not all Emitters should be limited to 10. This function allows
    // that to be increased. Set to zero for unlimited.
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== 'number' || n < 0 || isNaN(n))
        throw new TypeError('"n" argument must be a positive number');
      this._maxListeners = n;
      return this;
    };

    function $getMaxListeners(that) {
      if (that._maxListeners === undefined)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }

    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return $getMaxListeners(this);
    };

    // These standalone emit* functions are used to optimize calling of event
    // handlers for fast cases because emit() itself often has a variable number of
    // arguments and can be deoptimized because of that. These functions always have
    // the same number of arguments and thus do not get deoptimized, so the code
    // inside them can execute faster.
    function emitNone(handler, isFn, self) {
      if (isFn)
        handler.call(self);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self);
      }
    }
    function emitOne(handler, isFn, self, arg1) {
      if (isFn)
        handler.call(self, arg1);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1);
      }
    }
    function emitTwo(handler, isFn, self, arg1, arg2) {
      if (isFn)
        handler.call(self, arg1, arg2);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1, arg2);
      }
    }
    function emitThree(handler, isFn, self, arg1, arg2, arg3) {
      if (isFn)
        handler.call(self, arg1, arg2, arg3);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1, arg2, arg3);
      }
    }

    function emitMany(handler, isFn, self, args) {
      if (isFn)
        handler.apply(self, args);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].apply(self, args);
      }
    }

    EventEmitter.prototype.emit = function emit(type) {
      var er, handler, len, args, i, events, domain;
      var doError = (type === 'error');

      events = this._events;
      if (events)
        doError = (doError && events.error == null);
      else if (!doError)
        return false;

      domain = this.domain;

      // If there is no 'error' event listener then throw.
      if (doError) {
        er = arguments[1];
        if (domain) {
          if (!er)
            er = new Error('Uncaught, unspecified "error" event');
          er.domainEmitter = this;
          er.domain = domain;
          er.domainThrown = false;
          domain.emit('error', er);
        } else if (er instanceof Error) {
          throw er; // Unhandled 'error' event
        } else {
          // At least give some kind of context to the user
          var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
          err.context = er;
          throw err;
        }
        return false;
      }

      handler = events[type];

      if (!handler)
        return false;

      var isFn = typeof handler === 'function';
      len = arguments.length;
      switch (len) {
        // fast cases
        case 1:
          emitNone(handler, isFn, this);
          break;
        case 2:
          emitOne(handler, isFn, this, arguments[1]);
          break;
        case 3:
          emitTwo(handler, isFn, this, arguments[1], arguments[2]);
          break;
        case 4:
          emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
          break;
        // slower
        default:
          args = new Array(len - 1);
          for (i = 1; i < len; i++)
            args[i - 1] = arguments[i];
          emitMany(handler, isFn, this, args);
      }

      return true;
    };

    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = target._events;
      if (!events) {
        events = target._events = new EventHandlers();
        target._eventsCount = 0;
      } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener) {
          target.emit('newListener', type,
                      listener.listener ? listener.listener : listener);

          // Re-assign `events` because a newListener handler could have caused the
          // this._events to be assigned to a new object
          events = target._events;
        }
        existing = events[type];
      }

      if (!existing) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === 'function') {
          // Adding the second element, need to change to array.
          existing = events[type] = prepend ? [listener, existing] :
                                              [existing, listener];
        } else {
          // If we've already got an array, just append.
          if (prepend) {
            existing.unshift(listener);
          } else {
            existing.push(listener);
          }
        }

        // Check for listener leak
        if (!existing.warned) {
          m = $getMaxListeners(target);
          if (m && m > 0 && existing.length > m) {
            existing.warned = true;
            var w = new Error('Possible EventEmitter memory leak detected. ' +
                                existing.length + ' ' + type + ' listeners added. ' +
                                'Use emitter.setMaxListeners() to increase limit');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            emitWarning(w);
          }
        }
      }

      return target;
    }
    function emitWarning(e) {
      typeof console.warn === 'function' ? console.warn(e) : console.log(e);
    }
    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };

    EventEmitter.prototype.on = EventEmitter.prototype.addListener;

    EventEmitter.prototype.prependListener =
        function prependListener(type, listener) {
          return _addListener(this, type, listener, true);
        };

    function _onceWrap(target, type, listener) {
      var fired = false;
      function g() {
        target.removeListener(type, g);
        if (!fired) {
          fired = true;
          listener.apply(target, arguments);
        }
      }
      g.listener = listener;
      return g;
    }

    EventEmitter.prototype.once = function once(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };

    EventEmitter.prototype.prependOnceListener =
        function prependOnceListener(type, listener) {
          if (typeof listener !== 'function')
            throw new TypeError('"listener" argument must be a function');
          this.prependListener(type, _onceWrap(this, type, listener));
          return this;
        };

    // emits a 'removeListener' event iff the listener was removed
    EventEmitter.prototype.removeListener =
        function removeListener(type, listener) {
          var list, events, position, i, originalListener;

          if (typeof listener !== 'function')
            throw new TypeError('"listener" argument must be a function');

          events = this._events;
          if (!events)
            return this;

          list = events[type];
          if (!list)
            return this;

          if (list === listener || (list.listener && list.listener === listener)) {
            if (--this._eventsCount === 0)
              this._events = new EventHandlers();
            else {
              delete events[type];
              if (events.removeListener)
                this.emit('removeListener', type, list.listener || listener);
            }
          } else if (typeof list !== 'function') {
            position = -1;

            for (i = list.length; i-- > 0;) {
              if (list[i] === listener ||
                  (list[i].listener && list[i].listener === listener)) {
                originalListener = list[i].listener;
                position = i;
                break;
              }
            }

            if (position < 0)
              return this;

            if (list.length === 1) {
              list[0] = undefined;
              if (--this._eventsCount === 0) {
                this._events = new EventHandlers();
                return this;
              } else {
                delete events[type];
              }
            } else {
              spliceOne(list, position);
            }

            if (events.removeListener)
              this.emit('removeListener', type, originalListener || listener);
          }

          return this;
        };

    EventEmitter.prototype.removeAllListeners =
        function removeAllListeners(type) {
          var listeners, events;

          events = this._events;
          if (!events)
            return this;

          // not listening for removeListener, no need to emit
          if (!events.removeListener) {
            if (arguments.length === 0) {
              this._events = new EventHandlers();
              this._eventsCount = 0;
            } else if (events[type]) {
              if (--this._eventsCount === 0)
                this._events = new EventHandlers();
              else
                delete events[type];
            }
            return this;
          }

          // emit removeListener for all listeners on all events
          if (arguments.length === 0) {
            var keys = Object.keys(events);
            for (var i = 0, key; i < keys.length; ++i) {
              key = keys[i];
              if (key === 'removeListener') continue;
              this.removeAllListeners(key);
            }
            this.removeAllListeners('removeListener');
            this._events = new EventHandlers();
            this._eventsCount = 0;
            return this;
          }

          listeners = events[type];

          if (typeof listeners === 'function') {
            this.removeListener(type, listeners);
          } else if (listeners) {
            // LIFO order
            do {
              this.removeListener(type, listeners[listeners.length - 1]);
            } while (listeners[0]);
          }

          return this;
        };

    EventEmitter.prototype.listeners = function listeners(type) {
      var evlistener;
      var ret;
      var events = this._events;

      if (!events)
        ret = [];
      else {
        evlistener = events[type];
        if (!evlistener)
          ret = [];
        else if (typeof evlistener === 'function')
          ret = [evlistener.listener || evlistener];
        else
          ret = unwrapListeners(evlistener);
      }

      return ret;
    };

    EventEmitter.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === 'function') {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };

    EventEmitter.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events = this._events;

      if (events) {
        var evlistener = events[type];

        if (typeof evlistener === 'function') {
          return 1;
        } else if (evlistener) {
          return evlistener.length;
        }
      }

      return 0;
    }

    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
    };

    // About 1.5x faster than the two-arg version of Array#splice().
    function spliceOne(list, index) {
      for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
        list[i] = list[k];
      list.pop();
    }

    function arrayClone(arr, i) {
      var copy = new Array(i);
      while (i--)
        copy[i] = arr[i];
      return copy;
    }

    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }

    var isarray = Array.isArray || function (arr) {
      return Object.prototype.toString.call(arr) == '[object Array]';
    };

    function BufferList() {
      this.head = null;
      this.tail = null;
      this.length = 0;
    }

    BufferList.prototype.push = function (v) {
      var entry = { data: v, next: null };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    };

    BufferList.prototype.unshift = function (v) {
      var entry = { data: v, next: this.head };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    };

    BufferList.prototype.shift = function () {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    };

    BufferList.prototype.clear = function () {
      this.head = this.tail = null;
      this.length = 0;
    };

    BufferList.prototype.join = function (s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;
      while (p = p.next) {
        ret += s + p.data;
      }return ret;
    };

    BufferList.prototype.concat = function (n) {
      if (this.length === 0) return Buffer.alloc(0);
      if (this.length === 1) return this.head.data;
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;
      while (p) {
        p.data.copy(ret, i);
        i += p.data.length;
        p = p.next;
      }
      return ret;
    };

    // Copyright Joyent, Inc. and other Node contributors.
    var isBufferEncoding = Buffer.isEncoding
      || function(encoding) {
           switch (encoding && encoding.toLowerCase()) {
             case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
             default: return false;
           }
         };


    function assertEncoding(encoding) {
      if (encoding && !isBufferEncoding(encoding)) {
        throw new Error('Unknown encoding: ' + encoding);
      }
    }

    // StringDecoder provides an interface for efficiently splitting a series of
    // buffers into a series of JS strings without breaking apart multi-byte
    // characters. CESU-8 is handled as part of the UTF-8 encoding.
    //
    // @TODO Handling all encodings inside a single object makes it very difficult
    // to reason about this code, so it should be split up in the future.
    // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
    // points as used by CESU-8.
    function StringDecoder(encoding) {
      this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
      assertEncoding(encoding);
      switch (this.encoding) {
        case 'utf8':
          // CESU-8 represents each of Surrogate Pair by 3-bytes
          this.surrogateSize = 3;
          break;
        case 'ucs2':
        case 'utf16le':
          // UTF-16 represents each of Surrogate Pair by 2-bytes
          this.surrogateSize = 2;
          this.detectIncompleteChar = utf16DetectIncompleteChar;
          break;
        case 'base64':
          // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
          this.surrogateSize = 3;
          this.detectIncompleteChar = base64DetectIncompleteChar;
          break;
        default:
          this.write = passThroughWrite;
          return;
      }

      // Enough space to store all bytes of a single character. UTF-8 needs 4
      // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
      this.charBuffer = new Buffer(6);
      // Number of bytes received for the current incomplete multi-byte character.
      this.charReceived = 0;
      // Number of bytes expected for the current incomplete multi-byte character.
      this.charLength = 0;
    }

    // write decodes the given buffer and returns it as JS string that is
    // guaranteed to not contain any partial multi-byte characters. Any partial
    // character found at the end of the buffer is buffered up, and will be
    // returned when calling write again with the remaining bytes.
    //
    // Note: Converting a Buffer containing an orphan surrogate to a String
    // currently works, but converting a String to a Buffer (via `new Buffer`, or
    // Buffer#write) will replace incomplete surrogates with the unicode
    // replacement character. See https://codereview.chromium.org/121173009/ .
    StringDecoder.prototype.write = function(buffer) {
      var charStr = '';
      // if our last write ended with an incomplete multibyte character
      while (this.charLength) {
        // determine how many remaining bytes this buffer has to offer for this char
        var available = (buffer.length >= this.charLength - this.charReceived) ?
            this.charLength - this.charReceived :
            buffer.length;

        // add the new bytes to the char buffer
        buffer.copy(this.charBuffer, this.charReceived, 0, available);
        this.charReceived += available;

        if (this.charReceived < this.charLength) {
          // still not enough chars in this buffer? wait for more ...
          return '';
        }

        // remove bytes belonging to the current character from the buffer
        buffer = buffer.slice(available, buffer.length);

        // get the character that was split
        charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

        // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
        var charCode = charStr.charCodeAt(charStr.length - 1);
        if (charCode >= 0xD800 && charCode <= 0xDBFF) {
          this.charLength += this.surrogateSize;
          charStr = '';
          continue;
        }
        this.charReceived = this.charLength = 0;

        // if there are no more bytes in this buffer, just emit our char
        if (buffer.length === 0) {
          return charStr;
        }
        break;
      }

      // determine and set charLength / charReceived
      this.detectIncompleteChar(buffer);

      var end = buffer.length;
      if (this.charLength) {
        // buffer the incomplete character bytes we got
        buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
        end -= this.charReceived;
      }

      charStr += buffer.toString(this.encoding, 0, end);

      var end = charStr.length - 1;
      var charCode = charStr.charCodeAt(end);
      // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
      if (charCode >= 0xD800 && charCode <= 0xDBFF) {
        var size = this.surrogateSize;
        this.charLength += size;
        this.charReceived += size;
        this.charBuffer.copy(this.charBuffer, size, 0, size);
        buffer.copy(this.charBuffer, 0, 0, size);
        return charStr.substring(0, end);
      }

      // or just emit the charStr
      return charStr;
    };

    // detectIncompleteChar determines if there is an incomplete UTF-8 character at
    // the end of the given buffer. If so, it sets this.charLength to the byte
    // length that character, and sets this.charReceived to the number of bytes
    // that are available for this character.
    StringDecoder.prototype.detectIncompleteChar = function(buffer) {
      // determine how many bytes we have to check at the end of this buffer
      var i = (buffer.length >= 3) ? 3 : buffer.length;

      // Figure out if one of the last i bytes of our buffer announces an
      // incomplete char.
      for (; i > 0; i--) {
        var c = buffer[buffer.length - i];

        // See http://en.wikipedia.org/wiki/UTF-8#Description

        // 110XXXXX
        if (i == 1 && c >> 5 == 0x06) {
          this.charLength = 2;
          break;
        }

        // 1110XXXX
        if (i <= 2 && c >> 4 == 0x0E) {
          this.charLength = 3;
          break;
        }

        // 11110XXX
        if (i <= 3 && c >> 3 == 0x1E) {
          this.charLength = 4;
          break;
        }
      }
      this.charReceived = i;
    };

    StringDecoder.prototype.end = function(buffer) {
      var res = '';
      if (buffer && buffer.length)
        res = this.write(buffer);

      if (this.charReceived) {
        var cr = this.charReceived;
        var buf = this.charBuffer;
        var enc = this.encoding;
        res += buf.slice(0, cr).toString(enc);
      }

      return res;
    };

    function passThroughWrite(buffer) {
      return buffer.toString(this.encoding);
    }

    function utf16DetectIncompleteChar(buffer) {
      this.charReceived = buffer.length % 2;
      this.charLength = this.charReceived ? 2 : 0;
    }

    function base64DetectIncompleteChar(buffer) {
      this.charReceived = buffer.length % 3;
      this.charLength = this.charReceived ? 3 : 0;
    }

    Readable.ReadableState = ReadableState;

    var debug = debuglog('stream');
    inherits$1(Readable, EventEmitter);

    function prependListener(emitter, event, fn) {
      // Sadly this is not cacheable as some libraries bundle their own
      // event emitter implementation with them.
      if (typeof emitter.prependListener === 'function') {
        return emitter.prependListener(event, fn);
      } else {
        // This is a hack to make sure that our error handler is attached before any
        // userland ones.  NEVER DO THIS. This is here only because this code needs
        // to continue to work with older versions of Node.js that do not include
        // the prependListener() method. The goal is to eventually remove this hack.
        if (!emitter._events || !emitter._events[event])
          emitter.on(event, fn);
        else if (Array.isArray(emitter._events[event]))
          emitter._events[event].unshift(fn);
        else
          emitter._events[event] = [fn, emitter._events[event]];
      }
    }
    function listenerCount$1 (emitter, type) {
      return emitter.listeners(type).length;
    }
    function ReadableState(options, stream) {

      options = options || {};

      // object stream flag. Used to make read(n) ignore n and to
      // make all the buffer merging and length checks go away
      this.objectMode = !!options.objectMode;

      if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

      // the point at which it stops calling _read() to fill the buffer
      // Note: 0 is a valid value, means "don't call _read preemptively ever"
      var hwm = options.highWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

      // cast to ints.
      this.highWaterMark = ~ ~this.highWaterMark;

      // A linked list is used to store data chunks instead of an array because the
      // linked list can remove elements from the beginning faster than
      // array.shift()
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;

      // a flag to be able to tell if the onwrite cb is called immediately,
      // or on a later tick.  We set this to true at first, because any
      // actions that shouldn't happen until "later" should generally also
      // not happen before the first write call.
      this.sync = true;

      // whenever we return null, then we set a flag to say
      // that we're awaiting a 'readable' event emission.
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;

      // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.
      this.defaultEncoding = options.defaultEncoding || 'utf8';

      // when piping, we only care about 'readable' events that happen
      // after read()ing all the bytes and not getting any pushback.
      this.ranOut = false;

      // the number of writers that are awaiting a drain event in .pipe()s
      this.awaitDrain = 0;

      // if true, a maybeReadMore has been scheduled
      this.readingMore = false;

      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {

      if (!(this instanceof Readable)) return new Readable(options);

      this._readableState = new ReadableState(options, this);

      // legacy
      this.readable = true;

      if (options && typeof options.read === 'function') this._read = options.read;

      EventEmitter.call(this);
    }

    // Manually shove something into the read() buffer.
    // This returns true if the highWaterMark has not been hit yet,
    // similar to how Writable.write() returns true if you should
    // write() some more.
    Readable.prototype.push = function (chunk, encoding) {
      var state = this._readableState;

      if (!state.objectMode && typeof chunk === 'string') {
        encoding = encoding || state.defaultEncoding;
        if (encoding !== state.encoding) {
          chunk = Buffer.from(chunk, encoding);
          encoding = '';
        }
      }

      return readableAddChunk(this, state, chunk, encoding, false);
    };

    // Unshift should *always* be something directly out of read()
    Readable.prototype.unshift = function (chunk) {
      var state = this._readableState;
      return readableAddChunk(this, state, chunk, '', true);
    };

    Readable.prototype.isPaused = function () {
      return this._readableState.flowing === false;
    };

    function readableAddChunk(stream, state, chunk, encoding, addToFront) {
      var er = chunkInvalid(state, chunk);
      if (er) {
        stream.emit('error', er);
      } else if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else if (state.objectMode || chunk && chunk.length > 0) {
        if (state.ended && !addToFront) {
          var e = new Error('stream.push() after EOF');
          stream.emit('error', e);
        } else if (state.endEmitted && addToFront) {
          var _e = new Error('stream.unshift() after end event');
          stream.emit('error', _e);
        } else {
          var skipAdd;
          if (state.decoder && !addToFront && !encoding) {
            chunk = state.decoder.write(chunk);
            skipAdd = !state.objectMode && chunk.length === 0;
          }

          if (!addToFront) state.reading = false;

          // Don't add to the buffer if we've decoded to an empty string chunk and
          // we're not in object mode
          if (!skipAdd) {
            // if we want the data now, just emit it.
            if (state.flowing && state.length === 0 && !state.sync) {
              stream.emit('data', chunk);
              stream.read(0);
            } else {
              // update the buffer info.
              state.length += state.objectMode ? 1 : chunk.length;
              if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

              if (state.needReadable) emitReadable(stream);
            }
          }

          maybeReadMore(stream, state);
        }
      } else if (!addToFront) {
        state.reading = false;
      }

      return needMoreData(state);
    }

    // if it's past the high water mark, we can push in some more.
    // Also, if we have no data yet, we can stand some
    // more bytes.  This is to work around cases where hwm=0,
    // such as the repl.  Also, if the push() triggered a
    // readable event, and the user called read(largeNumber) such that
    // needReadable was set, then we ought to push more, so that another
    // 'readable' event will be triggered.
    function needMoreData(state) {
      return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
    }

    // backwards compatibility.
    Readable.prototype.setEncoding = function (enc) {
      this._readableState.decoder = new StringDecoder(enc);
      this._readableState.encoding = enc;
      return this;
    };

    // Don't raise the hwm > 8MB
    var MAX_HWM = 0x800000;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }

    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended) return 0;
      if (state.objectMode) return 1;
      if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
      }
      // If we're asking for more than the current hwm, then raise the hwm.
      if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length) return n;
      // Don't have enough
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }

    // you can override either this method, or the async _read(n) below.
    Readable.prototype.read = function (n) {
      debug('read', n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;

      if (n !== 0) state.emittedReadable = false;

      // if we're doing read(0) to trigger a readable event, but we
      // already have a bunch of data in the buffer, then just trigger
      // the 'readable' event and move on.
      if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
        debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
        return null;
      }

      n = howMuchToRead(n, state);

      // if we've ended, and we're now clear, then finish it up.
      if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
      }

      // All the actual chunk generation logic needs to be
      // *below* the call to _read.  The reason is that in certain
      // synthetic stream cases, such as passthrough streams, _read
      // may be a completely synchronous operation which may change
      // the state of the read buffer, providing enough data when
      // before there was *not* enough.
      //
      // So, the steps are:
      // 1. Figure out what the state of things will be after we do
      // a read from the buffer.
      //
      // 2. If that resulting state will trigger a _read, then call _read.
      // Note that this may be asynchronous, or synchronous.  Yes, it is
      // deeply ugly to write APIs this way, but that still doesn't mean
      // that the Readable class should behave improperly, as streams are
      // designed to be sync/async agnostic.
      // Take note if the _read call is sync or async (ie, if the read call
      // has returned yet), so that we know whether or not it's safe to emit
      // 'readable' etc.
      //
      // 3. Actually pull the requested chunks out of the buffer and return.

      // if we need a readable event, then we need to do some reading.
      var doRead = state.needReadable;
      debug('need readable', doRead);

      // if we currently have less than the highWaterMark, then also read some
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug('length less than watermark', doRead);
      }

      // however, if we've ended, then there's no point, and if we're already
      // reading, then it's unnecessary.
      if (state.ended || state.reading) {
        doRead = false;
        debug('reading or ended', doRead);
      } else if (doRead) {
        debug('do read');
        state.reading = true;
        state.sync = true;
        // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true;
        // call internal read method
        this._read(state.highWaterMark);
        state.sync = false;
        // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
      }

      var ret;
      if (n > 0) ret = fromList(n, state);else ret = null;

      if (ret === null) {
        state.needReadable = true;
        n = 0;
      } else {
        state.length -= n;
      }

      if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true;

        // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
      }

      if (ret !== null) this.emit('data', ret);

      return ret;
    };

    function chunkInvalid(state, chunk) {
      var er = null;
      if (!isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
        er = new TypeError('Invalid non-string/buffer chunk');
      }
      return er;
    }

    function onEofChunk(stream, state) {
      if (state.ended) return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;

      // emit 'readable' now to make sure it gets picked up.
      emitReadable(stream);
    }

    // Don't emit readable right away in sync mode, because this can trigger
    // another read() call => stack overflow.  This way, it might trigger
    // a nextTick recursion warning, but that's not so bad.
    function emitReadable(stream) {
      var state = stream._readableState;
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);
      }
    }

    function emitReadable_(stream) {
      debug('emit readable');
      stream.emit('readable');
      flow(stream);
    }

    // at this point, the user has presumably seen the 'readable' event,
    // and called read() to consume some data.  that may have triggered
    // in turn another _read(n) call, in which case reading = true if
    // it's in progress.
    // However, if we're not ended, or reading, and the length < hwm,
    // then go ahead and try to read some more preemptively.
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        nextTick(maybeReadMore_, stream, state);
      }
    }

    function maybeReadMore_(stream, state) {
      var len = state.length;
      while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
        debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length)
          // didn't get any data, stop spinning.
          break;else len = state.length;
      }
      state.readingMore = false;
    }

    // abstract method.  to be overridden in specific implementation classes.
    // call cb(er, data) where data is <= n in length.
    // for virtual (non-string, non-buffer) streams, "length" is somewhat
    // arbitrary, and perhaps not very meaningful.
    Readable.prototype._read = function (n) {
      this.emit('error', new Error('not implemented'));
    };

    Readable.prototype.pipe = function (dest, pipeOpts) {
      var src = this;
      var state = this._readableState;

      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

      var doEnd = (!pipeOpts || pipeOpts.end !== false);

      var endFn = doEnd ? onend : cleanup;
      if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);

      dest.on('unpipe', onunpipe);
      function onunpipe(readable) {
        debug('onunpipe');
        if (readable === src) {
          cleanup();
        }
      }

      function onend() {
        debug('onend');
        dest.end();
      }

      // when the dest drains, it reduces the awaitDrain counter
      // on the source.  This would be more elegant with a .once()
      // handler in flow(), but adding and removing repeatedly is
      // too slow.
      var ondrain = pipeOnDrain(src);
      dest.on('drain', ondrain);

      var cleanedUp = false;
      function cleanup() {
        debug('cleanup');
        // cleanup event handlers once the pipe is broken
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', cleanup);
        src.removeListener('data', ondata);

        cleanedUp = true;

        // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
      }

      // If the user pushes more data while we're writing to dest then we'll end up
      // in ondata again. However, we only want to increase awaitDrain once because
      // dest will only emit one 'drain' event for the multiple writes.
      // => Introduce a guard on increasing awaitDrain.
      var increasedAwaitDrain = false;
      src.on('data', ondata);
      function ondata(chunk) {
        debug('ondata');
        increasedAwaitDrain = false;
        var ret = dest.write(chunk);
        if (false === ret && !increasedAwaitDrain) {
          // If the user unpiped during `dest.write()`, it is possible
          // to get stuck in a permanently paused state if that write
          // also returned false.
          // => Check whether `dest` is still a piping destination.
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug('false write response, pause', src._readableState.awaitDrain);
            src._readableState.awaitDrain++;
            increasedAwaitDrain = true;
          }
          src.pause();
        }
      }

      // if the dest has an error, then stop piping into it.
      // however, don't suppress the throwing behavior for this.
      function onerror(er) {
        debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if (listenerCount$1(dest, 'error') === 0) dest.emit('error', er);
      }

      // Make sure our error handler is attached before userland ones.
      prependListener(dest, 'error', onerror);

      // Both close and finish should trigger unpipe, but only once.
      function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
      }
      dest.once('close', onclose);
      function onfinish() {
        debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
      }
      dest.once('finish', onfinish);

      function unpipe() {
        debug('unpipe');
        src.unpipe(dest);
      }

      // tell the dest that it's being piped to
      dest.emit('pipe', src);

      // start the flow if it hasn't been started already.
      if (!state.flowing) {
        debug('pipe resume');
        src.resume();
      }

      return dest;
    };

    function pipeOnDrain(src) {
      return function () {
        var state = src._readableState;
        debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && src.listeners('data').length) {
          state.flowing = true;
          flow(src);
        }
      };
    }

    Readable.prototype.unpipe = function (dest) {
      var state = this._readableState;

      // if we're not piping anywhere, then do nothing.
      if (state.pipesCount === 0) return this;

      // just one destination.  most common case.
      if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;

        if (!dest) dest = state.pipes;

        // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this);
        return this;
      }

      // slow case. multiple pipe destinations.

      if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;

        for (var _i = 0; _i < len; _i++) {
          dests[_i].emit('unpipe', this);
        }return this;
      }

      // try to find the right one.
      var i = indexOf(state.pipes, dest);
      if (i === -1) return this;

      state.pipes.splice(i, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1) state.pipes = state.pipes[0];

      dest.emit('unpipe', this);

      return this;
    };

    // set up data events if they are asked for
    // Ensure readable listeners eventually get something
    Readable.prototype.on = function (ev, fn) {
      var res = EventEmitter.prototype.on.call(this, ev, fn);

      if (ev === 'data') {
        // Start flowing on next tick if stream isn't explicitly paused
        if (this._readableState.flowing !== false) this.resume();
      } else if (ev === 'readable') {
        var state = this._readableState;
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.emittedReadable = false;
          if (!state.reading) {
            nextTick(nReadingNextTick, this);
          } else if (state.length) {
            emitReadable(this);
          }
        }
      }

      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;

    function nReadingNextTick(self) {
      debug('readable nexttick read 0');
      self.read(0);
    }

    // pause() and resume() are remnants of the legacy readable stream API
    // If the user uses them, then switch into old mode.
    Readable.prototype.resume = function () {
      var state = this._readableState;
      if (!state.flowing) {
        debug('resume');
        state.flowing = true;
        resume(this, state);
      }
      return this;
    };

    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        nextTick(resume_, stream, state);
      }
    }

    function resume_(stream, state) {
      if (!state.reading) {
        debug('resume read 0');
        stream.read(0);
      }

      state.resumeScheduled = false;
      state.awaitDrain = 0;
      stream.emit('resume');
      flow(stream);
      if (state.flowing && !state.reading) stream.read(0);
    }

    Readable.prototype.pause = function () {
      debug('call pause flowing=%j', this._readableState.flowing);
      if (false !== this._readableState.flowing) {
        debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
      }
      return this;
    };

    function flow(stream) {
      var state = stream._readableState;
      debug('flow', state.flowing);
      while (state.flowing && stream.read() !== null) {}
    }

    // wrap an old-style stream as the async data source.
    // This is *not* part of the readable stream interface.
    // It is an ugly unfortunate mess of history.
    Readable.prototype.wrap = function (stream) {
      var state = this._readableState;
      var paused = false;

      var self = this;
      stream.on('end', function () {
        debug('wrapped end');
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) self.push(chunk);
        }

        self.push(null);
      });

      stream.on('data', function (chunk) {
        debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk);

        // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

        var ret = self.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });

      // proxy all the other methods.
      // important when wrapping filters and duplexes.
      for (var i in stream) {
        if (this[i] === undefined && typeof stream[i] === 'function') {
          this[i] = function (method) {
            return function () {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      }

      // proxy certain important events.
      var events = ['error', 'close', 'destroy', 'pause', 'resume'];
      forEach(events, function (ev) {
        stream.on(ev, self.emit.bind(self, ev));
      });

      // when we try to consume some more bytes, simply unpause the
      // underlying stream.
      self._read = function (n) {
        debug('wrapped _read', n);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };

      return self;
    };

    // exposed for testing purposes only.
    Readable._fromList = fromList;

    // Pluck off n bytes from an array of buffers.
    // Length is the combined lengths of all the buffers in the list.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function fromList(n, state) {
      // nothing buffered
      if (state.length === 0) return null;

      var ret;
      if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        // read part of list
        ret = fromListPartial(n, state.buffer, state.decoder);
      }

      return ret;
    }

    // Extracts only enough buffered data to satisfy the amount requested.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function fromListPartial(n, list, hasStrings) {
      var ret;
      if (n < list.head.data.length) {
        // slice is the same for buffers and strings
        ret = list.head.data.slice(0, n);
        list.head.data = list.head.data.slice(n);
      } else if (n === list.head.data.length) {
        // first chunk is a perfect match
        ret = list.shift();
      } else {
        // result spans more than one buffer
        ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
      }
      return ret;
    }

    // Copies a specified amount of characters from the list of buffered data
    // chunks.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function copyFromBufferString(n, list) {
      var p = list.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;
      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;
        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) list.head = p.next;else list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = str.slice(nb);
          }
          break;
        }
        ++c;
      }
      list.length -= c;
      return ret;
    }

    // Copies a specified amount of bytes from the list of buffered data chunks.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function copyFromBuffer(n, list) {
      var ret = Buffer.allocUnsafe(n);
      var p = list.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;
      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;
        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) list.head = p.next;else list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = buf.slice(nb);
          }
          break;
        }
        ++c;
      }
      list.length -= c;
      return ret;
    }

    function endReadable(stream) {
      var state = stream._readableState;

      // If we get here before consuming all the bytes, then that is a
      // bug in node.  Should never happen.
      if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

      if (!state.endEmitted) {
        state.ended = true;
        nextTick(endReadableNT, state, stream);
      }
    }

    function endReadableNT(state, stream) {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    }

    function forEach(xs, f) {
      for (var i = 0, l = xs.length; i < l; i++) {
        f(xs[i], i);
      }
    }

    function indexOf(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
      }
      return -1;
    }

    // A bit simpler than readable streams.
    Writable.WritableState = WritableState;
    inherits$1(Writable, EventEmitter);

    function nop() {}

    function WriteReq(chunk, encoding, cb) {
      this.chunk = chunk;
      this.encoding = encoding;
      this.callback = cb;
      this.next = null;
    }

    function WritableState(options, stream) {
      Object.defineProperty(this, 'buffer', {
        get: deprecate(function () {
          return this.getBuffer();
        }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
      });
      options = options || {};

      // object stream flag to indicate whether or not this stream
      // contains buffers or objects.
      this.objectMode = !!options.objectMode;

      if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

      // the point at which write() starts returning false
      // Note: 0 is a valid value, means that we always return false if
      // the entire buffer is not flushed immediately on write()
      var hwm = options.highWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

      // cast to ints.
      this.highWaterMark = ~ ~this.highWaterMark;

      this.needDrain = false;
      // at the start of calling end()
      this.ending = false;
      // when end() has been called, and returned
      this.ended = false;
      // when 'finish' is emitted
      this.finished = false;

      // should we decode strings into buffers before passing to _write?
      // this is here so that some node-core streams can optimize string
      // handling at a lower level.
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;

      // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.
      this.defaultEncoding = options.defaultEncoding || 'utf8';

      // not an actual buffer we keep track of, but a measurement
      // of how much we're waiting to get pushed to some underlying
      // socket or file.
      this.length = 0;

      // a flag to see when we're in the middle of a write.
      this.writing = false;

      // when true all writes will be buffered until .uncork() call
      this.corked = 0;

      // a flag to be able to tell if the onwrite cb is called immediately,
      // or on a later tick.  We set this to true at first, because any
      // actions that shouldn't happen until "later" should generally also
      // not happen before the first write call.
      this.sync = true;

      // a flag to know if we're processing previously buffered items, which
      // may call the _write() callback in the same tick, so that we don't
      // end up in an overlapped onwrite situation.
      this.bufferProcessing = false;

      // the callback that's passed to _write(chunk,cb)
      this.onwrite = function (er) {
        onwrite(stream, er);
      };

      // the callback that the user supplies to write(chunk,encoding,cb)
      this.writecb = null;

      // the amount that is being written when _write is called.
      this.writelen = 0;

      this.bufferedRequest = null;
      this.lastBufferedRequest = null;

      // number of pending user-supplied write callbacks
      // this must be 0 before 'finish' can be emitted
      this.pendingcb = 0;

      // emit prefinish if the only thing we're waiting for is _write cbs
      // This is relevant for synchronous Transform streams
      this.prefinished = false;

      // True if the error was already emitted and should not be thrown again
      this.errorEmitted = false;

      // count buffered requests
      this.bufferedRequestCount = 0;

      // allocate the first CorkedRequest, there is always
      // one allocated and free to use, and we maintain at most two
      this.corkedRequestsFree = new CorkedRequest(this);
    }

    WritableState.prototype.getBuffer = function writableStateGetBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    function Writable(options) {

      // Writable ctor is applied to Duplexes, though they're not
      // instanceof Writable, they're instanceof Readable.
      if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

      this._writableState = new WritableState(options, this);

      // legacy.
      this.writable = true;

      if (options) {
        if (typeof options.write === 'function') this._write = options.write;

        if (typeof options.writev === 'function') this._writev = options.writev;
      }

      EventEmitter.call(this);
    }

    // Otherwise people can pipe Writable streams, which is just wrong.
    Writable.prototype.pipe = function () {
      this.emit('error', new Error('Cannot pipe, not readable'));
    };

    function writeAfterEnd(stream, cb) {
      var er = new Error('write after end');
      // TODO: defer error events consistently everywhere, not just the cb
      stream.emit('error', er);
      nextTick(cb, er);
    }

    // If we get something that is not a buffer, string, null, or undefined,
    // and we're not in objectMode, then that's an error.
    // Otherwise stream chunks are all considered to be of length=1, and the
    // watermarks determine how many objects to keep in the buffer, rather than
    // how many bytes or characters.
    function validChunk(stream, state, chunk, cb) {
      var valid = true;
      var er = false;
      // Always throw error if a null is written
      // if we are not in object mode then throw
      // if it is not a buffer, string, or undefined.
      if (chunk === null) {
        er = new TypeError('May not write null values to stream');
      } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
        er = new TypeError('Invalid non-string/buffer chunk');
      }
      if (er) {
        stream.emit('error', er);
        nextTick(cb, er);
        valid = false;
      }
      return valid;
    }

    Writable.prototype.write = function (chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;

      if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }

      if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

      if (typeof cb !== 'function') cb = nop;

      if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, chunk, encoding, cb);
      }

      return ret;
    };

    Writable.prototype.cork = function () {
      var state = this._writableState;

      state.corked++;
    };

    Writable.prototype.uncork = function () {
      var state = this._writableState;

      if (state.corked) {
        state.corked--;

        if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
      }
    };

    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      // node::ParseEncoding() requires lower case.
      if (typeof encoding === 'string') encoding = encoding.toLowerCase();
      if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };

    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
        chunk = Buffer.from(chunk, encoding);
      }
      return chunk;
    }

    // if we're already writing something, then just put this
    // in the queue, and wait our turn.  Otherwise, call _write
    // If we return false, then we need a drain event, so set that flag.
    function writeOrBuffer(stream, state, chunk, encoding, cb) {
      chunk = decodeChunk(state, chunk, encoding);

      if (Buffer.isBuffer(chunk)) encoding = 'buffer';
      var len = state.objectMode ? 1 : chunk.length;

      state.length += len;

      var ret = state.length < state.highWaterMark;
      // we must ensure that previous needDrain will not be reset to false.
      if (!ret) state.needDrain = true;

      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }

      return ret;
    }

    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }

    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;
      if (sync) nextTick(cb, er);else cb(er);

      stream._writableState.errorEmitted = true;
      stream.emit('error', er);
    }

    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }

    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;

      onwriteStateUpdate(state);

      if (er) onwriteError(stream, state, sync, er, cb);else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state);

        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }

        if (sync) {
          /*<replacement>*/
            nextTick(afterWrite, stream, state, finished, cb);
          /*</replacement>*/
        } else {
            afterWrite(stream, state, finished, cb);
          }
      }
    }

    function afterWrite(stream, state, finished, cb) {
      if (!finished) onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }

    // Must force callback to be called on nextTick, so that we don't
    // emit 'drain' before the write() consumer gets the 'false' return
    // value, and has a chance to attach a 'drain' listener.
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
      }
    }

    // if there's something in the buffer waiting, then process it
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;

      if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;

        var count = 0;
        while (entry) {
          buffer[count] = entry;
          entry = entry.next;
          count += 1;
        }

        doWrite(stream, state, true, state.length, buffer, '', holder.finish);

        // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
      } else {
        // Slow case, write chunks one-by-one
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;

          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          // if we didn't call the onwrite immediately, then
          // it means that we need to wait until it does.
          // also, that means that the chunk and cb are currently
          // being processed, so move the buffer counter past them.
          if (state.writing) {
            break;
          }
        }

        if (entry === null) state.lastBufferedRequest = null;
      }

      state.bufferedRequestCount = 0;
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }

    Writable.prototype._write = function (chunk, encoding, cb) {
      cb(new Error('not implemented'));
    };

    Writable.prototype._writev = null;

    Writable.prototype.end = function (chunk, encoding, cb) {
      var state = this._writableState;

      if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }

      if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

      // .end() fully uncorks
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }

      // ignore unnecessary end() calls.
      if (!state.ending && !state.finished) endWritable(this, state, cb);
    };

    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }

    function prefinish(stream, state) {
      if (!state.prefinished) {
        state.prefinished = true;
        stream.emit('prefinish');
      }
    }

    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        if (state.pendingcb === 0) {
          prefinish(stream, state);
          state.finished = true;
          stream.emit('finish');
        } else {
          prefinish(stream, state);
        }
      }
      return need;
    }

    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished) nextTick(cb);else stream.once('finish', cb);
      }
      state.ended = true;
      stream.writable = false;
    }

    // It seems a linked list but it is not
    // there will be only 2 of these for each stream
    function CorkedRequest(state) {
      var _this = this;

      this.next = null;
      this.entry = null;

      this.finish = function (err) {
        var entry = _this.entry;
        _this.entry = null;
        while (entry) {
          var cb = entry.callback;
          state.pendingcb--;
          cb(err);
          entry = entry.next;
        }
        if (state.corkedRequestsFree) {
          state.corkedRequestsFree.next = _this;
        } else {
          state.corkedRequestsFree = _this;
        }
      };
    }

    inherits$1(Duplex, Readable);

    var keys = Object.keys(Writable.prototype);
    for (var v$1 = 0; v$1 < keys.length; v$1++) {
      var method = keys[v$1];
      if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
    }
    function Duplex(options) {
      if (!(this instanceof Duplex)) return new Duplex(options);

      Readable.call(this, options);
      Writable.call(this, options);

      if (options && options.readable === false) this.readable = false;

      if (options && options.writable === false) this.writable = false;

      this.allowHalfOpen = true;
      if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

      this.once('end', onend);
    }

    // the no-half-open enforcer
    function onend() {
      // if we allow half-open state, or if the writable side ended,
      // then we're ok.
      if (this.allowHalfOpen || this._writableState.ended) return;

      // no more data can be written.
      // But allow more writes to happen in this tick.
      nextTick(onEndNT, this);
    }

    function onEndNT(self) {
      self.end();
    }

    // a transform stream is a readable/writable stream where you do
    inherits$1(Transform, Duplex);

    function TransformState(stream) {
      this.afterTransform = function (er, data) {
        return afterTransform(stream, er, data);
      };

      this.needTransform = false;
      this.transforming = false;
      this.writecb = null;
      this.writechunk = null;
      this.writeencoding = null;
    }

    function afterTransform(stream, er, data) {
      var ts = stream._transformState;
      ts.transforming = false;

      var cb = ts.writecb;

      if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

      ts.writechunk = null;
      ts.writecb = null;

      if (data !== null && data !== undefined) stream.push(data);

      cb(er);

      var rs = stream._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        stream._read(rs.highWaterMark);
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform)) return new Transform(options);

      Duplex.call(this, options);

      this._transformState = new TransformState(this);

      // when the writable side finishes, then flush out anything remaining.
      var stream = this;

      // start out asking for a readable event once data is transformed.
      this._readableState.needReadable = true;

      // we have implemented the _read method, and done the other things
      // that Readable wants before the first _read call, so unset the
      // sync guard flag.
      this._readableState.sync = false;

      if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;

        if (typeof options.flush === 'function') this._flush = options.flush;
      }

      this.once('prefinish', function () {
        if (typeof this._flush === 'function') this._flush(function (er) {
          done(stream, er);
        });else done(stream);
      });
    }

    Transform.prototype.push = function (chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };

    // This is the part where you do stuff!
    // override this function in implementation classes.
    // 'chunk' is an input chunk.
    //
    // Call `push(newChunk)` to pass along transformed output
    // to the readable side.  You may call 'push' zero or more times.
    //
    // Call `cb(err)` when you are done with this chunk.  If you pass
    // an error, then that'll put the hurt on the whole operation.  If you
    // never call cb(), then you'll never get another chunk.
    Transform.prototype._transform = function (chunk, encoding, cb) {
      throw new Error('Not implemented');
    };

    Transform.prototype._write = function (chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    };

    // Doesn't matter what the args are here.
    // _transform does all the work.
    // That we got here means that the readable side wants more data.
    Transform.prototype._read = function (n) {
      var ts = this._transformState;

      if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        // mark that we need a transform, so that any data that comes in
        // will get processed, now that we've asked for it.
        ts.needTransform = true;
      }
    };

    function done(stream, er) {
      if (er) return stream.emit('error', er);

      // if there's nothing in the write buffer, then that means
      // that nothing more will ever be provided
      var ws = stream._writableState;
      var ts = stream._transformState;

      if (ws.length) throw new Error('Calling transform done when ws.length != 0');

      if (ts.transforming) throw new Error('Calling transform done when still transforming');

      return stream.push(null);
    }

    inherits$1(PassThrough, Transform);
    function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options);

      Transform.call(this, options);
    }

    PassThrough.prototype._transform = function (chunk, encoding, cb) {
      cb(null, chunk);
    };

    inherits$1(Stream, EventEmitter);
    Stream.Readable = Readable;
    Stream.Writable = Writable;
    Stream.Duplex = Duplex;
    Stream.Transform = Transform;
    Stream.PassThrough = PassThrough;

    // Backwards-compat with node 0.4.x
    Stream.Stream = Stream;

    // old-style streams.  Note that the pipe method (the only relevant
    // part of this class) is overridden in the Readable class.

    function Stream() {
      EventEmitter.call(this);
    }

    Stream.prototype.pipe = function(dest, options) {
      var source = this;

      function ondata(chunk) {
        if (dest.writable) {
          if (false === dest.write(chunk) && source.pause) {
            source.pause();
          }
        }
      }

      source.on('data', ondata);

      function ondrain() {
        if (source.readable && source.resume) {
          source.resume();
        }
      }

      dest.on('drain', ondrain);

      // If the 'end' option is not supplied, dest.end() will be called when
      // source gets the 'end' or 'close' events.  Only dest.end() once.
      if (!dest._isStdio && (!options || options.end !== false)) {
        source.on('end', onend);
        source.on('close', onclose);
      }

      var didOnEnd = false;
      function onend() {
        if (didOnEnd) return;
        didOnEnd = true;

        dest.end();
      }


      function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;

        if (typeof dest.destroy === 'function') dest.destroy();
      }

      // don't leave dangling pipes when there are errors.
      function onerror(er) {
        cleanup();
        if (EventEmitter.listenerCount(this, 'error') === 0) {
          throw er; // Unhandled stream error in pipe.
        }
      }

      source.on('error', onerror);
      dest.on('error', onerror);

      // remove all the event listeners that were added.
      function cleanup() {
        source.removeListener('data', ondata);
        dest.removeListener('drain', ondrain);

        source.removeListener('end', onend);
        source.removeListener('close', onclose);

        source.removeListener('error', onerror);
        dest.removeListener('error', onerror);

        source.removeListener('end', cleanup);
        source.removeListener('close', cleanup);

        dest.removeListener('close', cleanup);
      }

      source.on('end', cleanup);
      source.on('close', cleanup);

      dest.on('close', cleanup);

      dest.emit('pipe', source);

      // Allow for unix-like usage: A.pipe(B).pipe(C)
      return dest;
    };

    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    // NOTE: These type checking functions intentionally don't use `instanceof`
    // because it is fragile and can be easily faked with `Object.create()`.

    function isArray$2(arg) {
      if (Array.isArray) {
        return Array.isArray(arg);
      }
      return objectToString$1(arg) === '[object Array]';
    }
    var isArray_1 = isArray$2;

    function isBoolean$1(arg) {
      return typeof arg === 'boolean';
    }
    var isBoolean_1 = isBoolean$1;

    function isNull$1(arg) {
      return arg === null;
    }
    var isNull_1 = isNull$1;

    function isNullOrUndefined$1(arg) {
      return arg == null;
    }
    var isNullOrUndefined_1 = isNullOrUndefined$1;

    function isNumber$1(arg) {
      return typeof arg === 'number';
    }
    var isNumber_1 = isNumber$1;

    function isString$1(arg) {
      return typeof arg === 'string';
    }
    var isString_1 = isString$1;

    function isSymbol$1(arg) {
      return typeof arg === 'symbol';
    }
    var isSymbol_1 = isSymbol$1;

    function isUndefined$1(arg) {
      return arg === void 0;
    }
    var isUndefined_1 = isUndefined$1;

    function isRegExp$1(re) {
      return objectToString$1(re) === '[object RegExp]';
    }
    var isRegExp_1 = isRegExp$1;

    function isObject$1(arg) {
      return typeof arg === 'object' && arg !== null;
    }
    var isObject_1 = isObject$1;

    function isDate$1(d) {
      return objectToString$1(d) === '[object Date]';
    }
    var isDate_1 = isDate$1;

    function isError$1(e) {
      return (objectToString$1(e) === '[object Error]' || e instanceof Error);
    }
    var isError_1 = isError$1;

    function isFunction$1(arg) {
      return typeof arg === 'function';
    }
    var isFunction_1 = isFunction$1;

    function isPrimitive$1(arg) {
      return arg === null ||
             typeof arg === 'boolean' ||
             typeof arg === 'number' ||
             typeof arg === 'string' ||
             typeof arg === 'symbol' ||  // ES6 symbol
             typeof arg === 'undefined';
    }
    var isPrimitive_1 = isPrimitive$1;

    var isBuffer$2 = isBuffer;

    function objectToString$1(o) {
      return Object.prototype.toString.call(o);
    }

    var util$1 = {
    	isArray: isArray_1,
    	isBoolean: isBoolean_1,
    	isNull: isNull_1,
    	isNullOrUndefined: isNullOrUndefined_1,
    	isNumber: isNumber_1,
    	isString: isString_1,
    	isSymbol: isSymbol_1,
    	isUndefined: isUndefined_1,
    	isRegExp: isRegExp_1,
    	isObject: isObject_1,
    	isDate: isDate_1,
    	isError: isError_1,
    	isFunction: isFunction_1,
    	isPrimitive: isPrimitive_1,
    	isBuffer: isBuffer$2
    };

    var inherits_browser = createCommonjsModule(function (module) {
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function () {};
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
    });

    var _nodeResolve_empty = {};

    var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': _nodeResolve_empty
    });

    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    // A bit simpler than readable streams.
    // Implement an async ._write(chunk, cb), and it'll handle all
    // the drain event emission and buffering.

    var _stream_writable = Writable$1;

    /*<replacement>*/
    var Buffer$1 = bufferEs6.Buffer;
    /*</replacement>*/

    Writable$1.WritableState = WritableState$1;


    /*<replacement>*/

    util$1.inherits = inherits_browser;
    /*</replacement>*/



    util$1.inherits(Writable$1, Stream);

    function WriteReq$1(chunk, encoding, cb) {
      this.chunk = chunk;
      this.encoding = encoding;
      this.callback = cb;
    }

    function WritableState$1(options, stream) {
      var Duplex = _stream_duplex;

      options = options || {};

      // the point at which write() starts returning false
      // Note: 0 is a valid value, means that we always return false if
      // the entire buffer is not flushed immediately on write()
      var hwm = options.highWaterMark;
      var defaultHwm = options.objectMode ? 16 : 16 * 1024;
      this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

      // object stream flag to indicate whether or not this stream
      // contains buffers or objects.
      this.objectMode = !!options.objectMode;

      if (stream instanceof Duplex)
        this.objectMode = this.objectMode || !!options.writableObjectMode;

      // cast to ints.
      this.highWaterMark = ~~this.highWaterMark;

      this.needDrain = false;
      // at the start of calling end()
      this.ending = false;
      // when end() has been called, and returned
      this.ended = false;
      // when 'finish' is emitted
      this.finished = false;

      // should we decode strings into buffers before passing to _write?
      // this is here so that some node-core streams can optimize string
      // handling at a lower level.
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;

      // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.
      this.defaultEncoding = options.defaultEncoding || 'utf8';

      // not an actual buffer we keep track of, but a measurement
      // of how much we're waiting to get pushed to some underlying
      // socket or file.
      this.length = 0;

      // a flag to see when we're in the middle of a write.
      this.writing = false;

      // when true all writes will be buffered until .uncork() call
      this.corked = 0;

      // a flag to be able to tell if the onwrite cb is called immediately,
      // or on a later tick.  We set this to true at first, because any
      // actions that shouldn't happen until "later" should generally also
      // not happen before the first write call.
      this.sync = true;

      // a flag to know if we're processing previously buffered items, which
      // may call the _write() callback in the same tick, so that we don't
      // end up in an overlapped onwrite situation.
      this.bufferProcessing = false;

      // the callback that's passed to _write(chunk,cb)
      this.onwrite = function(er) {
        onwrite$1(stream, er);
      };

      // the callback that the user supplies to write(chunk,encoding,cb)
      this.writecb = null;

      // the amount that is being written when _write is called.
      this.writelen = 0;

      this.buffer = [];

      // number of pending user-supplied write callbacks
      // this must be 0 before 'finish' can be emitted
      this.pendingcb = 0;

      // emit prefinish if the only thing we're waiting for is _write cbs
      // This is relevant for synchronous Transform streams
      this.prefinished = false;

      // True if the error was already emitted and should not be thrown again
      this.errorEmitted = false;
    }

    function Writable$1(options) {
      var Duplex = _stream_duplex;

      // Writable ctor is applied to Duplexes, though they're not
      // instanceof Writable, they're instanceof Readable.
      if (!(this instanceof Writable$1) && !(this instanceof Duplex))
        return new Writable$1(options);

      this._writableState = new WritableState$1(options, this);

      // legacy.
      this.writable = true;

      Stream.call(this);
    }

    // Otherwise people can pipe Writable streams, which is just wrong.
    Writable$1.prototype.pipe = function() {
      this.emit('error', new Error('Cannot pipe. Not readable.'));
    };


    function writeAfterEnd$1(stream, state, cb) {
      var er = new Error('write after end');
      // TODO: defer error events consistently everywhere, not just the cb
      stream.emit('error', er);
      nextTick(function() {
        cb(er);
      });
    }

    // If we get something that is not a buffer, string, null, or undefined,
    // and we're not in objectMode, then that's an error.
    // Otherwise stream chunks are all considered to be of length=1, and the
    // watermarks determine how many objects to keep in the buffer, rather than
    // how many bytes or characters.
    function validChunk$1(stream, state, chunk, cb) {
      var valid = true;
      if (!util$1.isBuffer(chunk) &&
          !util$1.isString(chunk) &&
          !util$1.isNullOrUndefined(chunk) &&
          !state.objectMode) {
        var er = new TypeError('Invalid non-string/buffer chunk');
        stream.emit('error', er);
        nextTick(function() {
          cb(er);
        });
        valid = false;
      }
      return valid;
    }

    Writable$1.prototype.write = function(chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;

      if (util$1.isFunction(encoding)) {
        cb = encoding;
        encoding = null;
      }

      if (util$1.isBuffer(chunk))
        encoding = 'buffer';
      else if (!encoding)
        encoding = state.defaultEncoding;

      if (!util$1.isFunction(cb))
        cb = function() {};

      if (state.ended)
        writeAfterEnd$1(this, state, cb);
      else if (validChunk$1(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer$1(this, state, chunk, encoding, cb);
      }

      return ret;
    };

    Writable$1.prototype.cork = function() {
      var state = this._writableState;

      state.corked++;
    };

    Writable$1.prototype.uncork = function() {
      var state = this._writableState;

      if (state.corked) {
        state.corked--;

        if (!state.writing &&
            !state.corked &&
            !state.finished &&
            !state.bufferProcessing &&
            state.buffer.length)
          clearBuffer$1(this, state);
      }
    };

    function decodeChunk$1(state, chunk, encoding) {
      if (!state.objectMode &&
          state.decodeStrings !== false &&
          util$1.isString(chunk)) {
        chunk = new Buffer$1(chunk, encoding);
      }
      return chunk;
    }

    // if we're already writing something, then just put this
    // in the queue, and wait our turn.  Otherwise, call _write
    // If we return false, then we need a drain event, so set that flag.
    function writeOrBuffer$1(stream, state, chunk, encoding, cb) {
      chunk = decodeChunk$1(state, chunk, encoding);
      if (util$1.isBuffer(chunk))
        encoding = 'buffer';
      var len = state.objectMode ? 1 : chunk.length;

      state.length += len;

      var ret = state.length < state.highWaterMark;
      // we must ensure that previous needDrain will not be reset to false.
      if (!ret)
        state.needDrain = true;

      if (state.writing || state.corked)
        state.buffer.push(new WriteReq$1(chunk, encoding, cb));
      else
        doWrite$1(stream, state, false, len, chunk, encoding, cb);

      return ret;
    }

    function doWrite$1(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (writev)
        stream._writev(chunk, state.onwrite);
      else
        stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }

    function onwriteError$1(stream, state, sync, er, cb) {
      if (sync)
        nextTick(function() {
          state.pendingcb--;
          cb(er);
        });
      else {
        state.pendingcb--;
        cb(er);
      }

      stream._writableState.errorEmitted = true;
      stream.emit('error', er);
    }

    function onwriteStateUpdate$1(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }

    function onwrite$1(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;

      onwriteStateUpdate$1(state);

      if (er)
        onwriteError$1(stream, state, sync, er, cb);
      else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish$1(stream, state);

        if (!finished &&
            !state.corked &&
            !state.bufferProcessing &&
            state.buffer.length) {
          clearBuffer$1(stream, state);
        }

        if (sync) {
          nextTick(function() {
            afterWrite$1(stream, state, finished, cb);
          });
        } else {
          afterWrite$1(stream, state, finished, cb);
        }
      }
    }

    function afterWrite$1(stream, state, finished, cb) {
      if (!finished)
        onwriteDrain$1(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe$1(stream, state);
    }

    // Must force callback to be called on nextTick, so that we don't
    // emit 'drain' before the write() consumer gets the 'false' return
    // value, and has a chance to attach a 'drain' listener.
    function onwriteDrain$1(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
      }
    }


    // if there's something in the buffer waiting, then process it
    function clearBuffer$1(stream, state) {
      state.bufferProcessing = true;

      if (stream._writev && state.buffer.length > 1) {
        // Fast case, write everything using _writev()
        var cbs = [];
        for (var c = 0; c < state.buffer.length; c++)
          cbs.push(state.buffer[c].callback);

        // count the one we are adding, as well.
        // TODO(isaacs) clean this up
        state.pendingcb++;
        doWrite$1(stream, state, true, state.length, state.buffer, '', function(err) {
          for (var i = 0; i < cbs.length; i++) {
            state.pendingcb--;
            cbs[i](err);
          }
        });

        // Clear buffer
        state.buffer = [];
      } else {
        // Slow case, write chunks one-by-one
        for (var c = 0; c < state.buffer.length; c++) {
          var entry = state.buffer[c];
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;

          doWrite$1(stream, state, false, len, chunk, encoding, cb);

          // if we didn't call the onwrite immediately, then
          // it means that we need to wait until it does.
          // also, that means that the chunk and cb are currently
          // being processed, so move the buffer counter past them.
          if (state.writing) {
            c++;
            break;
          }
        }

        if (c < state.buffer.length)
          state.buffer = state.buffer.slice(c);
        else
          state.buffer.length = 0;
      }

      state.bufferProcessing = false;
    }

    Writable$1.prototype._write = function(chunk, encoding, cb) {
      cb(new Error('not implemented'));

    };

    Writable$1.prototype._writev = null;

    Writable$1.prototype.end = function(chunk, encoding, cb) {
      var state = this._writableState;

      if (util$1.isFunction(chunk)) {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (util$1.isFunction(encoding)) {
        cb = encoding;
        encoding = null;
      }

      if (!util$1.isNullOrUndefined(chunk))
        this.write(chunk, encoding);

      // .end() fully uncorks
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }

      // ignore unnecessary end() calls.
      if (!state.ending && !state.finished)
        endWritable$1(this, state, cb);
    };


    function needFinish$1(stream, state) {
      return (state.ending &&
              state.length === 0 &&
              !state.finished &&
              !state.writing);
    }

    function prefinish$1(stream, state) {
      if (!state.prefinished) {
        state.prefinished = true;
        stream.emit('prefinish');
      }
    }

    function finishMaybe$1(stream, state) {
      var need = needFinish$1(stream, state);
      if (need) {
        if (state.pendingcb === 0) {
          prefinish$1(stream, state);
          state.finished = true;
          stream.emit('finish');
        } else
          prefinish$1(stream, state);
      }
      return need;
    }

    function endWritable$1(stream, state, cb) {
      state.ending = true;
      finishMaybe$1(stream, state);
      if (cb) {
        if (state.finished)
          nextTick(cb);
        else
          stream.once('finish', cb);
      }
      state.ended = true;
    }

    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    // a duplex stream is just a stream that is both readable and writable.
    // Since JS doesn't have multiple prototypal inheritance, this class
    // prototypally inherits from Readable, and then parasitically from
    // Writable.

    var _stream_duplex = Duplex$1;

    /*<replacement>*/
    var objectKeys$1 = Object.keys || function (obj) {
      var keys = [];
      for (var key in obj) keys.push(key);
      return keys;
    };
    /*</replacement>*/


    /*<replacement>*/

    util$1.inherits = inherits_browser;
    /*</replacement>*/




    util$1.inherits(Duplex$1, _stream_readable);

    forEach$1(objectKeys$1(_stream_writable.prototype), function(method) {
      if (!Duplex$1.prototype[method])
        Duplex$1.prototype[method] = _stream_writable.prototype[method];
    });

    function Duplex$1(options) {
      if (!(this instanceof Duplex$1))
        return new Duplex$1(options);

      _stream_readable.call(this, options);
      _stream_writable.call(this, options);

      if (options && options.readable === false)
        this.readable = false;

      if (options && options.writable === false)
        this.writable = false;

      this.allowHalfOpen = true;
      if (options && options.allowHalfOpen === false)
        this.allowHalfOpen = false;

      this.once('end', onend$1);
    }

    // the no-half-open enforcer
    function onend$1() {
      // if we allow half-open state, or if the writable side ended,
      // then we're ok.
      if (this.allowHalfOpen || this._writableState.ended)
        return;

      // no more data can be written.
      // But allow more writes to happen in this tick.
      nextTick(this.end.bind(this));
    }

    function forEach$1 (xs, f) {
      for (var i = 0, l = xs.length; i < l; i++) {
        f(xs[i], i);
      }
    }

    var string_decoder = createCommonjsModule(function (module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    var Buffer = bufferEs6.Buffer;

    var isBufferEncoding = Buffer.isEncoding
      || function(encoding) {
           switch (encoding && encoding.toLowerCase()) {
             case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
             default: return false;
           }
         };


    function assertEncoding(encoding) {
      if (encoding && !isBufferEncoding(encoding)) {
        throw new Error('Unknown encoding: ' + encoding);
      }
    }

    // StringDecoder provides an interface for efficiently splitting a series of
    // buffers into a series of JS strings without breaking apart multi-byte
    // characters. CESU-8 is handled as part of the UTF-8 encoding.
    //
    // @TODO Handling all encodings inside a single object makes it very difficult
    // to reason about this code, so it should be split up in the future.
    // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
    // points as used by CESU-8.
    var StringDecoder = exports.StringDecoder = function(encoding) {
      this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
      assertEncoding(encoding);
      switch (this.encoding) {
        case 'utf8':
          // CESU-8 represents each of Surrogate Pair by 3-bytes
          this.surrogateSize = 3;
          break;
        case 'ucs2':
        case 'utf16le':
          // UTF-16 represents each of Surrogate Pair by 2-bytes
          this.surrogateSize = 2;
          this.detectIncompleteChar = utf16DetectIncompleteChar;
          break;
        case 'base64':
          // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
          this.surrogateSize = 3;
          this.detectIncompleteChar = base64DetectIncompleteChar;
          break;
        default:
          this.write = passThroughWrite;
          return;
      }

      // Enough space to store all bytes of a single character. UTF-8 needs 4
      // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
      this.charBuffer = new Buffer(6);
      // Number of bytes received for the current incomplete multi-byte character.
      this.charReceived = 0;
      // Number of bytes expected for the current incomplete multi-byte character.
      this.charLength = 0;
    };


    // write decodes the given buffer and returns it as JS string that is
    // guaranteed to not contain any partial multi-byte characters. Any partial
    // character found at the end of the buffer is buffered up, and will be
    // returned when calling write again with the remaining bytes.
    //
    // Note: Converting a Buffer containing an orphan surrogate to a String
    // currently works, but converting a String to a Buffer (via `new Buffer`, or
    // Buffer#write) will replace incomplete surrogates with the unicode
    // replacement character. See https://codereview.chromium.org/121173009/ .
    StringDecoder.prototype.write = function(buffer) {
      var charStr = '';
      // if our last write ended with an incomplete multibyte character
      while (this.charLength) {
        // determine how many remaining bytes this buffer has to offer for this char
        var available = (buffer.length >= this.charLength - this.charReceived) ?
            this.charLength - this.charReceived :
            buffer.length;

        // add the new bytes to the char buffer
        buffer.copy(this.charBuffer, this.charReceived, 0, available);
        this.charReceived += available;

        if (this.charReceived < this.charLength) {
          // still not enough chars in this buffer? wait for more ...
          return '';
        }

        // remove bytes belonging to the current character from the buffer
        buffer = buffer.slice(available, buffer.length);

        // get the character that was split
        charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

        // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
        var charCode = charStr.charCodeAt(charStr.length - 1);
        if (charCode >= 0xD800 && charCode <= 0xDBFF) {
          this.charLength += this.surrogateSize;
          charStr = '';
          continue;
        }
        this.charReceived = this.charLength = 0;

        // if there are no more bytes in this buffer, just emit our char
        if (buffer.length === 0) {
          return charStr;
        }
        break;
      }

      // determine and set charLength / charReceived
      this.detectIncompleteChar(buffer);

      var end = buffer.length;
      if (this.charLength) {
        // buffer the incomplete character bytes we got
        buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
        end -= this.charReceived;
      }

      charStr += buffer.toString(this.encoding, 0, end);

      var end = charStr.length - 1;
      var charCode = charStr.charCodeAt(end);
      // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
      if (charCode >= 0xD800 && charCode <= 0xDBFF) {
        var size = this.surrogateSize;
        this.charLength += size;
        this.charReceived += size;
        this.charBuffer.copy(this.charBuffer, size, 0, size);
        buffer.copy(this.charBuffer, 0, 0, size);
        return charStr.substring(0, end);
      }

      // or just emit the charStr
      return charStr;
    };

    // detectIncompleteChar determines if there is an incomplete UTF-8 character at
    // the end of the given buffer. If so, it sets this.charLength to the byte
    // length that character, and sets this.charReceived to the number of bytes
    // that are available for this character.
    StringDecoder.prototype.detectIncompleteChar = function(buffer) {
      // determine how many bytes we have to check at the end of this buffer
      var i = (buffer.length >= 3) ? 3 : buffer.length;

      // Figure out if one of the last i bytes of our buffer announces an
      // incomplete char.
      for (; i > 0; i--) {
        var c = buffer[buffer.length - i];

        // See http://en.wikipedia.org/wiki/UTF-8#Description

        // 110XXXXX
        if (i == 1 && c >> 5 == 0x06) {
          this.charLength = 2;
          break;
        }

        // 1110XXXX
        if (i <= 2 && c >> 4 == 0x0E) {
          this.charLength = 3;
          break;
        }

        // 11110XXX
        if (i <= 3 && c >> 3 == 0x1E) {
          this.charLength = 4;
          break;
        }
      }
      this.charReceived = i;
    };

    StringDecoder.prototype.end = function(buffer) {
      var res = '';
      if (buffer && buffer.length)
        res = this.write(buffer);

      if (this.charReceived) {
        var cr = this.charReceived;
        var buf = this.charBuffer;
        var enc = this.encoding;
        res += buf.slice(0, cr).toString(enc);
      }

      return res;
    };

    function passThroughWrite(buffer) {
      return buffer.toString(this.encoding);
    }

    function utf16DetectIncompleteChar(buffer) {
      this.charReceived = buffer.length % 2;
      this.charLength = this.charReceived ? 2 : 0;
    }

    function base64DetectIncompleteChar(buffer) {
      this.charReceived = buffer.length % 3;
      this.charLength = this.charReceived ? 3 : 0;
    }
    });
    var string_decoder_1 = string_decoder.StringDecoder;

    var require$$3 = getCjsExportFromNamespace(_nodeResolve_empty$1);

    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    var _stream_readable = Readable$1;

    /*<replacement>*/

    /*</replacement>*/


    /*<replacement>*/
    var Buffer$2 = bufferEs6.Buffer;
    /*</replacement>*/

    Readable$1.ReadableState = ReadableState$1;

    var EE = EventEmitter.EventEmitter;

    /*<replacement>*/
    if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
      return emitter.listeners(type).length;
    };
    /*</replacement>*/



    /*<replacement>*/

    util$1.inherits = inherits_browser;
    /*</replacement>*/

    var StringDecoder$1;


    /*<replacement>*/
    var debug$1 = require$$3;
    if (debug$1 && debug$1.debuglog) {
      debug$1 = debug$1.debuglog('stream');
    } else {
      debug$1 = function () {};
    }
    /*</replacement>*/


    util$1.inherits(Readable$1, Stream);

    function ReadableState$1(options, stream) {
      var Duplex = _stream_duplex;

      options = options || {};

      // the point at which it stops calling _read() to fill the buffer
      // Note: 0 is a valid value, means "don't call _read preemptively ever"
      var hwm = options.highWaterMark;
      var defaultHwm = options.objectMode ? 16 : 16 * 1024;
      this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

      // cast to ints.
      this.highWaterMark = ~~this.highWaterMark;

      this.buffer = [];
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;

      // a flag to be able to tell if the onwrite cb is called immediately,
      // or on a later tick.  We set this to true at first, because any
      // actions that shouldn't happen until "later" should generally also
      // not happen before the first write call.
      this.sync = true;

      // whenever we return null, then we set a flag to say
      // that we're awaiting a 'readable' event emission.
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;


      // object stream flag. Used to make read(n) ignore n and to
      // make all the buffer merging and length checks go away
      this.objectMode = !!options.objectMode;

      if (stream instanceof Duplex)
        this.objectMode = this.objectMode || !!options.readableObjectMode;

      // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.
      this.defaultEncoding = options.defaultEncoding || 'utf8';

      // when piping, we only care about 'readable' events that happen
      // after read()ing all the bytes and not getting any pushback.
      this.ranOut = false;

      // the number of writers that are awaiting a drain event in .pipe()s
      this.awaitDrain = 0;

      // if true, a maybeReadMore has been scheduled
      this.readingMore = false;

      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        if (!StringDecoder$1)
          StringDecoder$1 = string_decoder.StringDecoder;
        this.decoder = new StringDecoder$1(options.encoding);
        this.encoding = options.encoding;
      }
    }

    function Readable$1(options) {

      if (!(this instanceof Readable$1))
        return new Readable$1(options);

      this._readableState = new ReadableState$1(options, this);

      // legacy
      this.readable = true;

      Stream.call(this);
    }

    // Manually shove something into the read() buffer.
    // This returns true if the highWaterMark has not been hit yet,
    // similar to how Writable.write() returns true if you should
    // write() some more.
    Readable$1.prototype.push = function(chunk, encoding) {
      var state = this._readableState;

      if (util$1.isString(chunk) && !state.objectMode) {
        encoding = encoding || state.defaultEncoding;
        if (encoding !== state.encoding) {
          chunk = new Buffer$2(chunk, encoding);
          encoding = '';
        }
      }

      return readableAddChunk$1(this, state, chunk, encoding, false);
    };

    // Unshift should *always* be something directly out of read()
    Readable$1.prototype.unshift = function(chunk) {
      var state = this._readableState;
      return readableAddChunk$1(this, state, chunk, '', true);
    };

    function readableAddChunk$1(stream, state, chunk, encoding, addToFront) {
      var er = chunkInvalid$1(state, chunk);
      if (er) {
        stream.emit('error', er);
      } else if (util$1.isNullOrUndefined(chunk)) {
        state.reading = false;
        if (!state.ended)
          onEofChunk$1(stream, state);
      } else if (state.objectMode || chunk && chunk.length > 0) {
        if (state.ended && !addToFront) {
          var e = new Error('stream.push() after EOF');
          stream.emit('error', e);
        } else if (state.endEmitted && addToFront) {
          var e = new Error('stream.unshift() after end event');
          stream.emit('error', e);
        } else {
          if (state.decoder && !addToFront && !encoding)
            chunk = state.decoder.write(chunk);

          if (!addToFront)
            state.reading = false;

          // if we want the data now, just emit it.
          if (state.flowing && state.length === 0 && !state.sync) {
            stream.emit('data', chunk);
            stream.read(0);
          } else {
            // update the buffer info.
            state.length += state.objectMode ? 1 : chunk.length;
            if (addToFront)
              state.buffer.unshift(chunk);
            else
              state.buffer.push(chunk);

            if (state.needReadable)
              emitReadable$1(stream);
          }

          maybeReadMore$1(stream, state);
        }
      } else if (!addToFront) {
        state.reading = false;
      }

      return needMoreData$1(state);
    }



    // if it's past the high water mark, we can push in some more.
    // Also, if we have no data yet, we can stand some
    // more bytes.  This is to work around cases where hwm=0,
    // such as the repl.  Also, if the push() triggered a
    // readable event, and the user called read(largeNumber) such that
    // needReadable was set, then we ought to push more, so that another
    // 'readable' event will be triggered.
    function needMoreData$1(state) {
      return !state.ended &&
             (state.needReadable ||
              state.length < state.highWaterMark ||
              state.length === 0);
    }

    // backwards compatibility.
    Readable$1.prototype.setEncoding = function(enc) {
      if (!StringDecoder$1)
        StringDecoder$1 = string_decoder.StringDecoder;
      this._readableState.decoder = new StringDecoder$1(enc);
      this._readableState.encoding = enc;
      return this;
    };

    // Don't raise the hwm > 128MB
    var MAX_HWM$1 = 0x800000;
    function roundUpToNextPowerOf2(n) {
      if (n >= MAX_HWM$1) {
        n = MAX_HWM$1;
      } else {
        // Get the next highest power of 2
        n--;
        for (var p = 1; p < 32; p <<= 1) n |= n >> p;
        n++;
      }
      return n;
    }

    function howMuchToRead$1(n, state) {
      if (state.length === 0 && state.ended)
        return 0;

      if (state.objectMode)
        return n === 0 ? 0 : 1;

      if (isNaN(n) || util$1.isNull(n)) {
        // only flow one buffer at a time
        if (state.flowing && state.buffer.length)
          return state.buffer[0].length;
        else
          return state.length;
      }

      if (n <= 0)
        return 0;

      // If we're asking for more than the target buffer level,
      // then raise the water mark.  Bump up to the next highest
      // power of 2, to prevent increasing it excessively in tiny
      // amounts.
      if (n > state.highWaterMark)
        state.highWaterMark = roundUpToNextPowerOf2(n);

      // don't have that much.  return null, unless we've ended.
      if (n > state.length) {
        if (!state.ended) {
          state.needReadable = true;
          return 0;
        } else
          return state.length;
      }

      return n;
    }

    // you can override either this method, or the async _read(n) below.
    Readable$1.prototype.read = function(n) {
      debug$1('read', n);
      var state = this._readableState;
      var nOrig = n;

      if (!util$1.isNumber(n) || n > 0)
        state.emittedReadable = false;

      // if we're doing read(0) to trigger a readable event, but we
      // already have a bunch of data in the buffer, then just trigger
      // the 'readable' event and move on.
      if (n === 0 &&
          state.needReadable &&
          (state.length >= state.highWaterMark || state.ended)) {
        debug$1('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended)
          endReadable$1(this);
        else
          emitReadable$1(this);
        return null;
      }

      n = howMuchToRead$1(n, state);

      // if we've ended, and we're now clear, then finish it up.
      if (n === 0 && state.ended) {
        if (state.length === 0)
          endReadable$1(this);
        return null;
      }

      // All the actual chunk generation logic needs to be
      // *below* the call to _read.  The reason is that in certain
      // synthetic stream cases, such as passthrough streams, _read
      // may be a completely synchronous operation which may change
      // the state of the read buffer, providing enough data when
      // before there was *not* enough.
      //
      // So, the steps are:
      // 1. Figure out what the state of things will be after we do
      // a read from the buffer.
      //
      // 2. If that resulting state will trigger a _read, then call _read.
      // Note that this may be asynchronous, or synchronous.  Yes, it is
      // deeply ugly to write APIs this way, but that still doesn't mean
      // that the Readable class should behave improperly, as streams are
      // designed to be sync/async agnostic.
      // Take note if the _read call is sync or async (ie, if the read call
      // has returned yet), so that we know whether or not it's safe to emit
      // 'readable' etc.
      //
      // 3. Actually pull the requested chunks out of the buffer and return.

      // if we need a readable event, then we need to do some reading.
      var doRead = state.needReadable;
      debug$1('need readable', doRead);

      // if we currently have less than the highWaterMark, then also read some
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug$1('length less than watermark', doRead);
      }

      // however, if we've ended, then there's no point, and if we're already
      // reading, then it's unnecessary.
      if (state.ended || state.reading) {
        doRead = false;
        debug$1('reading or ended', doRead);
      }

      if (doRead) {
        debug$1('do read');
        state.reading = true;
        state.sync = true;
        // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0)
          state.needReadable = true;
        // call internal read method
        this._read(state.highWaterMark);
        state.sync = false;
      }

      // If _read pushed data synchronously, then `reading` will be false,
      // and we need to re-evaluate how much data we can return to the user.
      if (doRead && !state.reading)
        n = howMuchToRead$1(nOrig, state);

      var ret;
      if (n > 0)
        ret = fromList$1(n, state);
      else
        ret = null;

      if (util$1.isNull(ret)) {
        state.needReadable = true;
        n = 0;
      }

      state.length -= n;

      // If we have nothing in the buffer, then we want to know
      // as soon as we *do* get something into the buffer.
      if (state.length === 0 && !state.ended)
        state.needReadable = true;

      // If we tried to read() past the EOF, then emit end on the next tick.
      if (nOrig !== n && state.ended && state.length === 0)
        endReadable$1(this);

      if (!util$1.isNull(ret))
        this.emit('data', ret);

      return ret;
    };

    function chunkInvalid$1(state, chunk) {
      var er = null;
      if (!util$1.isBuffer(chunk) &&
          !util$1.isString(chunk) &&
          !util$1.isNullOrUndefined(chunk) &&
          !state.objectMode) {
        er = new TypeError('Invalid non-string/buffer chunk');
      }
      return er;
    }


    function onEofChunk$1(stream, state) {
      if (state.decoder && !state.ended) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;

      // emit 'readable' now to make sure it gets picked up.
      emitReadable$1(stream);
    }

    // Don't emit readable right away in sync mode, because this can trigger
    // another read() call => stack overflow.  This way, it might trigger
    // a nextTick recursion warning, but that's not so bad.
    function emitReadable$1(stream) {
      var state = stream._readableState;
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug$1('emitReadable', state.flowing);
        state.emittedReadable = true;
        if (state.sync)
          nextTick(function() {
            emitReadable_$1(stream);
          });
        else
          emitReadable_$1(stream);
      }
    }

    function emitReadable_$1(stream) {
      debug$1('emit readable');
      stream.emit('readable');
      flow$1(stream);
    }


    // at this point, the user has presumably seen the 'readable' event,
    // and called read() to consume some data.  that may have triggered
    // in turn another _read(n) call, in which case reading = true if
    // it's in progress.
    // However, if we're not ended, or reading, and the length < hwm,
    // then go ahead and try to read some more preemptively.
    function maybeReadMore$1(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        nextTick(function() {
          maybeReadMore_$1(stream, state);
        });
      }
    }

    function maybeReadMore_$1(stream, state) {
      var len = state.length;
      while (!state.reading && !state.flowing && !state.ended &&
             state.length < state.highWaterMark) {
        debug$1('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length)
          // didn't get any data, stop spinning.
          break;
        else
          len = state.length;
      }
      state.readingMore = false;
    }

    // abstract method.  to be overridden in specific implementation classes.
    // call cb(er, data) where data is <= n in length.
    // for virtual (non-string, non-buffer) streams, "length" is somewhat
    // arbitrary, and perhaps not very meaningful.
    Readable$1.prototype._read = function(n) {
      this.emit('error', new Error('not implemented'));
    };

    Readable$1.prototype.pipe = function(dest, pipeOpts) {
      var src = this;
      var state = this._readableState;

      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug$1('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

      var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
                  dest !== process.stdout &&
                  dest !== process.stderr;

      var endFn = doEnd ? onend : cleanup;
      if (state.endEmitted)
        nextTick(endFn);
      else
        src.once('end', endFn);

      dest.on('unpipe', onunpipe);
      function onunpipe(readable) {
        debug$1('onunpipe');
        if (readable === src) {
          cleanup();
        }
      }

      function onend() {
        debug$1('onend');
        dest.end();
      }

      // when the dest drains, it reduces the awaitDrain counter
      // on the source.  This would be more elegant with a .once()
      // handler in flow(), but adding and removing repeatedly is
      // too slow.
      var ondrain = pipeOnDrain$1(src);
      dest.on('drain', ondrain);

      function cleanup() {
        debug$1('cleanup');
        // cleanup event handlers once the pipe is broken
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', cleanup);
        src.removeListener('data', ondata);

        // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain &&
            (!dest._writableState || dest._writableState.needDrain))
          ondrain();
      }

      src.on('data', ondata);
      function ondata(chunk) {
        debug$1('ondata');
        var ret = dest.write(chunk);
        if (false === ret) {
          debug$1('false write response, pause',
                src._readableState.awaitDrain);
          src._readableState.awaitDrain++;
          src.pause();
        }
      }

      // if the dest has an error, then stop piping into it.
      // however, don't suppress the throwing behavior for this.
      function onerror(er) {
        debug$1('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if (EE.listenerCount(dest, 'error') === 0)
          dest.emit('error', er);
      }
      // This is a brutally ugly hack to make sure that our error handler
      // is attached before any userland ones.  NEVER DO THIS.
      if (!dest._events || !dest._events.error)
        dest.on('error', onerror);
      else if (isarray(dest._events.error))
        dest._events.error.unshift(onerror);
      else
        dest._events.error = [onerror, dest._events.error];



      // Both close and finish should trigger unpipe, but only once.
      function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
      }
      dest.once('close', onclose);
      function onfinish() {
        debug$1('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
      }
      dest.once('finish', onfinish);

      function unpipe() {
        debug$1('unpipe');
        src.unpipe(dest);
      }

      // tell the dest that it's being piped to
      dest.emit('pipe', src);

      // start the flow if it hasn't been started already.
      if (!state.flowing) {
        debug$1('pipe resume');
        src.resume();
      }

      return dest;
    };

    function pipeOnDrain$1(src) {
      return function() {
        var state = src._readableState;
        debug$1('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain)
          state.awaitDrain--;
        if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
          state.flowing = true;
          flow$1(src);
        }
      };
    }


    Readable$1.prototype.unpipe = function(dest) {
      var state = this._readableState;

      // if we're not piping anywhere, then do nothing.
      if (state.pipesCount === 0)
        return this;

      // just one destination.  most common case.
      if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes)
          return this;

        if (!dest)
          dest = state.pipes;

        // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest)
          dest.emit('unpipe', this);
        return this;
      }

      // slow case. multiple pipe destinations.

      if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;

        for (var i = 0; i < len; i++)
          dests[i].emit('unpipe', this);
        return this;
      }

      // try to find the right one.
      var i = indexOf$1(state.pipes, dest);
      if (i === -1)
        return this;

      state.pipes.splice(i, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1)
        state.pipes = state.pipes[0];

      dest.emit('unpipe', this);

      return this;
    };

    // set up data events if they are asked for
    // Ensure readable listeners eventually get something
    Readable$1.prototype.on = function(ev, fn) {
      var res = Stream.prototype.on.call(this, ev, fn);

      // If listening to data, and it has not explicitly been paused,
      // then call resume to start the flow of data on the next tick.
      if (ev === 'data' && false !== this._readableState.flowing) {
        this.resume();
      }

      if (ev === 'readable' && this.readable) {
        var state = this._readableState;
        if (!state.readableListening) {
          state.readableListening = true;
          state.emittedReadable = false;
          state.needReadable = true;
          if (!state.reading) {
            var self = this;
            nextTick(function() {
              debug$1('readable nexttick read 0');
              self.read(0);
            });
          } else if (state.length) {
            emitReadable$1(this);
          }
        }
      }

      return res;
    };
    Readable$1.prototype.addListener = Readable$1.prototype.on;

    // pause() and resume() are remnants of the legacy readable stream API
    // If the user uses them, then switch into old mode.
    Readable$1.prototype.resume = function() {
      var state = this._readableState;
      if (!state.flowing) {
        debug$1('resume');
        state.flowing = true;
        if (!state.reading) {
          debug$1('resume read 0');
          this.read(0);
        }
        resume$1(this, state);
      }
      return this;
    };

    function resume$1(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        nextTick(function() {
          resume_$1(stream, state);
        });
      }
    }

    function resume_$1(stream, state) {
      state.resumeScheduled = false;
      stream.emit('resume');
      flow$1(stream);
      if (state.flowing && !state.reading)
        stream.read(0);
    }

    Readable$1.prototype.pause = function() {
      debug$1('call pause flowing=%j', this._readableState.flowing);
      if (false !== this._readableState.flowing) {
        debug$1('pause');
        this._readableState.flowing = false;
        this.emit('pause');
      }
      return this;
    };

    function flow$1(stream) {
      var state = stream._readableState;
      debug$1('flow', state.flowing);
      if (state.flowing) {
        do {
          var chunk = stream.read();
        } while (null !== chunk && state.flowing);
      }
    }

    // wrap an old-style stream as the async data source.
    // This is *not* part of the readable stream interface.
    // It is an ugly unfortunate mess of history.
    Readable$1.prototype.wrap = function(stream) {
      var state = this._readableState;
      var paused = false;

      var self = this;
      stream.on('end', function() {
        debug$1('wrapped end');
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length)
            self.push(chunk);
        }

        self.push(null);
      });

      stream.on('data', function(chunk) {
        debug$1('wrapped data');
        if (state.decoder)
          chunk = state.decoder.write(chunk);
        if (!chunk || !state.objectMode && !chunk.length)
          return;

        var ret = self.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });

      // proxy all the other methods.
      // important when wrapping filters and duplexes.
      for (var i in stream) {
        if (util$1.isFunction(stream[i]) && util$1.isUndefined(this[i])) {
          this[i] = function(method) { return function() {
            return stream[method].apply(stream, arguments);
          }}(i);
        }
      }

      // proxy certain important events.
      var events = ['error', 'close', 'destroy', 'pause', 'resume'];
      forEach$2(events, function(ev) {
        stream.on(ev, self.emit.bind(self, ev));
      });

      // when we try to consume some more bytes, simply unpause the
      // underlying stream.
      self._read = function(n) {
        debug$1('wrapped _read', n);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };

      return self;
    };



    // exposed for testing purposes only.
    Readable$1._fromList = fromList$1;

    // Pluck off n bytes from an array of buffers.
    // Length is the combined lengths of all the buffers in the list.
    function fromList$1(n, state) {
      var list = state.buffer;
      var length = state.length;
      var stringMode = !!state.decoder;
      var objectMode = !!state.objectMode;
      var ret;

      // nothing in the list, definitely empty.
      if (list.length === 0)
        return null;

      if (length === 0)
        ret = null;
      else if (objectMode)
        ret = list.shift();
      else if (!n || n >= length) {
        // read it all, truncate the array.
        if (stringMode)
          ret = list.join('');
        else
          ret = Buffer$2.concat(list, length);
        list.length = 0;
      } else {
        // read just some of it.
        if (n < list[0].length) {
          // just take a part of the first list item.
          // slice is the same for buffers and strings.
          var buf = list[0];
          ret = buf.slice(0, n);
          list[0] = buf.slice(n);
        } else if (n === list[0].length) {
          // first list is a perfect match
          ret = list.shift();
        } else {
          // complex case.
          // we have enough to cover it, but it spans past the first buffer.
          if (stringMode)
            ret = '';
          else
            ret = new Buffer$2(n);

          var c = 0;
          for (var i = 0, l = list.length; i < l && c < n; i++) {
            var buf = list[0];
            var cpy = Math.min(n - c, buf.length);

            if (stringMode)
              ret += buf.slice(0, cpy);
            else
              buf.copy(ret, c, 0, cpy);

            if (cpy < buf.length)
              list[0] = buf.slice(cpy);
            else
              list.shift();

            c += cpy;
          }
        }
      }

      return ret;
    }

    function endReadable$1(stream) {
      var state = stream._readableState;

      // If we get here before consuming all the bytes, then that is a
      // bug in node.  Should never happen.
      if (state.length > 0)
        throw new Error('endReadable called on non-empty stream');

      if (!state.endEmitted) {
        state.ended = true;
        nextTick(function() {
          // Check that we didn't get one last unshift.
          if (!state.endEmitted && state.length === 0) {
            state.endEmitted = true;
            stream.readable = false;
            stream.emit('end');
          }
        });
      }
    }

    function forEach$2 (xs, f) {
      for (var i = 0, l = xs.length; i < l; i++) {
        f(xs[i], i);
      }
    }

    function indexOf$1 (xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
      }
      return -1;
    }

    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.


    // a transform stream is a readable/writable stream where you do
    // something with the data.  Sometimes it's called a "filter",
    // but that's not a great name for it, since that implies a thing where
    // some bits pass through, and others are simply ignored.  (That would
    // be a valid example of a transform, of course.)
    //
    // While the output is causally related to the input, it's not a
    // necessarily symmetric or synchronous transformation.  For example,
    // a zlib stream might take multiple plain-text writes(), and then
    // emit a single compressed chunk some time in the future.
    //
    // Here's how this works:
    //
    // The Transform stream has all the aspects of the readable and writable
    // stream classes.  When you write(chunk), that calls _write(chunk,cb)
    // internally, and returns false if there's a lot of pending writes
    // buffered up.  When you call read(), that calls _read(n) until
    // there's enough pending readable data buffered up.
    //
    // In a transform stream, the written data is placed in a buffer.  When
    // _read(n) is called, it transforms the queued up data, calling the
    // buffered _write cb's as it consumes chunks.  If consuming a single
    // written chunk would result in multiple output chunks, then the first
    // outputted bit calls the readcb, and subsequent chunks just go into
    // the read buffer, and will cause it to emit 'readable' if necessary.
    //
    // This way, back-pressure is actually determined by the reading side,
    // since _read has to be called to start processing a new chunk.  However,
    // a pathological inflate type of transform can cause excessive buffering
    // here.  For example, imagine a stream where every byte of input is
    // interpreted as an integer from 0-255, and then results in that many
    // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
    // 1kb of data being output.  In this case, you could write a very small
    // amount of input, and end up with a very large amount of output.  In
    // such a pathological inflating mechanism, there'd be no way to tell
    // the system to stop doing the transform.  A single 4MB write could
    // cause the system to run out of memory.
    //
    // However, even in such a pathological case, only a single written chunk
    // would be consumed, and then the rest would wait (un-transformed) until
    // the results of the previous transformed chunk were consumed.

    var _stream_transform = Transform$1;



    /*<replacement>*/

    util$1.inherits = inherits_browser;
    /*</replacement>*/

    util$1.inherits(Transform$1, _stream_duplex);


    function TransformState$1(options, stream) {
      this.afterTransform = function(er, data) {
        return afterTransform$1(stream, er, data);
      };

      this.needTransform = false;
      this.transforming = false;
      this.writecb = null;
      this.writechunk = null;
    }

    function afterTransform$1(stream, er, data) {
      var ts = stream._transformState;
      ts.transforming = false;

      var cb = ts.writecb;

      if (!cb)
        return stream.emit('error', new Error('no writecb in Transform class'));

      ts.writechunk = null;
      ts.writecb = null;

      if (!util$1.isNullOrUndefined(data))
        stream.push(data);

      if (cb)
        cb(er);

      var rs = stream._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        stream._read(rs.highWaterMark);
      }
    }


    function Transform$1(options) {
      if (!(this instanceof Transform$1))
        return new Transform$1(options);

      _stream_duplex.call(this, options);

      this._transformState = new TransformState$1(options, this);

      // when the writable side finishes, then flush out anything remaining.
      var stream = this;

      // start out asking for a readable event once data is transformed.
      this._readableState.needReadable = true;

      // we have implemented the _read method, and done the other things
      // that Readable wants before the first _read call, so unset the
      // sync guard flag.
      this._readableState.sync = false;

      this.once('prefinish', function() {
        if (util$1.isFunction(this._flush))
          this._flush(function(er) {
            done$1(stream, er);
          });
        else
          done$1(stream);
      });
    }

    Transform$1.prototype.push = function(chunk, encoding) {
      this._transformState.needTransform = false;
      return _stream_duplex.prototype.push.call(this, chunk, encoding);
    };

    // This is the part where you do stuff!
    // override this function in implementation classes.
    // 'chunk' is an input chunk.
    //
    // Call `push(newChunk)` to pass along transformed output
    // to the readable side.  You may call 'push' zero or more times.
    //
    // Call `cb(err)` when you are done with this chunk.  If you pass
    // an error, then that'll put the hurt on the whole operation.  If you
    // never call cb(), then you'll never get another chunk.
    Transform$1.prototype._transform = function(chunk, encoding, cb) {
      throw new Error('not implemented');
    };

    Transform$1.prototype._write = function(chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform ||
            rs.needReadable ||
            rs.length < rs.highWaterMark)
          this._read(rs.highWaterMark);
      }
    };

    // Doesn't matter what the args are here.
    // _transform does all the work.
    // That we got here means that the readable side wants more data.
    Transform$1.prototype._read = function(n) {
      var ts = this._transformState;

      if (!util$1.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        // mark that we need a transform, so that any data that comes in
        // will get processed, now that we've asked for it.
        ts.needTransform = true;
      }
    };


    function done$1(stream, er) {
      if (er)
        return stream.emit('error', er);

      // if there's nothing in the write buffer, then that means
      // that nothing more will ever be provided
      var ws = stream._writableState;
      var ts = stream._transformState;

      if (ws.length)
        throw new Error('calling transform done when ws.length != 0');

      if (ts.transforming)
        throw new Error('calling transform done when still transforming');

      return stream.push(null);
    }

    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    // a passthrough stream.
    // basically just the most minimal sort of Transform stream.
    // Every written chunk gets output as-is.

    var _stream_passthrough = PassThrough$1;



    /*<replacement>*/

    util$1.inherits = inherits_browser;
    /*</replacement>*/

    util$1.inherits(PassThrough$1, _stream_transform);

    function PassThrough$1(options) {
      if (!(this instanceof PassThrough$1))
        return new PassThrough$1(options);

      _stream_transform.call(this, options);
    }

    PassThrough$1.prototype._transform = function(chunk, encoding, cb) {
      cb(null, chunk);
    };

    var readable$1 = createCommonjsModule(function (module, exports) {
    exports = module.exports = _stream_readable;
    exports.Stream = Stream;
    exports.Readable = exports;
    exports.Writable = _stream_writable;
    exports.Duplex = _stream_duplex;
    exports.Transform = _stream_transform;
    exports.PassThrough = _stream_passthrough;
    });
    var readable_1 = readable$1.Stream;
    var readable_2 = readable$1.Readable;
    var readable_3 = readable$1.Writable;
    var readable_4 = readable$1.Duplex;
    var readable_5 = readable$1.Transform;
    var readable_6 = readable$1.PassThrough;

    /* NeuQuant Neural-Net Quantization Algorithm
     * ------------------------------------------
     *
     * Copyright (c) 1994 Anthony Dekker
     *
     * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.
     * See "Kohonen neural networks for optimal colour quantization"
     * in "Network: Computation in Neural Systems" Vol. 5 (1994) pp 351-367.
     * for a discussion of the algorithm.
     * See also  http://members.ozemail.com.au/~dekker/NEUQUANT.HTML
     *
     * Any party obtaining a copy of these files from the author, directly or
     * indirectly, is granted, free of charge, a full and unrestricted irrevocable,
     * world-wide, paid up, royalty-free, nonexclusive right and license to deal
     * in this software and documentation files (the "Software"), including without
     * limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons who receive
     * copies from any such party to do so, with the only requirement being
     * that this copyright notice remain intact.
     *
     * (JavaScript port 2012 by Johan Nordberg)
     */

    var ncycles = 100; // number of learning cycles
    var netsize = 256; // number of colors used
    var maxnetpos = netsize - 1;

    // defs for freq and bias
    var netbiasshift = 4; // bias for colour values
    var intbiasshift = 16; // bias for fractions
    var intbias = (1 << intbiasshift);
    var gammashift = 10;
    var betashift = 10;
    var beta = (intbias >> betashift); /* beta = 1/1024 */
    var betagamma = (intbias << (gammashift - betashift));

    // defs for decreasing radius factor
    var initrad = (netsize >> 3); // for 256 cols, radius starts
    var radiusbiasshift = 6; // at 32.0 biased by 6 bits
    var radiusbias = (1 << radiusbiasshift);
    var initradius = (initrad * radiusbias); //and decreases by a
    var radiusdec = 30; // factor of 1/30 each cycle

    // defs for decreasing alpha factor
    var alphabiasshift = 10; // alpha starts at 1.0
    var initalpha = (1 << alphabiasshift);

    /* radbias and alpharadbias used for radpower calculation */
    var radbiasshift = 8;
    var radbias = (1 << radbiasshift);
    var alpharadbshift = (alphabiasshift + radbiasshift);
    var alpharadbias = (1 << alpharadbshift);

    // four primes near 500 - assume no image has a length so large that it is
    // divisible by all four primes
    var prime1 = 499;
    var prime2 = 491;
    var prime3 = 487;
    var prime4 = 503;
    var minpicturebytes = (3 * prime4);

    /*
      Constructor: NeuQuant

      Arguments:

      pixels - array of pixels in RGB format
      samplefac - sampling factor 1 to 30 where lower is better quality

      >
      > pixels = [r, g, b, r, g, b, r, g, b, ..]
      >
    */
    function NeuQuant(pixels, samplefac) {
      var network; // int[netsize][4]
      var netindex; // for network lookup - really 256

      // bias and freq arrays for learning
      var bias;
      var freq;
      var radpower;

      /*
        Private Method: init

        sets up arrays
      */
      function init() {
        network = [];
        netindex = new Int32Array(256);
        bias = new Int32Array(netsize);
        freq = new Int32Array(netsize);
        radpower = new Int32Array(netsize >> 3);

        var i, v;
        for (i = 0; i < netsize; i++) {
          v = (i << (netbiasshift + 8)) / netsize;
          network[i] = new Float64Array([v, v, v, 0]);
          //network[i] = [v, v, v, 0]
          freq[i] = intbias / netsize;
          bias[i] = 0;
        }
      }

      /*
        Private Method: unbiasnet

        unbiases network to give byte values 0..255 and record position i to prepare for sort
      */
      function unbiasnet() {
        for (var i = 0; i < netsize; i++) {
          network[i][0] >>= netbiasshift;
          network[i][1] >>= netbiasshift;
          network[i][2] >>= netbiasshift;
          network[i][3] = i; // record color number
        }
      }

      /*
        Private Method: altersingle

        moves neuron *i* towards biased (b,g,r) by factor *alpha*
      */
      function altersingle(alpha, i, b, g, r) {
        network[i][0] -= (alpha * (network[i][0] - b)) / initalpha;
        network[i][1] -= (alpha * (network[i][1] - g)) / initalpha;
        network[i][2] -= (alpha * (network[i][2] - r)) / initalpha;
      }

      /*
        Private Method: alterneigh

        moves neurons in *radius* around index *i* towards biased (b,g,r) by factor *alpha*
      */
      function alterneigh(radius, i, b, g, r) {
        var lo = Math.abs(i - radius);
        var hi = Math.min(i + radius, netsize);

        var j = i + 1;
        var k = i - 1;
        var m = 1;

        var p, a;
        while ((j < hi) || (k > lo)) {
          a = radpower[m++];

          if (j < hi) {
            p = network[j++];
            p[0] -= (a * (p[0] - b)) / alpharadbias;
            p[1] -= (a * (p[1] - g)) / alpharadbias;
            p[2] -= (a * (p[2] - r)) / alpharadbias;
          }

          if (k > lo) {
            p = network[k--];
            p[0] -= (a * (p[0] - b)) / alpharadbias;
            p[1] -= (a * (p[1] - g)) / alpharadbias;
            p[2] -= (a * (p[2] - r)) / alpharadbias;
          }
        }
      }

      /*
        Private Method: contest

        searches for biased BGR values
      */
      function contest(b, g, r) {
        /*
          finds closest neuron (min dist) and updates freq
          finds best neuron (min dist-bias) and returns position
          for frequently chosen neurons, freq[i] is high and bias[i] is negative
          bias[i] = gamma * ((1 / netsize) - freq[i])
        */

        var bestd = ~(1 << 31);
        var bestbiasd = bestd;
        var bestpos = -1;
        var bestbiaspos = bestpos;

        var i, n, dist, biasdist, betafreq;
        for (i = 0; i < netsize; i++) {
          n = network[i];

          dist = Math.abs(n[0] - b) + Math.abs(n[1] - g) + Math.abs(n[2] - r);
          if (dist < bestd) {
            bestd = dist;
            bestpos = i;
          }

          biasdist = dist - ((bias[i]) >> (intbiasshift - netbiasshift));
          if (biasdist < bestbiasd) {
            bestbiasd = biasdist;
            bestbiaspos = i;
          }

          betafreq = (freq[i] >> betashift);
          freq[i] -= betafreq;
          bias[i] += (betafreq << gammashift);
        }

        freq[bestpos] += beta;
        bias[bestpos] -= betagamma;

        return bestbiaspos;
      }

      /*
        Private Method: inxbuild

        sorts network and builds netindex[0..255]
      */
      function inxbuild() {
        var i, j, p, q, smallpos, smallval, previouscol = 0, startpos = 0;
        for (i = 0; i < netsize; i++) {
          p = network[i];
          smallpos = i;
          smallval = p[1]; // index on g
          // find smallest in i..netsize-1
          for (j = i + 1; j < netsize; j++) {
            q = network[j];
            if (q[1] < smallval) { // index on g
              smallpos = j;
              smallval = q[1]; // index on g
            }
          }
          q = network[smallpos];
          // swap p (i) and q (smallpos) entries
          if (i != smallpos) {
            j = q[0];   q[0] = p[0];   p[0] = j;
            j = q[1];   q[1] = p[1];   p[1] = j;
            j = q[2];   q[2] = p[2];   p[2] = j;
            j = q[3];   q[3] = p[3];   p[3] = j;
          }
          // smallval entry is now in position i

          if (smallval != previouscol) {
            netindex[previouscol] = (startpos + i) >> 1;
            for (j = previouscol + 1; j < smallval; j++)
              netindex[j] = i;
            previouscol = smallval;
            startpos = i;
          }
        }
        netindex[previouscol] = (startpos + maxnetpos) >> 1;
        for (j = previouscol + 1; j < 256; j++)
          netindex[j] = maxnetpos; // really 256
      }

      /*
        Private Method: inxsearch

        searches for BGR values 0..255 and returns a color index
      */
      function inxsearch(b, g, r) {
        var a, p, dist;

        var bestd = 1000; // biggest possible dist is 256*3
        var best = -1;

        var i = netindex[g]; // index on g
        var j = i - 1; // start at netindex[g] and work outwards

        while ((i < netsize) || (j >= 0)) {
          if (i < netsize) {
            p = network[i];
            dist = p[1] - g; // inx key
            if (dist >= bestd) i = netsize; // stop iter
            else {
              i++;
              if (dist < 0) dist = -dist;
              a = p[0] - b; if (a < 0) a = -a;
              dist += a;
              if (dist < bestd) {
                a = p[2] - r; if (a < 0) a = -a;
                dist += a;
                if (dist < bestd) {
                  bestd = dist;
                  best = p[3];
                }
              }
            }
          }
          if (j >= 0) {
            p = network[j];
            dist = g - p[1]; // inx key - reverse dif
            if (dist >= bestd) j = -1; // stop iter
            else {
              j--;
              if (dist < 0) dist = -dist;
              a = p[0] - b; if (a < 0) a = -a;
              dist += a;
              if (dist < bestd) {
                a = p[2] - r; if (a < 0) a = -a;
                dist += a;
                if (dist < bestd) {
                  bestd = dist;
                  best = p[3];
                }
              }
            }
          }
        }

        return best;
      }

      /*
        Private Method: learn

        "Main Learning Loop"
      */
      function learn() {
        var i;

        var lengthcount = pixels.length;
        var alphadec = 30 + ((samplefac - 1) / 3);
        var samplepixels = lengthcount / (3 * samplefac);
        var delta = ~~(samplepixels / ncycles);
        var alpha = initalpha;
        var radius = initradius;

        var rad = radius >> radiusbiasshift;

        if (rad <= 1) rad = 0;
        for (i = 0; i < rad; i++)
          radpower[i] = alpha * (((rad * rad - i * i) * radbias) / (rad * rad));

        var step;
        if (lengthcount < minpicturebytes) {
          samplefac = 1;
          step = 3;
        } else if ((lengthcount % prime1) !== 0) {
          step = 3 * prime1;
        } else if ((lengthcount % prime2) !== 0) {
          step = 3 * prime2;
        } else if ((lengthcount % prime3) !== 0)  {
          step = 3 * prime3;
        } else {
          step = 3 * prime4;
        }

        var b, g, r, j;
        var pix = 0; // current pixel

        i = 0;
        while (i < samplepixels) {
          b = (pixels[pix] & 0xff) << netbiasshift;
          g = (pixels[pix + 1] & 0xff) << netbiasshift;
          r = (pixels[pix + 2] & 0xff) << netbiasshift;

          j = contest(b, g, r);

          altersingle(alpha, j, b, g, r);
          if (rad !== 0) alterneigh(rad, j, b, g, r); // alter neighbours

          pix += step;
          if (pix >= lengthcount) pix -= lengthcount;

          i++;

          if (delta === 0) delta = 1;
          if (i % delta === 0) {
            alpha -= alpha / alphadec;
            radius -= radius / radiusdec;
            rad = radius >> radiusbiasshift;

            if (rad <= 1) rad = 0;
            for (j = 0; j < rad; j++)
              radpower[j] = alpha * (((rad * rad - j * j) * radbias) / (rad * rad));
          }
        }
      }

      /*
        Method: buildColormap

        1. initializes network
        2. trains it
        3. removes misconceptions
        4. builds colorindex
      */
      function buildColormap() {
        init();
        learn();
        unbiasnet();
        inxbuild();
      }
      this.buildColormap = buildColormap;

      /*
        Method: getColormap

        builds colormap from the index

        returns array in the format:

        >
        > [r, g, b, r, g, b, r, g, b, ..]
        >
      */
      function getColormap() {
        var map = [];
        var index = [];

        for (var i = 0; i < netsize; i++)
          index[network[i][3]] = i;

        var k = 0;
        for (var l = 0; l < netsize; l++) {
          var j = index[l];
          map[k++] = (network[j][0]);
          map[k++] = (network[j][1]);
          map[k++] = (network[j][2]);
        }
        return map;
      }
      this.getColormap = getColormap;

      /*
        Method: lookupRGB

        looks for the closest *r*, *g*, *b* color in the map and
        returns its index
      */
      this.lookupRGB = inxsearch;
    }

    var TypedNeuQuant = NeuQuant;

    /*
      LZWEncoder.js

      Authors
      Kevin Weiner (original Java version - kweiner@fmsware.com)
      Thibault Imbert (AS3 version - bytearray.org)
      Johan Nordberg (JS version - code@johan-nordberg.com)

      Acknowledgements
      GIFCOMPR.C - GIF Image compression routines
      Lempel-Ziv compression based on 'compress'. GIF modifications by
      David Rowley (mgardi@watdcsu.waterloo.edu)
      GIF Image compression - modified 'compress'
      Based on: compress.c - File compression ala IEEE Computer, June 1984.
      By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)
      Jim McKie (decvax!mcvax!jim)
      Steve Davies (decvax!vax135!petsd!peora!srd)
      Ken Turkowski (decvax!decwrl!turtlevax!ken)
      James A. Woods (decvax!ihnp4!ames!jaw)
      Joe Orost (decvax!vax135!petsd!joe)
    */

    var EOF = -1;
    var BITS = 12;
    var HSIZE = 5003; // 80% occupancy
    var masks = [0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F,
                 0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF,
                 0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF];

    function LZWEncoder(width, height, pixels, colorDepth) {
      var initCodeSize = Math.max(2, colorDepth);

      var accum = new Uint8Array(256);
      var htab = new Int32Array(HSIZE);
      var codetab = new Int32Array(HSIZE);

      var cur_accum, cur_bits = 0;
      var a_count;
      var free_ent = 0; // first unused entry
      var maxcode;
      var remaining;
      var curPixel;
      var n_bits;

      // block compression parameters -- after all codes are used up,
      // and compression rate changes, start over.
      var clear_flg = false;

      // Algorithm: use open addressing double hashing (no chaining) on the
      // prefix code / next character combination. We do a variant of Knuth's
      // algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime
      // secondary probe. Here, the modular division first probe is gives way
      // to a faster exclusive-or manipulation. Also do block compression with
      // an adaptive reset, whereby the code table is cleared when the compression
      // ratio decreases, but after the table fills. The variable-length output
      // codes are re-sized at this point, and a special CLEAR code is generated
      // for the decompressor. Late addition: construct the table according to
      // file size for noticeable speed improvement on small files. Please direct
      // questions about this implementation to ames!jaw.
      var g_init_bits, ClearCode, EOFCode;

      // Add a character to the end of the current packet, and if it is 254
      // characters, flush the packet to disk.
      function char_out(c, outs) {
        accum[a_count++] = c;
        if (a_count >= 254) flush_char(outs);
      }

      // Clear out the hash table
      // table clear for block compress
      function cl_block(outs) {
        cl_hash(HSIZE);
        free_ent = ClearCode + 2;
        clear_flg = true;
        output(ClearCode, outs);
      }

      // Reset code table
      function cl_hash(hsize) {
        for (var i = 0; i < hsize; ++i) htab[i] = -1;
      }

      function compress(init_bits, outs) {
        var fcode, c, i, ent, disp, hsize_reg, hshift;

        // Set up the globals: g_init_bits - initial number of bits
        g_init_bits = init_bits;

        // Set up the necessary values
        clear_flg = false;
        n_bits = g_init_bits;
        maxcode = MAXCODE(n_bits);

        ClearCode = 1 << (init_bits - 1);
        EOFCode = ClearCode + 1;
        free_ent = ClearCode + 2;

        a_count = 0; // clear packet

        ent = nextPixel();

        hshift = 0;
        for (fcode = HSIZE; fcode < 65536; fcode *= 2) ++hshift;
        hshift = 8 - hshift; // set hash code range bound
        hsize_reg = HSIZE;
        cl_hash(hsize_reg); // clear hash table

        output(ClearCode, outs);

        outer_loop: while ((c = nextPixel()) != EOF) {
          fcode = (c << BITS) + ent;
          i = (c << hshift) ^ ent; // xor hashing
          if (htab[i] === fcode) {
            ent = codetab[i];
            continue;
          } else if (htab[i] >= 0) { // non-empty slot
            disp = hsize_reg - i; // secondary hash (after G. Knott)
            if (i === 0) disp = 1;
            do {
              if ((i -= disp) < 0) i += hsize_reg;
              if (htab[i] === fcode) {
                ent = codetab[i];
                continue outer_loop;
              }
            } while (htab[i] >= 0);
          }
          output(ent, outs);
          ent = c;
          if (free_ent < 1 << BITS) {
            codetab[i] = free_ent++; // code -> hashtable
            htab[i] = fcode;
          } else {
            cl_block(outs);
          }
        }

        // Put out the final code.
        output(ent, outs);
        output(EOFCode, outs);
      }

      function encode(outs) {
        outs.writeByte(initCodeSize); // write "initial code size" byte
        remaining = width * height; // reset navigation variables
        curPixel = 0;
        compress(initCodeSize + 1, outs); // compress and write the pixel data
        outs.writeByte(0); // write block terminator
      }

      // Flush the packet to disk, and reset the accumulator
      function flush_char(outs) {
        if (a_count > 0) {
          outs.writeByte(a_count);
          outs.writeBytes(accum, 0, a_count);
          a_count = 0;
        }
      }

      function MAXCODE(n_bits) {
        return (1 << n_bits) - 1;
      }

      // Return the next pixel from the image
      function nextPixel() {
        if (remaining === 0) return EOF;
        --remaining;
        var pix = pixels[curPixel++];
        return pix & 0xff;
      }

      function output(code, outs) {
        cur_accum &= masks[cur_bits];

        if (cur_bits > 0) cur_accum |= (code << cur_bits);
        else cur_accum = code;

        cur_bits += n_bits;

        while (cur_bits >= 8) {
          char_out((cur_accum & 0xff), outs);
          cur_accum >>= 8;
          cur_bits -= 8;
        }

        // If the next entry is going to be too big for the code size,
        // then increase it, if possible.
        if (free_ent > maxcode || clear_flg) {
          if (clear_flg) {
            maxcode = MAXCODE(n_bits = g_init_bits);
            clear_flg = false;
          } else {
            ++n_bits;
            if (n_bits == BITS) maxcode = 1 << BITS;
            else maxcode = MAXCODE(n_bits);
          }
        }

        if (code == EOFCode) {
          // At EOF, write the rest of the buffer.
          while (cur_bits > 0) {
            char_out((cur_accum & 0xff), outs);
            cur_accum >>= 8;
            cur_bits -= 8;
          }
          flush_char(outs);
        }
      }

      this.encode = encode;
    }

    var LZWEncoder_1 = LZWEncoder;

    // DEV: By using a capacitor, we prevent creating a data event for every byte written
    function ByteCapacitor(options) {
      // Inherit from ReadableStream
      readable$1.call(this, options);

      // Start with an empty buffer and allow writes
      this.okayToPush = true;
      this.resetData();
    }
    util.inherits(ByteCapacitor, readable$1);

    ByteCapacitor.prototype._read = function () {
      // The output is controlled by the input provided by methods.
      // If we exceed the highwater mark, we will raise an error.
      this.okayToPush = true;
    };

    ByteCapacitor.prototype.resetData = function () {
      this.data = [];
    };

    ByteCapacitor.prototype.flushData = function () {
      // If we are not okay to push, emit an error
      if (!this.okayToPush) {
        var err = new Error('GIF memory limit exceeded. Please `read` from GIF before writing additional frames/information.');
        return this.emit('error', err);
      }

      // Otherwise, push out the new buffer
      var buff = new Buffer(this.data);
      this.resetData();
      this.okayToPush = this.push(buff);
    };

    ByteCapacitor.prototype.writeByte = function (val) {
      this.data.push(val);
    };

    ByteCapacitor.prototype.writeUTFBytes = function (string) {
      for (var l = string.length, i = 0; i < l; i++) {
        this.writeByte(string.charCodeAt(i));
      }
    };

    ByteCapacitor.prototype.writeBytes = function (array, offset, length) {
      for (var l = length || array.length, i = offset || 0; i < l; i++) {
        this.writeByte(array[i]);
      }
    };

    function GIFEncoder(width, height, options) {
      // Fallback options
      options = options || {};

      // Inherit from ByteCapacitor immediately
      // https://github.com/isaacs/readable-stream/blob/v1.1.9/lib/_stream_readable.js#L60-L63
      var hwm = options.highWaterMark;
      ByteCapacitor.call(this, {
        // Allow for up to 64kB of GIFfy-goodness
        highWaterMark: (hwm || hwm === 0) ? hwm : 64 * 1024
      });

      // image size
      this.width = ~~width;
      this.height = ~~height;

      // transparent color if given
      this.transparent = null;

      // transparent index in color table
      this.transIndex = 0;

      // -1 = no repeat, 0 = forever. anything else is repeat count
      this.repeat = -1;

      // frame delay (hundredths)
      this.delay = 0;

      this.pixels = null; // BGR byte array from frame
      this.indexedPixels = null; // converted frame indexed to palette
      this.colorDepth = null; // number of bit planes
      this.colorTab = null; // RGB palette
      this.userPalette = null; // User-input palette
      this.usedEntry = []; // active palette entries
      this.palSize = 7; // color table size (bits-1)
      this.dispose = -1; // disposal code (-1 = use default)
      this.firstFrame = true;
      this.sample = 10; // default sample interval for quantizer

      // When we encounter a header, new frame, or stop, emit data
      var that = this;
      function flushData() {
        that.flushData();
      }
      this.on('writeHeader#stop', flushData);
      this.on('frame#stop', flushData);
      this.on('finish#stop', function finishGif () {
        // Flush the data
        flushData();

        // Close the gif
        that.push(null);
      });
    }
    util.inherits(GIFEncoder, ByteCapacitor);

    /*
      Sets the delay time between each frame, or changes it for subsequent frames
      (applies to last frame added)
    */
    GIFEncoder.prototype.setDelay = function(milliseconds) {
      this.delay = Math.round(milliseconds / 10);
    };

    /*
      Sets frame rate in frames per second.
    */
    GIFEncoder.prototype.setFrameRate = function(fps) {
      this.delay = Math.round(100 / fps);
    };

    /*
      Sets the GIF frame disposal code for the last added frame and any
      subsequent frames.

      Default is 0 if no transparent color has been set, otherwise 2.
    */
    GIFEncoder.prototype.setDispose = function(disposalCode) {
      if (disposalCode >= 0) this.dispose = disposalCode;
    };

    /*
      Sets the number of times the set of GIF frames should be played.

      -1 = play once
      0 = repeat indefinitely

      Default is -1

      Must be invoked before the first image is added
    */

    GIFEncoder.prototype.setRepeat = function(repeat) {
      this.repeat = repeat;
    };

    /*
      Sets the transparent color for the last added frame and any subsequent
      frames. Since all colors are subject to modification in the quantization
      process, the color in the final palette for each frame closest to the given
      color becomes the transparent color for that frame. May be set to null to
      indicate no transparent color.
    */
    GIFEncoder.prototype.setTransparent = function(color) {
      this.transparent = color;
    };

    // Custom methods for performance hacks around streaming GIF data pieces without re-analyzing/loading
    GIFEncoder.prototype.analyzeImage = function (imageData, options) {
      // convert to correct format if necessary
      if (options && options.palette) {
        this.setImagePalette(this.removeAlphaChannel(options.palette));
      }
      if (options && options.indexedPixels === true) {
        assert(options.palette, '`options.indexedPixels` requires `options.palette` to load from. Please include one`');
        this.setImagePixels(imageData);
      } else {
        this.setImagePixels(this.removeAlphaChannel(imageData));
      }
      this.analyzePixels(options); // build color table & map pixels
      if (options && options.palette) {
        this.userPalette = null;
      }
    };

    GIFEncoder.prototype.writeImageInfo = function () {
      if (this.firstFrame) {
        this.writeLSD(); // logical screen descriptior
        this.writePalette(); // global color table
        if (this.repeat >= 0) {
          // use NS app extension to indicate reps
          this.writeNetscapeExt();
        }
      }

      this.writeGraphicCtrlExt(); // write graphic control extension
      this.writeImageDesc(); // image descriptor
      if (!this.firstFrame) this.writePalette(); // local color table

      // DEV: This was originally after outputImage but it does not affect order it seems
      this.firstFrame = false;
    };

    GIFEncoder.prototype.outputImage = function () {
      this.writePixels(); // encode and write pixel data
    };

    /*
      Adds next GIF frame. The frame is not written immediately, but is
      actually deferred until the next frame is received so that timing
      data can be inserted.  Invoking finish() flushes all frames.
    */
    GIFEncoder.prototype.addFrame = function(imageData, options) {
      this.emit('frame#start');

      this.analyzeImage(imageData, options);
      this.writeImageInfo();
      this.outputImage();

      this.emit('frame#stop');
    };

    /*
      Adds final trailer to the GIF stream, if you don't call the finish method
      the GIF stream will not be valid.
    */
    GIFEncoder.prototype.finish = function() {
      this.emit('finish#start');
      this.writeByte(0x3b); // gif trailer
      this.emit('finish#stop');
    };

    /*
      Sets quality of color quantization (conversion of images to the maximum 256
      colors allowed by the GIF specification). Lower values (minimum = 1)
      produce better colors, but slow processing significantly. 10 is the
      default, and produces good color mapping at reasonable speeds. Values
      greater than 20 do not yield significant improvements in speed.
    */
    GIFEncoder.prototype.setQuality = function(quality) {
      if (quality < 1) quality = 1;
      this.sample = quality;
    };

    /*
      Writes GIF file header
    */
    GIFEncoder.prototype.writeHeader = function() {
      this.emit('writeHeader#start');
      this.writeUTFBytes("GIF89a");
      this.emit('writeHeader#stop');
    };

    /*
      Analyzes current frame colors and creates color map.
    */
    GIFEncoder.prototype.analyzePixels = function(options) {
      // If we're being called with a user defined palette, skip NeuQuant and
      // color remapping.
      var nPix, index, imgq;
      if (this.userPalette !== null) {
        assert(options && options.indexedPixels === true,
          '`palette` can only be used with `options.indexedPixels` at the moment. ' +
          'Please add `{indexedPixels: true}` to `addFrame()`');
        nPix = this.pixels.length;
        this.indexedPixels = new Uint8Array(nPix);

        this.colorTab = this.userPalette;

        for (var i = 0; i < nPix; i++) {
          index = this.pixels[i];
          this.indexedPixels[i] = index;
          this.usedEntry[index] = true;
        }
      } else {
        var len = this.pixels.length;
        nPix = len / 3;
        this.indexedPixels = new Uint8Array(nPix);

        imgq = new TypedNeuQuant(this.pixels, this.sample);
        imgq.buildColormap(); // create reduced palette
        this.colorTab = imgq.getColormap();

        // map image pixels to new palette
        var k = 0;
        for (var j = 0; j < nPix; j++) {
          index = imgq.lookupRGB(
            this.pixels[k++] & 0xff,
            this.pixels[k++] & 0xff,
            this.pixels[k++] & 0xff
          );
          this.usedEntry[index] = true;
          this.indexedPixels[j] = index;
        }
      }

      this.pixels = null;
      this.colorDepth = 8;
      this.palSize = 7;

      // find index for transparent color
      if (this.transparent !== null) {
        this.transIndex = imgq.lookupRGB(
          (this.transparent & 0xFF0000) >> 16,
          (this.transparent & 0x00FF00) >> 8,
          (this.transparent & 0x0000FF)
        );
      } else {
        this.transIndex = 0;
      }
    };


    /*
      Extracts image pixels into byte array pixels
      (removes alphachannel from canvas imagedata)
    */
    GIFEncoder.prototype.removeAlphaChannel = function (data) {
      var w = this.width;
      var h = this.height;
      var pixels = new Uint8Array(w * h * 3);

      var count = 0;

      for (var i = 0; i < h; i++) {
        for (var j = 0; j < w; j++) {
          var b = (i * w * 4) + j * 4;
          pixels[count++] = data[b];
          pixels[count++] = data[b+1];
          pixels[count++] = data[b+2];
        }
      }

      return pixels;
    };

    GIFEncoder.prototype.setImagePixels = function(pixels) {
      this.pixels = pixels;
    };
    GIFEncoder.prototype.setImagePalette = function(userPalette) {
      this.userPalette = userPalette;
    };

    /*
      Writes Graphic Control Extension
    */
    GIFEncoder.prototype.writeGraphicCtrlExt = function() {
      this.writeByte(0x21); // extension introducer
      this.writeByte(0xf9); // GCE label
      this.writeByte(4); // data block size

      var transp, disp;
      if (this.transparent === null) {
        transp = 0;
        disp = 0; // dispose = no action
      } else {
        transp = 1;
        disp = 2; // force clear if using transparent color
      }

      if (this.dispose >= 0) {
        disp = this.dispose & 7; // user override
      }
      disp <<= 2;

      // packed fields
      this.writeByte(
        0 | // 1:3 reserved
        disp | // 4:6 disposal
        0 | // 7 user input - 0 = none
        transp // 8 transparency flag
      );

      this.writeShort(this.delay); // delay x 1/100 sec
      this.writeByte(this.transIndex); // transparent color index
      this.writeByte(0); // block terminator
    };

    /*
      Writes Image Descriptor
    */
    GIFEncoder.prototype.writeImageDesc = function() {
      this.writeByte(0x2c); // image separator
      this.writeShort(0); // image position x,y = 0,0
      this.writeShort(0);
      this.writeShort(this.width); // image size
      this.writeShort(this.height);

      // packed fields
      if (this.firstFrame) {
        // no LCT - GCT is used for first (or only) frame
        this.writeByte(0);
      } else {
        // specify normal LCT
        this.writeByte(
          0x80 | // 1 local color table 1=yes
          0 | // 2 interlace - 0=no
          0 | // 3 sorted - 0=no
          0 | // 4-5 reserved
          this.palSize // 6-8 size of color table
        );
      }
    };

    /*
      Writes Logical Screen Descriptor
    */
    GIFEncoder.prototype.writeLSD = function() {
      // logical screen size
      this.writeShort(this.width);
      this.writeShort(this.height);

      // packed fields
      this.writeByte(
        0x80 | // 1 : global color table flag = 1 (gct used)
        0x70 | // 2-4 : color resolution = 7
        0x00 | // 5 : gct sort flag = 0
        this.palSize // 6-8 : gct size
      );

      this.writeByte(0); // background color index
      this.writeByte(0); // pixel aspect ratio - assume 1:1
    };

    /*
      Writes Netscape application extension to define repeat count.
    */
    GIFEncoder.prototype.writeNetscapeExt = function() {
      this.writeByte(0x21); // extension introducer
      this.writeByte(0xff); // app extension label
      this.writeByte(11); // block size
      this.writeUTFBytes('NETSCAPE2.0'); // app id + auth code
      this.writeByte(3); // sub-block size
      this.writeByte(1); // loop sub-block id
      this.writeShort(this.repeat); // loop count (extra iterations, 0=repeat forever)
      this.writeByte(0); // block terminator
    };

    /*
      Writes color table
    */
    GIFEncoder.prototype.writePalette = function() {
      this.writeBytes(this.colorTab);
      var n = (3 * 256) - this.colorTab.length;
      for (var i = 0; i < n; i++)
        this.writeByte(0);
    };

    GIFEncoder.prototype.writeShort = function(pValue) {
      this.writeByte(pValue & 0xFF);
      this.writeByte((pValue >> 8) & 0xFF);
    };

    /*
      Encodes and writes pixel data
    */
    GIFEncoder.prototype.writePixels = function() {
      var enc = new LZWEncoder_1(this.width, this.height, this.indexedPixels, this.colorDepth);
      enc.encode(this);
    };

    /*
      Retrieves the GIF stream
    */
    GIFEncoder.prototype.stream = function() {
      return this;
    };

    GIFEncoder.ByteCapacitor = ByteCapacitor;

    var GIFEncoder_1 = GIFEncoder;

    const FRAME_HEIGHT = 150;
    const FRAME_WIDTH = 200;
    const FRAMES_PER_SECOND = 10;
    const DURATION = 2000;
    const FRAME_DELAY = 1000 / FRAMES_PER_SECOND;
    const FRAME_TOTAL = (DURATION / 1000) * FRAMES_PER_SECOND;

    function generateImage (targetCanvasElement) {
      const bufferCanvasElement = document.createElement('canvas');
      bufferCanvasElement.width = FRAME_WIDTH;
      bufferCanvasElement.height = FRAME_HEIGHT * FRAME_TOTAL;
      const bufferContext = bufferCanvasElement.getContext('2d');

      return new Promise((resolve) => {
        let frameCount = 0;

        function captureFrame () {
          const yOffset = frameCount * FRAME_HEIGHT;
          bufferContext.drawImage(targetCanvasElement, 0, yOffset, FRAME_WIDTH, FRAME_HEIGHT);
          frameCount++;

          if (frameCount < FRAME_TOTAL) {
            setTimeout(captureFrame, FRAME_DELAY);
          } else {
            const bufferDataURL = bufferCanvasElement.toDataURL('image/png');
            resolve(bufferDataURL);
          }
        }

        setTimeout(captureFrame, FRAME_DELAY);
      });
    }

    function generateGIF (targetFilmstripElement) {
      const bufferCanvasElement = document.createElement('canvas');
      bufferCanvasElement.width = FRAME_WIDTH;
      bufferCanvasElement.height = FRAME_HEIGHT;
      const bufferContext = bufferCanvasElement.getContext('2d');

      return new Promise((resolve) => {
        const gif = new GIFEncoder_1(FRAME_WIDTH, FRAME_HEIGHT, {
          highWaterMark: 128 * 1000
        });
        gif.writeHeader();

        for (let i = 0; i < FRAME_TOTAL; i++) {
          bufferContext.drawImage(
            targetFilmstripElement,
            0, i * FRAME_HEIGHT, FRAME_WIDTH, FRAME_HEIGHT, // source
            0, 0, FRAME_WIDTH, FRAME_HEIGHT // destination
          );
          const bufferImageData = bufferContext.getImageData(0, 0, FRAME_WIDTH, FRAME_HEIGHT);
          gif.addFrame(bufferImageData.data);
        }

        gif.on('readable', function () {
          const buffer = gif.read();
          const blob = new Blob([buffer], { type: 'image/gif' });
          const url = window.URL.createObjectURL(blob);

          const link = document.createElement('a');
          link.href = url;
          link.download = Date.now() + '.gif';

          const clickEvent = new MouseEvent('click');
          link.dispatchEvent(clickEvent);

          setTimeout(() => window.URL.revokeObjectURL(url), 100);
        });

        gif.finish();
        resolve(gif);
      });
    }

    /* src/components/filmstrip.svelte generated by Svelte v3.20.1 */

    const { console: console_1 } = globals;
    const file$2 = "src/components/filmstrip.svelte";

    function create_fragment$4(ctx) {
    	let div;
    	let img;
    	let img_src_value;
    	let t0;
    	let button;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			img = element("img");
    			t0 = space();
    			button = element("button");
    			button.textContent = "Save  ▿";
    			attr_dev(img, "class", "image svelte-1dldkvr");
    			if (img.src !== (img_src_value = /*src*/ ctx[0])) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "");
    			add_location(img, file$2, 56, 2, 986);
    			attr_dev(button, "class", "download svelte-1dldkvr");
    			attr_dev(button, "type", "button");
    			add_location(button, file$2, 57, 2, 1052);
    			attr_dev(div, "class", "filmstrip svelte-1dldkvr");
    			add_location(div, file$2, 55, 0, 960);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor, remount) {
    			insert_dev(target, div, anchor);
    			append_dev(div, img);
    			/*img_binding*/ ctx[3](img);
    			append_dev(div, t0);
    			append_dev(div, button);
    			if (remount) dispose();
    			dispose = listen_dev(button, "click", /*handleDownloadClick*/ ctx[2], false, false, false);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*src*/ 1 && img.src !== (img_src_value = /*src*/ ctx[0])) {
    				attr_dev(img, "src", img_src_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*img_binding*/ ctx[3](null);
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { src } = $$props;
    	let imageElement;

    	function handleDownloadClick() {
    		console.log("handleDownloadClick()");
    		generateGIF(imageElement);
    	}

    	const writable_props = ["src"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Filmstrip> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Filmstrip", $$slots, []);

    	function img_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(1, imageElement = $$value);
    		});
    	}

    	$$self.$set = $$props => {
    		if ("src" in $$props) $$invalidate(0, src = $$props.src);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		generateGIF,
    		src,
    		imageElement,
    		handleDownloadClick
    	});

    	$$self.$inject_state = $$props => {
    		if ("src" in $$props) $$invalidate(0, src = $$props.src);
    		if ("imageElement" in $$props) $$invalidate(1, imageElement = $$props.imageElement);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [src, imageElement, handleDownloadClick, img_binding];
    }

    class Filmstrip extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, { src: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Filmstrip",
    			options,
    			id: create_fragment$4.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*src*/ ctx[0] === undefined && !("src" in props)) {
    			console_1.warn("<Filmstrip> was created without expected prop 'src'");
    		}
    	}

    	get src() {
    		throw new Error("<Filmstrip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set src(value) {
    		throw new Error("<Filmstrip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/message.svelte generated by Svelte v3.20.1 */
    const file$3 = "src/components/message.svelte";

    function create_fragment$5(ctx) {
    	let div1;
    	let t0;
    	let div0;
    	let t1;
    	let current;

    	const filmstrip = new Filmstrip({
    			props: { src: /*imageBlob*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			create_component(filmstrip.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			t1 = text(/*text*/ ctx[1]);
    			attr_dev(div0, "class", "text svelte-1vty4f2");
    			add_location(div0, file$3, 28, 2, 470);
    			attr_dev(div1, "class", "message svelte-1vty4f2");
    			add_location(div1, file$3, 26, 0, 414);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			mount_component(filmstrip, div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, t1);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const filmstrip_changes = {};
    			if (dirty & /*imageBlob*/ 1) filmstrip_changes.src = /*imageBlob*/ ctx[0];
    			filmstrip.$set(filmstrip_changes);
    			if (!current || dirty & /*text*/ 2) set_data_dev(t1, /*text*/ ctx[1]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(filmstrip.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(filmstrip.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(filmstrip);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let { imageBlob } = $$props;
    	let { text } = $$props;
    	const writable_props = ["imageBlob", "text"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Message> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Message", $$slots, []);

    	$$self.$set = $$props => {
    		if ("imageBlob" in $$props) $$invalidate(0, imageBlob = $$props.imageBlob);
    		if ("text" in $$props) $$invalidate(1, text = $$props.text);
    	};

    	$$self.$capture_state = () => ({ Filmstrip, imageBlob, text });

    	$$self.$inject_state = $$props => {
    		if ("imageBlob" in $$props) $$invalidate(0, imageBlob = $$props.imageBlob);
    		if ("text" in $$props) $$invalidate(1, text = $$props.text);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [imageBlob, text];
    }

    class Message extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, { imageBlob: 0, text: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Message",
    			options,
    			id: create_fragment$5.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*imageBlob*/ ctx[0] === undefined && !("imageBlob" in props)) {
    			console.warn("<Message> was created without expected prop 'imageBlob'");
    		}

    		if (/*text*/ ctx[1] === undefined && !("text" in props)) {
    			console.warn("<Message> was created without expected prop 'text'");
    		}
    	}

    	get imageBlob() {
    		throw new Error("<Message>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set imageBlob(value) {
    		throw new Error("<Message>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get text() {
    		throw new Error("<Message>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<Message>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
     * Use the ImageData from a Canvas and turn the image in a 1-bit black and white image using dithering
     */
    class CanvasDither {
        /**
         * Change the image to grayscale
         *
         * @param  {object}   image         The imageData of a Canvas 2d context
         * @return {object}                 The resulting imageData
         *
         */
        grayscale(image) {
            for (let i = 0; i < image.data.length; i += 4) {
                let luminance = (image.data[i] * 0.299) + (image.data[i + 1] * 0.587) + (image.data[i + 2] * 0.114);
                image.data.fill(luminance, i, i + 3);
            }

            return image;
        }

        /**
         * Change the image to blank and white using a simple threshold
         *
         * @param  {object}   image         The imageData of a Canvas 2d context
         * @param  {number}   threshold     Threshold value (0-255)
         * @return {object}                 The resulting imageData
         *
         */
        threshold(image, threshold) {
            for (let i = 0; i < image.data.length; i += 4) {
                let luminance = (image.data[i] * 0.299) + (image.data[i + 1] * 0.587) + (image.data[i + 2] * 0.114);

                let value = luminance < threshold ? 0 : 255;
                image.data.fill(value, i, i + 3);
            }

            return image;
        }

        /**
         * Change the image to blank and white using the Bayer algorithm
         *
         * @param  {object}   image         The imageData of a Canvas 2d context
         * @param  {number}   threshold     Threshold value (0-255)
         * @return {object}                 The resulting imageData
         *
         */
        bayer(image, threshold) {
            let thresholdMap = [
                [15, 135, 45, 165],
                [195, 75, 225, 105],
                [60, 180, 30, 150],
                [240, 120, 210, 90],
            ];

            for (let i = 0; i < image.data.length; i += 4) {
                let luminance = (image.data[i] * 0.299) + (image.data[i + 1] * 0.587) + (image.data[i + 2] * 0.114);

                let x = i / 4 % image.width;
                let y = Math.floor(i / 4 / image.width);
                let map = Math.floor((luminance + thresholdMap[x % 4][y % 4]) / 2);
                let value = map < threshold ? 0 : 255;
                image.data.fill(value, i, i + 3);
            }

            return image;
        }

        /**
         * Change the image to blank and white using the Floyd-Steinberg algorithm
         *
         * @param  {object}   image         The imageData of a Canvas 2d context
         * @return {object}                 The resulting imageData
         *
         */
        floydsteinberg(image) {
            let width = image.width;
            let luminance = new Uint8ClampedArray(image.width * image.height);

            for (let l = 0, i = 0; i < image.data.length; l++, i += 4) {
                luminance[l] = (image.data[i] * 0.299) + (image.data[i + 1] * 0.587) + (image.data[i + 2] * 0.114);
            }

            for (let l = 0, i = 0; i < image.data.length; l++, i += 4) {
                let value = luminance[l] < 129 ? 0 : 255;
                let error = Math.floor((luminance[l] - value) / 16);
                image.data.fill(value, i, i + 3);

                luminance[l + 1] += error * 7;
                luminance[l + width - 1] += error * 3;
                luminance[l + width] += error * 5;
                luminance[l + width + 1] += error * 1;
            }

            return image;
        }

        /**
         * Change the image to blank and white using the Atkinson algorithm
         *
         * @param  {object}   image         The imageData of a Canvas 2d context
         * @return {object}                 The resulting imageData
         *
         */
        atkinson(image) {
            let width = image.width;
            let luminance = new Uint8ClampedArray(image.width * image.height);

            for (let l = 0, i = 0; i < image.data.length; l++, i += 4) {
                luminance[l] = (image.data[i] * 0.299) + (image.data[i + 1] * 0.587) + (image.data[i + 2] * 0.114);
            }

            for (let l = 0, i = 0; i < image.data.length; l++, i += 4) {
                let value = luminance[l] < 129 ? 0 : 255;
                let error = Math.floor((luminance[l] - value) / 8);
                image.data.fill(value, i, i + 3);

                luminance[l + 1] += error;
                luminance[l + 2] += error;
                luminance[l + width - 1] += error;
                luminance[l + width] += error;
                luminance[l + width + 1] += error;
                luminance[l + 2 * width] += error;
            }

            return image;
        }
    }

    var canvasDither = new CanvasDither();

    var justThrottle = throttle;

    function throttle(fn, interval, callFirst) {
      var wait = false;
      var callNow = false;
      return function() {
        callNow = callFirst && !wait;
        var context = this;
        var args = arguments;
        if (!wait) {
          wait = true;
          setTimeout(function() {
            wait = false;
            if (!callFirst) {
              return fn.apply(context, args);
            }
          }, interval);
        }
        if (callNow) {
          callNow = false;
          return fn.apply(this, arguments);
        }
      };
    }

    /* src/components/stylized-webcam-feed.svelte generated by Svelte v3.20.1 */
    const file$4 = "src/components/stylized-webcam-feed.svelte";

    function create_fragment$6(ctx) {
    	let div;
    	let video;
    	let t;
    	let canvas;

    	const block = {
    		c: function create() {
    			div = element("div");
    			video = element("video");
    			t = space();
    			canvas = element("canvas");
    			attr_dev(video, "class", "raw-webcam svelte-cc5mg6");
    			attr_dev(video, "width", "200");
    			attr_dev(video, "height", "150");
    			add_location(video, file$4, 86, 2, 1962);
    			attr_dev(canvas, "class", "processed-webcam svelte-cc5mg6");
    			attr_dev(canvas, "width", "200");
    			attr_dev(canvas, "height", "150");
    			add_location(canvas, file$4, 87, 2, 2043);
    			attr_dev(div, "class", "stylized-webcam-feed");
    			add_location(div, file$4, 85, 0, 1925);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, video);
    			/*video_binding*/ ctx[6](video);
    			append_dev(div, t);
    			append_dev(div, canvas);
    			/*canvas_binding*/ ctx[7](canvas);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*video_binding*/ ctx[6](null);
    			/*canvas_binding*/ ctx[7](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { canvasElement } = $$props;
    	let { videoElement } = $$props;
    	let processedImageDrawRequestId;

    	function drawProcessedImage() {
    		const canvas2dContext = canvasElement.getContext("2d");
    		canvas2dContext.drawImage(videoElement, 0, 0, videoElement.width, videoElement.height);
    		const canvasImageData = canvas2dContext.getImageData(0, 0, canvasElement.width, canvasElement.height);
    		const filteredImageData = canvasDither.atkinson(canvasImageData);
    		canvas2dContext.putImageData(filteredImageData, 0, 0);
    	}

    	const throttledDrawProcessedImage = justThrottle(drawProcessedImage, 100, true);

    	function tryToDraw() {
    		throttledDrawProcessedImage();
    		processedImageDrawRequestId = requestAnimationFrame(tryToDraw);
    	}

    	onMount(() => {
    		navigator.mediaDevices.getUserMedia({
    			audio: false,
    			video: {
    				frameRate: { ideal: 10 },
    				width: { ideal: 640 },
    				height: { ideal: 480 }
    			}
    		}).then(mediaStream => {
    			$$invalidate(1, videoElement.srcObject = mediaStream, videoElement);
    			videoElement.play();
    		}).catch(error => {
    			alert(error);
    		});

    		processedImageDrawRequestId = requestAnimationFrame(tryToDraw);

    		return function onUnMount() {
    			cancelAnimationFrame(processedImageDrawRequestId);
    		};
    	});

    	const writable_props = ["canvasElement", "videoElement"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Stylized_webcam_feed> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Stylized_webcam_feed", $$slots, []);

    	function video_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(1, videoElement = $$value);
    		});
    	}

    	function canvas_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(0, canvasElement = $$value);
    		});
    	}

    	$$self.$set = $$props => {
    		if ("canvasElement" in $$props) $$invalidate(0, canvasElement = $$props.canvasElement);
    		if ("videoElement" in $$props) $$invalidate(1, videoElement = $$props.videoElement);
    	};

    	$$self.$capture_state = () => ({
    		Dither: canvasDither,
    		throttle: justThrottle,
    		onMount,
    		canvasElement,
    		videoElement,
    		processedImageDrawRequestId,
    		drawProcessedImage,
    		throttledDrawProcessedImage,
    		tryToDraw
    	});

    	$$self.$inject_state = $$props => {
    		if ("canvasElement" in $$props) $$invalidate(0, canvasElement = $$props.canvasElement);
    		if ("videoElement" in $$props) $$invalidate(1, videoElement = $$props.videoElement);
    		if ("processedImageDrawRequestId" in $$props) processedImageDrawRequestId = $$props.processedImageDrawRequestId;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		canvasElement,
    		videoElement,
    		processedImageDrawRequestId,
    		drawProcessedImage,
    		throttledDrawProcessedImage,
    		tryToDraw,
    		video_binding,
    		canvas_binding
    	];
    }

    class Stylized_webcam_feed extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, { canvasElement: 0, videoElement: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Stylized_webcam_feed",
    			options,
    			id: create_fragment$6.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*canvasElement*/ ctx[0] === undefined && !("canvasElement" in props)) {
    			console.warn("<Stylized_webcam_feed> was created without expected prop 'canvasElement'");
    		}

    		if (/*videoElement*/ ctx[1] === undefined && !("videoElement" in props)) {
    			console.warn("<Stylized_webcam_feed> was created without expected prop 'videoElement'");
    		}
    	}

    	get canvasElement() {
    		return this.$$.ctx[0];
    	}

    	set canvasElement(canvasElement) {
    		this.$set({ canvasElement });
    		flush();
    	}

    	get videoElement() {
    		return this.$$.ctx[1];
    	}

    	set videoElement(videoElement) {
    		this.$set({ videoElement });
    		flush();
    	}
    }

    /* src/components/new-message.svelte generated by Svelte v3.20.1 */
    const file$5 = "src/components/new-message.svelte";

    // (111:6) {#if recording}
    function create_if_block$1(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			attr_dev(span, "class", "recording-indicator svelte-1tnxyc8");
    			add_location(span, file$5, 110, 21, 2246);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(111:6) {#if recording}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let div2;
    	let form;
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let textarea;
    	let t2;
    	let button;
    	let t3;
    	let current;
    	let dispose;
    	let stylizedwebcamfeed_props = {};

    	const stylizedwebcamfeed = new Stylized_webcam_feed({
    			props: stylizedwebcamfeed_props,
    			$$inline: true
    		});

    	/*stylizedwebcamfeed_binding*/ ctx[6](stylizedwebcamfeed);
    	let if_block = /*recording*/ ctx[2] && create_if_block$1(ctx);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			form = element("form");
    			div0 = element("div");
    			create_component(stylizedwebcamfeed.$$.fragment);
    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();
    			div1 = element("div");
    			textarea = element("textarea");
    			t2 = space();
    			button = element("button");
    			t3 = text("➪");
    			attr_dev(div0, "class", "recording-booth svelte-1tnxyc8");
    			add_location(div0, file$5, 108, 4, 2143);
    			attr_dev(textarea, "class", "input svelte-1tnxyc8");
    			attr_dev(textarea, "type", "text");
    			attr_dev(textarea, "placeholder", "Type to GIF");
    			textarea.disabled = /*recording*/ ctx[2];
    			add_location(textarea, file$5, 113, 6, 2334);
    			attr_dev(button, "class", "submit svelte-1tnxyc8");
    			attr_dev(button, "type", "submit");
    			button.disabled = /*recording*/ ctx[2];
    			add_location(button, file$5, 120, 6, 2532);
    			attr_dev(div1, "class", "fake-input svelte-1tnxyc8");
    			add_location(div1, file$5, 112, 4, 2303);
    			attr_dev(form, "class", "form svelte-1tnxyc8");
    			add_location(form, file$5, 107, 2, 2079);
    			attr_dev(div2, "class", "new-message svelte-1tnxyc8");
    			add_location(div2, file$5, 106, 0, 2051);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor, remount) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, form);
    			append_dev(form, div0);
    			mount_component(stylizedwebcamfeed, div0, null);
    			append_dev(div0, t0);
    			if (if_block) if_block.m(div0, null);
    			append_dev(form, t1);
    			append_dev(form, div1);
    			append_dev(div1, textarea);
    			set_input_value(textarea, /*inputMessage*/ ctx[1]);
    			append_dev(div1, t2);
    			append_dev(div1, button);
    			append_dev(button, t3);
    			current = true;
    			if (remount) run_all(dispose);

    			dispose = [
    				listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[7]),
    				listen_dev(textarea, "keydown", /*handleInputKeydown*/ ctx[4], false, false, false),
    				listen_dev(form, "submit", prevent_default(/*handleSubmit*/ ctx[3]), false, true, false)
    			];
    		},
    		p: function update(ctx, [dirty]) {
    			const stylizedwebcamfeed_changes = {};
    			stylizedwebcamfeed.$set(stylizedwebcamfeed_changes);

    			if (/*recording*/ ctx[2]) {
    				if (!if_block) {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					if_block.m(div0, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (!current || dirty & /*recording*/ 4) {
    				prop_dev(textarea, "disabled", /*recording*/ ctx[2]);
    			}

    			if (dirty & /*inputMessage*/ 2) {
    				set_input_value(textarea, /*inputMessage*/ ctx[1]);
    			}

    			if (!current || dirty & /*recording*/ 4) {
    				prop_dev(button, "disabled", /*recording*/ ctx[2]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(stylizedwebcamfeed.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(stylizedwebcamfeed.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			/*stylizedwebcamfeed_binding*/ ctx[6](null);
    			destroy_component(stylizedwebcamfeed);
    			if (if_block) if_block.d();
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	const dispatch = createEventDispatcher();
    	let webcamFeed;
    	let inputMessage = "";
    	let recording = false;

    	async function handleSubmit() {
    		$$invalidate(2, recording = true);
    		const imageDataURL = await generateImage(webcamFeed.canvasElement);
    		$$invalidate(2, recording = false);
    		dispatch("createMessage", { text: inputMessage, imageDataURL });
    		$$invalidate(1, inputMessage = "");
    	}

    	function handleInputKeydown(event) {
    		if (event.key === "Enter" && !event.shiftKey) {
    			handleSubmit();
    		}
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<New_message> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("New_message", $$slots, []);

    	function stylizedwebcamfeed_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(0, webcamFeed = $$value);
    		});
    	}

    	function textarea_input_handler() {
    		inputMessage = this.value;
    		$$invalidate(1, inputMessage);
    	}

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		generateImage,
    		StylizedWebcamFeed: Stylized_webcam_feed,
    		Filmstrip,
    		dispatch,
    		webcamFeed,
    		inputMessage,
    		recording,
    		handleSubmit,
    		handleInputKeydown
    	});

    	$$self.$inject_state = $$props => {
    		if ("webcamFeed" in $$props) $$invalidate(0, webcamFeed = $$props.webcamFeed);
    		if ("inputMessage" in $$props) $$invalidate(1, inputMessage = $$props.inputMessage);
    		if ("recording" in $$props) $$invalidate(2, recording = $$props.recording);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		webcamFeed,
    		inputMessage,
    		recording,
    		handleSubmit,
    		handleInputKeydown,
    		dispatch,
    		stylizedwebcamfeed_binding,
    		textarea_input_handler
    	];
    }

    class New_message extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "New_message",
    			options,
    			id: create_fragment$7.name
    		});
    	}
    }

    /* src/routes/rooms/[id].svelte generated by Svelte v3.20.1 */
    const file$6 = "src/routes/rooms/[id].svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[4] = list[i].id;
    	child_ctx[7] = list[i].text;
    	child_ctx[8] = list[i].imageBlob;
    	child_ctx[10] = i;
    	return child_ctx;
    }

    // (74:2) {#each messages as { id, text, imageBlob }
    function create_each_block(key_1, ctx) {
    	let div;
    	let t;
    	let div_intro;
    	let div_outro;
    	let rect;
    	let stop_animation = noop;
    	let current;

    	const message = new Message({
    			props: {
    				text: /*text*/ ctx[7],
    				imageBlob: /*imageBlob*/ ctx[8]
    			},
    			$$inline: true
    		});

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			div = element("div");
    			create_component(message.$$.fragment);
    			t = space();
    			add_location(div, file$6, 74, 4, 1760);
    			this.first = div;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(message, div, null);
    			append_dev(div, t);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const message_changes = {};
    			if (dirty & /*messages*/ 1) message_changes.text = /*text*/ ctx[7];
    			if (dirty & /*messages*/ 1) message_changes.imageBlob = /*imageBlob*/ ctx[8];
    			message.$set(message_changes);
    		},
    		r: function measure() {
    			rect = div.getBoundingClientRect();
    		},
    		f: function fix() {
    			fix_position(div);
    			stop_animation();
    			add_transform(div, rect);
    		},
    		a: function animate() {
    			stop_animation();
    			stop_animation = create_animation(div, rect, flip, { duration: 200 });
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(message.$$.fragment, local);

    			add_render_callback(() => {
    				if (div_outro) div_outro.end(1);
    				if (!div_intro) div_intro = create_in_transition(div, /*receive*/ ctx[2], { key: /*id*/ ctx[4] });
    				div_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(message.$$.fragment, local);
    			if (div_intro) div_intro.invalidate();
    			div_outro = create_out_transition(div, /*send*/ ctx[1], { key: /*id*/ ctx[4] });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(message);
    			if (detaching && div_outro) div_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(74:2) {#each messages as { id, text, imageBlob }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let title_value;
    	let t0;
    	let div;
    	let t1;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let current;
    	document.title = title_value = "Room " + /*id*/ ctx[4];
    	const newmessage = new New_message({ $$inline: true });
    	newmessage.$on("createMessage", /*handleCreateMessage*/ ctx[3]);
    	let each_value = /*messages*/ ctx[0];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*id*/ ctx[4];
    	validate_each_keys(ctx, each_value, get_each_context, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			t0 = space();
    			div = element("div");
    			create_component(newmessage.$$.fragment);
    			t1 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "content svelte-8intlf");
    			add_location(div, file$6, 70, 0, 1623);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div, anchor);
    			mount_component(newmessage, div, null);
    			append_dev(div, t1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*id*/ 16) && title_value !== (title_value = "Room " + /*id*/ ctx[4])) {
    				document.title = title_value;
    			}

    			if (dirty & /*messages*/ 1) {
    				const each_value = /*messages*/ ctx[0];
    				validate_each_argument(each_value);
    				group_outros();
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
    				validate_each_keys(ctx, each_value, get_each_context, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, fix_and_outro_and_destroy_block, create_each_block, null, get_each_context);
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(newmessage.$$.fragment, local);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(newmessage.$$.fragment, local);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div);
    			destroy_component(newmessage);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { currentRoute } = $$props;
    	const { namedParams } = currentRoute;
    	const { id } = namedParams;
    	let messages = [];

    	const [send, receive] = crossfade({
    		duration: d => Math.sqrt(d * 100),
    		fallback(node, params) {
    			const style = getComputedStyle(node);
    			const transform = style.transform === "none" ? "" : style.transform;

    			return {
    				duration: 125,
    				easing: quintOut,
    				css: t => `
					transform: ${transform} scale(${t});
					opacity: ${t}
				`
    			};
    		}
    	});

    	onMount(async () => {
    		firestoreDb.collection(`rooms/${id}/messages`).limit(10).orderBy("createdAt", "desc").onSnapshot(function (collection) {
    			const docsData = collection.docs.map(doc => {
    				return { id: doc.id, ...doc.data() };
    			});

    			$$invalidate(0, messages = docsData);
    		});
    	});

    	async function handleCreateMessage(event) {
    		const { text, imageDataURL } = event.detail;

    		const newMessage = await firestoreDb.collection(`rooms/${id}/messages`).add({
    			createdAt: firestore.FieldValue.serverTimestamp(),
    			imageBlob: imageDataURL,
    			text
    		});
    	}

    	const writable_props = ["currentRoute"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<U5Bidu5D> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("U5Bidu5D", $$slots, []);

    	$$self.$set = $$props => {
    		if ("currentRoute" in $$props) $$invalidate(5, currentRoute = $$props.currentRoute);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		quintOut,
    		crossfade,
    		flip,
    		firestore,
    		firestoreDb,
    		Message,
    		NewMessage: New_message,
    		currentRoute,
    		namedParams,
    		id,
    		messages,
    		send,
    		receive,
    		handleCreateMessage
    	});

    	$$self.$inject_state = $$props => {
    		if ("currentRoute" in $$props) $$invalidate(5, currentRoute = $$props.currentRoute);
    		if ("messages" in $$props) $$invalidate(0, messages = $$props.messages);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [messages, send, receive, handleCreateMessage, id, currentRoute];
    }

    class U5Bidu5D extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, { currentRoute: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "U5Bidu5D",
    			options,
    			id: create_fragment$8.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*currentRoute*/ ctx[5] === undefined && !("currentRoute" in props)) {
    			console.warn("<U5Bidu5D> was created without expected prop 'currentRoute'");
    		}
    	}

    	get currentRoute() {
    		throw new Error("<U5Bidu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentRoute(value) {
    		throw new Error("<U5Bidu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/nav.svelte generated by Svelte v3.20.1 */

    const file$7 = "src/components/nav.svelte";

    function create_fragment$9(ctx) {
    	let nav;
    	let a;
    	let t0;
    	let span;

    	const block = {
    		c: function create() {
    			nav = element("nav");
    			a = element("a");
    			t0 = text("Dither ");
    			span = element("span");
    			span.textContent = "alpha";
    			attr_dev(span, "class", "alpha-tag svelte-om0f9x");
    			add_location(span, file$7, 26, 37, 328);
    			attr_dev(a, "href", "/");
    			attr_dev(a, "class", "app-name svelte-om0f9x");
    			add_location(a, file$7, 26, 1, 292);
    			attr_dev(nav, "class", "nav svelte-om0f9x");
    			add_location(nav, file$7, 25, 0, 273);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, nav, anchor);
    			append_dev(nav, a);
    			append_dev(a, t0);
    			append_dev(a, span);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(nav);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props) {
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Nav> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Nav", $$slots, []);
    	return [];
    }

    class Nav extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Nav",
    			options,
    			id: create_fragment$9.name
    		});
    	}
    }

    /* src/routes/_layout.svelte generated by Svelte v3.20.1 */
    const file$8 = "src/routes/_layout.svelte";

    function create_fragment$a(ctx) {
    	let t;
    	let main;
    	let current;
    	const nav = new Nav({ $$inline: true });

    	const route = new src_5({
    			props: { currentRoute: /*currentRoute*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(nav.$$.fragment);
    			t = space();
    			main = element("main");
    			create_component(route.$$.fragment);
    			add_location(main, file$8, 19, 0, 274);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(nav, target, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, main, anchor);
    			mount_component(route, main, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const route_changes = {};
    			if (dirty & /*currentRoute*/ 1) route_changes.currentRoute = /*currentRoute*/ ctx[0];
    			route.$set(route_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(nav.$$.fragment, local);
    			transition_in(route.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(nav.$$.fragment, local);
    			transition_out(route.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(nav, detaching);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(main);
    			destroy_component(route);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { currentRoute } = $$props;
    	const writable_props = ["currentRoute"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Layout> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Layout", $$slots, []);

    	$$self.$set = $$props => {
    		if ("currentRoute" in $$props) $$invalidate(0, currentRoute = $$props.currentRoute);
    	};

    	$$self.$capture_state = () => ({ Route: src_5, Nav, currentRoute });

    	$$self.$inject_state = $$props => {
    		if ("currentRoute" in $$props) $$invalidate(0, currentRoute = $$props.currentRoute);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [currentRoute];
    }

    class Layout extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, { currentRoute: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Layout",
    			options,
    			id: create_fragment$a.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*currentRoute*/ ctx[0] === undefined && !("currentRoute" in props)) {
    			console.warn("<Layout> was created without expected prop 'currentRoute'");
    		}
    	}

    	get currentRoute() {
    		throw new Error("<Layout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentRoute(value) {
    		throw new Error("<Layout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const routes = [
      {
        name: '/',
        component: Routes,
        layout: Layout
      },
      {
        name: '/rooms/:id',
        component: U5Bidu5D,
        layout: Layout
      }
    ];

    /* src/app.svelte generated by Svelte v3.20.1 */
    const file$9 = "src/app.svelte";

    function create_fragment$b(ctx) {
    	let div;
    	let current;
    	const router = new src_6({ props: { routes }, $$inline: true });

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(router.$$.fragment);
    			attr_dev(div, "class", "app");
    			add_location(div, file$9, 6, 0, 103);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(router, div, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(router.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(router.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(router);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("App", $$slots, []);
    	$$self.$capture_state = () => ({ Router: src_6, routes });
    	return [];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment$b.name
    		});
    	}
    }

    const app = new App({
    	target: document.body
    });

}());
//# sourceMappingURL=client.js.map
